// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'isar_resources.dart';

// **************************************************************************
// _IsarCollectionGenerator
// **************************************************************************

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetHistoryResourceCollection on Isar {
  IsarCollection<int, HistoryResource> get historyResources =>
      this.collection();
}

const HistoryResourceSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'HistoryResource',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, HistoryResource>(
    serialize: serializeHistoryResource,
    deserialize: deserializeHistoryResource,
    deserializeProperty: deserializeHistoryResourceProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeHistoryResource(IsarWriter writer, HistoryResource object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
HistoryResource deserializeHistoryResource(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = HistoryResource(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeHistoryResourceProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _HistoryResourceUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _HistoryResourceUpdateImpl implements _HistoryResourceUpdate {
  const _HistoryResourceUpdateImpl(this.collection);

  final IsarCollection<int, HistoryResource> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _HistoryResourceUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _HistoryResourceUpdateAllImpl implements _HistoryResourceUpdateAll {
  const _HistoryResourceUpdateAllImpl(this.collection);

  final IsarCollection<int, HistoryResource> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension HistoryResourceUpdate on IsarCollection<int, HistoryResource> {
  _HistoryResourceUpdate get update => _HistoryResourceUpdateImpl(this);

  _HistoryResourceUpdateAll get updateAll =>
      _HistoryResourceUpdateAllImpl(this);
}

sealed class _HistoryResourceQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _HistoryResourceQueryUpdateImpl implements _HistoryResourceQueryUpdate {
  const _HistoryResourceQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<HistoryResource> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension HistoryResourceQueryUpdate on IsarQuery<HistoryResource> {
  _HistoryResourceQueryUpdate get updateFirst =>
      _HistoryResourceQueryUpdateImpl(this, limit: 1);

  _HistoryResourceQueryUpdate get updateAll =>
      _HistoryResourceQueryUpdateImpl(this);
}

class _HistoryResourceQueryBuilderUpdateImpl
    implements _HistoryResourceQueryUpdate {
  const _HistoryResourceQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<HistoryResource, HistoryResource, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension HistoryResourceQueryBuilderUpdate
    on QueryBuilder<HistoryResource, HistoryResource, QOperations> {
  _HistoryResourceQueryUpdate get updateFirst =>
      _HistoryResourceQueryBuilderUpdateImpl(this, limit: 1);

  _HistoryResourceQueryUpdate get updateAll =>
      _HistoryResourceQueryBuilderUpdateImpl(this);
}

extension HistoryResourceQueryFilter
    on QueryBuilder<HistoryResource, HistoryResource, QFilterCondition> {
  QueryBuilder<HistoryResource, HistoryResource, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension HistoryResourceQueryObject
    on QueryBuilder<HistoryResource, HistoryResource, QFilterCondition> {}

extension HistoryResourceQuerySortBy
    on QueryBuilder<HistoryResource, HistoryResource, QSortBy> {
  QueryBuilder<HistoryResource, HistoryResource, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension HistoryResourceQuerySortThenBy
    on QueryBuilder<HistoryResource, HistoryResource, QSortThenBy> {
  QueryBuilder<HistoryResource, HistoryResource, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension HistoryResourceQueryWhereDistinct
    on QueryBuilder<HistoryResource, HistoryResource, QDistinct> {
  QueryBuilder<HistoryResource, HistoryResource, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<HistoryResource, HistoryResource, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension HistoryResourceQueryProperty1
    on QueryBuilder<HistoryResource, HistoryResource, QProperty> {
  QueryBuilder<HistoryResource, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<HistoryResource, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<HistoryResource, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension HistoryResourceQueryProperty2<R>
    on QueryBuilder<HistoryResource, R, QAfterProperty> {
  QueryBuilder<HistoryResource, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<HistoryResource, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<HistoryResource, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension HistoryResourceQueryProperty3<R1, R2>
    on QueryBuilder<HistoryResource, (R1, R2), QAfterProperty> {
  QueryBuilder<HistoryResource, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<HistoryResource, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<HistoryResource, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarAccountCollection on Isar {
  IsarCollection<int, IsarAccount> get isarAccounts => this.collection();
}

const IsarAccountSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarAccount',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarAccount>(
    serialize: serializeIsarAccount,
    deserialize: deserializeIsarAccount,
    deserializeProperty: deserializeIsarAccountProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarAccount(IsarWriter writer, IsarAccount object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarAccount deserializeIsarAccount(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarAccount(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarAccountProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarAccountUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarAccountUpdateImpl implements _IsarAccountUpdate {
  const _IsarAccountUpdateImpl(this.collection);

  final IsarCollection<int, IsarAccount> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarAccountUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarAccountUpdateAllImpl implements _IsarAccountUpdateAll {
  const _IsarAccountUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarAccount> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarAccountUpdate on IsarCollection<int, IsarAccount> {
  _IsarAccountUpdate get update => _IsarAccountUpdateImpl(this);

  _IsarAccountUpdateAll get updateAll => _IsarAccountUpdateAllImpl(this);
}

sealed class _IsarAccountQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarAccountQueryUpdateImpl implements _IsarAccountQueryUpdate {
  const _IsarAccountQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarAccount> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarAccountQueryUpdate on IsarQuery<IsarAccount> {
  _IsarAccountQueryUpdate get updateFirst =>
      _IsarAccountQueryUpdateImpl(this, limit: 1);

  _IsarAccountQueryUpdate get updateAll => _IsarAccountQueryUpdateImpl(this);
}

class _IsarAccountQueryBuilderUpdateImpl implements _IsarAccountQueryUpdate {
  const _IsarAccountQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarAccount, IsarAccount, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarAccountQueryBuilderUpdate
    on QueryBuilder<IsarAccount, IsarAccount, QOperations> {
  _IsarAccountQueryUpdate get updateFirst =>
      _IsarAccountQueryBuilderUpdateImpl(this, limit: 1);

  _IsarAccountQueryUpdate get updateAll =>
      _IsarAccountQueryBuilderUpdateImpl(this);
}

extension IsarAccountQueryFilter
    on QueryBuilder<IsarAccount, IsarAccount, QFilterCondition> {
  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarAccountQueryObject
    on QueryBuilder<IsarAccount, IsarAccount, QFilterCondition> {}

extension IsarAccountQuerySortBy
    on QueryBuilder<IsarAccount, IsarAccount, QSortBy> {
  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarAccountQuerySortThenBy
    on QueryBuilder<IsarAccount, IsarAccount, QSortThenBy> {
  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarAccountQueryWhereDistinct
    on QueryBuilder<IsarAccount, IsarAccount, QDistinct> {
  QueryBuilder<IsarAccount, IsarAccount, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarAccountQueryProperty1
    on QueryBuilder<IsarAccount, IsarAccount, QProperty> {
  QueryBuilder<IsarAccount, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAccount, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAccount, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarAccountQueryProperty2<R>
    on QueryBuilder<IsarAccount, R, QAfterProperty> {
  QueryBuilder<IsarAccount, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAccount, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAccount, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarAccountQueryProperty3<R1, R2>
    on QueryBuilder<IsarAccount, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarAccount, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAccount, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAccount, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarActivityDefinitionCollection on Isar {
  IsarCollection<int, IsarActivityDefinition> get isarActivityDefinitions =>
      this.collection();
}

const IsarActivityDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarActivityDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarActivityDefinition>(
    serialize: serializeIsarActivityDefinition,
    deserialize: deserializeIsarActivityDefinition,
    deserializeProperty: deserializeIsarActivityDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarActivityDefinition(
    IsarWriter writer, IsarActivityDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarActivityDefinition deserializeIsarActivityDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarActivityDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarActivityDefinitionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarActivityDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarActivityDefinitionUpdateImpl
    implements _IsarActivityDefinitionUpdate {
  const _IsarActivityDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarActivityDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarActivityDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarActivityDefinitionUpdateAllImpl
    implements _IsarActivityDefinitionUpdateAll {
  const _IsarActivityDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarActivityDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarActivityDefinitionUpdate
    on IsarCollection<int, IsarActivityDefinition> {
  _IsarActivityDefinitionUpdate get update =>
      _IsarActivityDefinitionUpdateImpl(this);

  _IsarActivityDefinitionUpdateAll get updateAll =>
      _IsarActivityDefinitionUpdateAllImpl(this);
}

sealed class _IsarActivityDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarActivityDefinitionQueryUpdateImpl
    implements _IsarActivityDefinitionQueryUpdate {
  const _IsarActivityDefinitionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarActivityDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarActivityDefinitionQueryUpdate
    on IsarQuery<IsarActivityDefinition> {
  _IsarActivityDefinitionQueryUpdate get updateFirst =>
      _IsarActivityDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarActivityDefinitionQueryUpdate get updateAll =>
      _IsarActivityDefinitionQueryUpdateImpl(this);
}

class _IsarActivityDefinitionQueryBuilderUpdateImpl
    implements _IsarActivityDefinitionQueryUpdate {
  const _IsarActivityDefinitionQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarActivityDefinitionQueryBuilderUpdate on QueryBuilder<
    IsarActivityDefinition, IsarActivityDefinition, QOperations> {
  _IsarActivityDefinitionQueryUpdate get updateFirst =>
      _IsarActivityDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarActivityDefinitionQueryUpdate get updateAll =>
      _IsarActivityDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarActivityDefinitionQueryFilter on QueryBuilder<
    IsarActivityDefinition, IsarActivityDefinition, QFilterCondition> {
  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarActivityDefinitionQueryObject on QueryBuilder<
    IsarActivityDefinition, IsarActivityDefinition, QFilterCondition> {}

extension IsarActivityDefinitionQuerySortBy
    on QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QSortBy> {
  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarActivityDefinitionQuerySortThenBy on QueryBuilder<
    IsarActivityDefinition, IsarActivityDefinition, QSortThenBy> {
  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarActivityDefinitionQueryWhereDistinct
    on QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QDistinct> {
  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarActivityDefinitionQueryProperty1
    on QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QProperty> {
  QueryBuilder<IsarActivityDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarActivityDefinition, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarActivityDefinition, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarActivityDefinitionQueryProperty2<R>
    on QueryBuilder<IsarActivityDefinition, R, QAfterProperty> {
  QueryBuilder<IsarActivityDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarActivityDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarActivityDefinition, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarActivityDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarActivityDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarActivityDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarActivityDefinition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarActivityDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarAdministrableProductDefinitionCollection on Isar {
  IsarCollection<int, IsarAdministrableProductDefinition>
      get isarAdministrableProductDefinitions => this.collection();
}

const IsarAdministrableProductDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarAdministrableProductDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarAdministrableProductDefinition>(
    serialize: serializeIsarAdministrableProductDefinition,
    deserialize: deserializeIsarAdministrableProductDefinition,
    deserializeProperty: deserializeIsarAdministrableProductDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarAdministrableProductDefinition(
    IsarWriter writer, IsarAdministrableProductDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarAdministrableProductDefinition
    deserializeIsarAdministrableProductDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarAdministrableProductDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarAdministrableProductDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarAdministrableProductDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarAdministrableProductDefinitionUpdateImpl
    implements _IsarAdministrableProductDefinitionUpdate {
  const _IsarAdministrableProductDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarAdministrableProductDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarAdministrableProductDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarAdministrableProductDefinitionUpdateAllImpl
    implements _IsarAdministrableProductDefinitionUpdateAll {
  const _IsarAdministrableProductDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarAdministrableProductDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarAdministrableProductDefinitionUpdate
    on IsarCollection<int, IsarAdministrableProductDefinition> {
  _IsarAdministrableProductDefinitionUpdate get update =>
      _IsarAdministrableProductDefinitionUpdateImpl(this);

  _IsarAdministrableProductDefinitionUpdateAll get updateAll =>
      _IsarAdministrableProductDefinitionUpdateAllImpl(this);
}

sealed class _IsarAdministrableProductDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarAdministrableProductDefinitionQueryUpdateImpl
    implements _IsarAdministrableProductDefinitionQueryUpdate {
  const _IsarAdministrableProductDefinitionQueryUpdateImpl(this.query,
      {this.limit});

  final IsarQuery<IsarAdministrableProductDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarAdministrableProductDefinitionQueryUpdate
    on IsarQuery<IsarAdministrableProductDefinition> {
  _IsarAdministrableProductDefinitionQueryUpdate get updateFirst =>
      _IsarAdministrableProductDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarAdministrableProductDefinitionQueryUpdate get updateAll =>
      _IsarAdministrableProductDefinitionQueryUpdateImpl(this);
}

class _IsarAdministrableProductDefinitionQueryBuilderUpdateImpl
    implements _IsarAdministrableProductDefinitionQueryUpdate {
  const _IsarAdministrableProductDefinitionQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarAdministrableProductDefinitionQueryBuilderUpdate on QueryBuilder<
    IsarAdministrableProductDefinition,
    IsarAdministrableProductDefinition,
    QOperations> {
  _IsarAdministrableProductDefinitionQueryUpdate get updateFirst =>
      _IsarAdministrableProductDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarAdministrableProductDefinitionQueryUpdate get updateAll =>
      _IsarAdministrableProductDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarAdministrableProductDefinitionQueryFilter on QueryBuilder<
    IsarAdministrableProductDefinition,
    IsarAdministrableProductDefinition,
    QFilterCondition> {
  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
          IsarAdministrableProductDefinition, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
          IsarAdministrableProductDefinition, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarAdministrableProductDefinitionQueryObject on QueryBuilder<
    IsarAdministrableProductDefinition,
    IsarAdministrableProductDefinition,
    QFilterCondition> {}

extension IsarAdministrableProductDefinitionQuerySortBy on QueryBuilder<
    IsarAdministrableProductDefinition,
    IsarAdministrableProductDefinition,
    QSortBy> {
  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterSortBy> sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterSortBy> sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarAdministrableProductDefinitionQuerySortThenBy on QueryBuilder<
    IsarAdministrableProductDefinition,
    IsarAdministrableProductDefinition,
    QSortThenBy> {
  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterSortBy> thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterSortBy> thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarAdministrableProductDefinitionQueryWhereDistinct on QueryBuilder<
    IsarAdministrableProductDefinition,
    IsarAdministrableProductDefinition,
    QDistinct> {
  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarAdministrableProductDefinitionQueryProperty1 on QueryBuilder<
    IsarAdministrableProductDefinition,
    IsarAdministrableProductDefinition,
    QProperty> {
  QueryBuilder<IsarAdministrableProductDefinition, int, QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition, Map<String, dynamic>,
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarAdministrableProductDefinitionQueryProperty2<R>
    on QueryBuilder<IsarAdministrableProductDefinition, R, QAfterProperty> {
  QueryBuilder<IsarAdministrableProductDefinition, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarAdministrableProductDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarAdministrableProductDefinition, (R1, R2),
        QAfterProperty> {
  QueryBuilder<IsarAdministrableProductDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition, (R1, R2, String),
      QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      (R1, R2, Map<String, dynamic>), QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarAdverseEventCollection on Isar {
  IsarCollection<int, IsarAdverseEvent> get isarAdverseEvents =>
      this.collection();
}

const IsarAdverseEventSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarAdverseEvent',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarAdverseEvent>(
    serialize: serializeIsarAdverseEvent,
    deserialize: deserializeIsarAdverseEvent,
    deserializeProperty: deserializeIsarAdverseEventProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarAdverseEvent(IsarWriter writer, IsarAdverseEvent object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarAdverseEvent deserializeIsarAdverseEvent(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarAdverseEvent(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarAdverseEventProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarAdverseEventUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarAdverseEventUpdateImpl implements _IsarAdverseEventUpdate {
  const _IsarAdverseEventUpdateImpl(this.collection);

  final IsarCollection<int, IsarAdverseEvent> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarAdverseEventUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarAdverseEventUpdateAllImpl implements _IsarAdverseEventUpdateAll {
  const _IsarAdverseEventUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarAdverseEvent> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarAdverseEventUpdate on IsarCollection<int, IsarAdverseEvent> {
  _IsarAdverseEventUpdate get update => _IsarAdverseEventUpdateImpl(this);

  _IsarAdverseEventUpdateAll get updateAll =>
      _IsarAdverseEventUpdateAllImpl(this);
}

sealed class _IsarAdverseEventQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarAdverseEventQueryUpdateImpl implements _IsarAdverseEventQueryUpdate {
  const _IsarAdverseEventQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarAdverseEvent> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarAdverseEventQueryUpdate on IsarQuery<IsarAdverseEvent> {
  _IsarAdverseEventQueryUpdate get updateFirst =>
      _IsarAdverseEventQueryUpdateImpl(this, limit: 1);

  _IsarAdverseEventQueryUpdate get updateAll =>
      _IsarAdverseEventQueryUpdateImpl(this);
}

class _IsarAdverseEventQueryBuilderUpdateImpl
    implements _IsarAdverseEventQueryUpdate {
  const _IsarAdverseEventQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarAdverseEventQueryBuilderUpdate
    on QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QOperations> {
  _IsarAdverseEventQueryUpdate get updateFirst =>
      _IsarAdverseEventQueryBuilderUpdateImpl(this, limit: 1);

  _IsarAdverseEventQueryUpdate get updateAll =>
      _IsarAdverseEventQueryBuilderUpdateImpl(this);
}

extension IsarAdverseEventQueryFilter
    on QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QFilterCondition> {
  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarAdverseEventQueryObject
    on QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QFilterCondition> {}

extension IsarAdverseEventQuerySortBy
    on QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QSortBy> {
  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarAdverseEventQuerySortThenBy
    on QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QSortThenBy> {
  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarAdverseEventQueryWhereDistinct
    on QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QDistinct> {
  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarAdverseEventQueryProperty1
    on QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QProperty> {
  QueryBuilder<IsarAdverseEvent, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAdverseEvent, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAdverseEvent, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarAdverseEventQueryProperty2<R>
    on QueryBuilder<IsarAdverseEvent, R, QAfterProperty> {
  QueryBuilder<IsarAdverseEvent, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAdverseEvent, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAdverseEvent, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarAdverseEventQueryProperty3<R1, R2>
    on QueryBuilder<IsarAdverseEvent, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarAdverseEvent, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAdverseEvent, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAdverseEvent, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarAllergyIntoleranceCollection on Isar {
  IsarCollection<int, IsarAllergyIntolerance> get isarAllergyIntolerances =>
      this.collection();
}

const IsarAllergyIntoleranceSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarAllergyIntolerance',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarAllergyIntolerance>(
    serialize: serializeIsarAllergyIntolerance,
    deserialize: deserializeIsarAllergyIntolerance,
    deserializeProperty: deserializeIsarAllergyIntoleranceProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarAllergyIntolerance(
    IsarWriter writer, IsarAllergyIntolerance object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarAllergyIntolerance deserializeIsarAllergyIntolerance(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarAllergyIntolerance(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarAllergyIntoleranceProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarAllergyIntoleranceUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarAllergyIntoleranceUpdateImpl
    implements _IsarAllergyIntoleranceUpdate {
  const _IsarAllergyIntoleranceUpdateImpl(this.collection);

  final IsarCollection<int, IsarAllergyIntolerance> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarAllergyIntoleranceUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarAllergyIntoleranceUpdateAllImpl
    implements _IsarAllergyIntoleranceUpdateAll {
  const _IsarAllergyIntoleranceUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarAllergyIntolerance> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarAllergyIntoleranceUpdate
    on IsarCollection<int, IsarAllergyIntolerance> {
  _IsarAllergyIntoleranceUpdate get update =>
      _IsarAllergyIntoleranceUpdateImpl(this);

  _IsarAllergyIntoleranceUpdateAll get updateAll =>
      _IsarAllergyIntoleranceUpdateAllImpl(this);
}

sealed class _IsarAllergyIntoleranceQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarAllergyIntoleranceQueryUpdateImpl
    implements _IsarAllergyIntoleranceQueryUpdate {
  const _IsarAllergyIntoleranceQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarAllergyIntolerance> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarAllergyIntoleranceQueryUpdate
    on IsarQuery<IsarAllergyIntolerance> {
  _IsarAllergyIntoleranceQueryUpdate get updateFirst =>
      _IsarAllergyIntoleranceQueryUpdateImpl(this, limit: 1);

  _IsarAllergyIntoleranceQueryUpdate get updateAll =>
      _IsarAllergyIntoleranceQueryUpdateImpl(this);
}

class _IsarAllergyIntoleranceQueryBuilderUpdateImpl
    implements _IsarAllergyIntoleranceQueryUpdate {
  const _IsarAllergyIntoleranceQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarAllergyIntoleranceQueryBuilderUpdate on QueryBuilder<
    IsarAllergyIntolerance, IsarAllergyIntolerance, QOperations> {
  _IsarAllergyIntoleranceQueryUpdate get updateFirst =>
      _IsarAllergyIntoleranceQueryBuilderUpdateImpl(this, limit: 1);

  _IsarAllergyIntoleranceQueryUpdate get updateAll =>
      _IsarAllergyIntoleranceQueryBuilderUpdateImpl(this);
}

extension IsarAllergyIntoleranceQueryFilter on QueryBuilder<
    IsarAllergyIntolerance, IsarAllergyIntolerance, QFilterCondition> {
  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarAllergyIntoleranceQueryObject on QueryBuilder<
    IsarAllergyIntolerance, IsarAllergyIntolerance, QFilterCondition> {}

extension IsarAllergyIntoleranceQuerySortBy
    on QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QSortBy> {
  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarAllergyIntoleranceQuerySortThenBy on QueryBuilder<
    IsarAllergyIntolerance, IsarAllergyIntolerance, QSortThenBy> {
  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarAllergyIntoleranceQueryWhereDistinct
    on QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QDistinct> {
  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarAllergyIntoleranceQueryProperty1
    on QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QProperty> {
  QueryBuilder<IsarAllergyIntolerance, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarAllergyIntoleranceQueryProperty2<R>
    on QueryBuilder<IsarAllergyIntolerance, R, QAfterProperty> {
  QueryBuilder<IsarAllergyIntolerance, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarAllergyIntoleranceQueryProperty3<R1, R2>
    on QueryBuilder<IsarAllergyIntolerance, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarAllergyIntolerance, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarAppointmentCollection on Isar {
  IsarCollection<int, IsarAppointment> get isarAppointments =>
      this.collection();
}

const IsarAppointmentSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarAppointment',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarAppointment>(
    serialize: serializeIsarAppointment,
    deserialize: deserializeIsarAppointment,
    deserializeProperty: deserializeIsarAppointmentProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarAppointment(IsarWriter writer, IsarAppointment object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarAppointment deserializeIsarAppointment(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarAppointment(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarAppointmentProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarAppointmentUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarAppointmentUpdateImpl implements _IsarAppointmentUpdate {
  const _IsarAppointmentUpdateImpl(this.collection);

  final IsarCollection<int, IsarAppointment> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarAppointmentUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarAppointmentUpdateAllImpl implements _IsarAppointmentUpdateAll {
  const _IsarAppointmentUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarAppointment> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarAppointmentUpdate on IsarCollection<int, IsarAppointment> {
  _IsarAppointmentUpdate get update => _IsarAppointmentUpdateImpl(this);

  _IsarAppointmentUpdateAll get updateAll =>
      _IsarAppointmentUpdateAllImpl(this);
}

sealed class _IsarAppointmentQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarAppointmentQueryUpdateImpl implements _IsarAppointmentQueryUpdate {
  const _IsarAppointmentQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarAppointment> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarAppointmentQueryUpdate on IsarQuery<IsarAppointment> {
  _IsarAppointmentQueryUpdate get updateFirst =>
      _IsarAppointmentQueryUpdateImpl(this, limit: 1);

  _IsarAppointmentQueryUpdate get updateAll =>
      _IsarAppointmentQueryUpdateImpl(this);
}

class _IsarAppointmentQueryBuilderUpdateImpl
    implements _IsarAppointmentQueryUpdate {
  const _IsarAppointmentQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarAppointment, IsarAppointment, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarAppointmentQueryBuilderUpdate
    on QueryBuilder<IsarAppointment, IsarAppointment, QOperations> {
  _IsarAppointmentQueryUpdate get updateFirst =>
      _IsarAppointmentQueryBuilderUpdateImpl(this, limit: 1);

  _IsarAppointmentQueryUpdate get updateAll =>
      _IsarAppointmentQueryBuilderUpdateImpl(this);
}

extension IsarAppointmentQueryFilter
    on QueryBuilder<IsarAppointment, IsarAppointment, QFilterCondition> {
  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarAppointmentQueryObject
    on QueryBuilder<IsarAppointment, IsarAppointment, QFilterCondition> {}

extension IsarAppointmentQuerySortBy
    on QueryBuilder<IsarAppointment, IsarAppointment, QSortBy> {
  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarAppointmentQuerySortThenBy
    on QueryBuilder<IsarAppointment, IsarAppointment, QSortThenBy> {
  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarAppointmentQueryWhereDistinct
    on QueryBuilder<IsarAppointment, IsarAppointment, QDistinct> {
  QueryBuilder<IsarAppointment, IsarAppointment, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarAppointmentQueryProperty1
    on QueryBuilder<IsarAppointment, IsarAppointment, QProperty> {
  QueryBuilder<IsarAppointment, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAppointment, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAppointment, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarAppointmentQueryProperty2<R>
    on QueryBuilder<IsarAppointment, R, QAfterProperty> {
  QueryBuilder<IsarAppointment, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAppointment, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAppointment, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarAppointmentQueryProperty3<R1, R2>
    on QueryBuilder<IsarAppointment, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarAppointment, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAppointment, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAppointment, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarAppointmentResponseCollection on Isar {
  IsarCollection<int, IsarAppointmentResponse> get isarAppointmentResponses =>
      this.collection();
}

const IsarAppointmentResponseSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarAppointmentResponse',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarAppointmentResponse>(
    serialize: serializeIsarAppointmentResponse,
    deserialize: deserializeIsarAppointmentResponse,
    deserializeProperty: deserializeIsarAppointmentResponseProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarAppointmentResponse(
    IsarWriter writer, IsarAppointmentResponse object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarAppointmentResponse deserializeIsarAppointmentResponse(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarAppointmentResponse(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarAppointmentResponseProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarAppointmentResponseUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarAppointmentResponseUpdateImpl
    implements _IsarAppointmentResponseUpdate {
  const _IsarAppointmentResponseUpdateImpl(this.collection);

  final IsarCollection<int, IsarAppointmentResponse> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarAppointmentResponseUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarAppointmentResponseUpdateAllImpl
    implements _IsarAppointmentResponseUpdateAll {
  const _IsarAppointmentResponseUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarAppointmentResponse> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarAppointmentResponseUpdate
    on IsarCollection<int, IsarAppointmentResponse> {
  _IsarAppointmentResponseUpdate get update =>
      _IsarAppointmentResponseUpdateImpl(this);

  _IsarAppointmentResponseUpdateAll get updateAll =>
      _IsarAppointmentResponseUpdateAllImpl(this);
}

sealed class _IsarAppointmentResponseQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarAppointmentResponseQueryUpdateImpl
    implements _IsarAppointmentResponseQueryUpdate {
  const _IsarAppointmentResponseQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarAppointmentResponse> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarAppointmentResponseQueryUpdate
    on IsarQuery<IsarAppointmentResponse> {
  _IsarAppointmentResponseQueryUpdate get updateFirst =>
      _IsarAppointmentResponseQueryUpdateImpl(this, limit: 1);

  _IsarAppointmentResponseQueryUpdate get updateAll =>
      _IsarAppointmentResponseQueryUpdateImpl(this);
}

class _IsarAppointmentResponseQueryBuilderUpdateImpl
    implements _IsarAppointmentResponseQueryUpdate {
  const _IsarAppointmentResponseQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarAppointmentResponseQueryBuilderUpdate on QueryBuilder<
    IsarAppointmentResponse, IsarAppointmentResponse, QOperations> {
  _IsarAppointmentResponseQueryUpdate get updateFirst =>
      _IsarAppointmentResponseQueryBuilderUpdateImpl(this, limit: 1);

  _IsarAppointmentResponseQueryUpdate get updateAll =>
      _IsarAppointmentResponseQueryBuilderUpdateImpl(this);
}

extension IsarAppointmentResponseQueryFilter on QueryBuilder<
    IsarAppointmentResponse, IsarAppointmentResponse, QFilterCondition> {
  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarAppointmentResponseQueryObject on QueryBuilder<
    IsarAppointmentResponse, IsarAppointmentResponse, QFilterCondition> {}

extension IsarAppointmentResponseQuerySortBy
    on QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QSortBy> {
  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarAppointmentResponseQuerySortThenBy on QueryBuilder<
    IsarAppointmentResponse, IsarAppointmentResponse, QSortThenBy> {
  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarAppointmentResponseQueryWhereDistinct on QueryBuilder<
    IsarAppointmentResponse, IsarAppointmentResponse, QDistinct> {
  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarAppointmentResponseQueryProperty1 on QueryBuilder<
    IsarAppointmentResponse, IsarAppointmentResponse, QProperty> {
  QueryBuilder<IsarAppointmentResponse, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAppointmentResponse, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAppointmentResponse, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarAppointmentResponseQueryProperty2<R>
    on QueryBuilder<IsarAppointmentResponse, R, QAfterProperty> {
  QueryBuilder<IsarAppointmentResponse, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAppointmentResponse, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAppointmentResponse, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarAppointmentResponseQueryProperty3<R1, R2>
    on QueryBuilder<IsarAppointmentResponse, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarAppointmentResponse, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAppointmentResponse, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAppointmentResponse, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarAuditEventCollection on Isar {
  IsarCollection<int, IsarAuditEvent> get isarAuditEvents => this.collection();
}

const IsarAuditEventSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarAuditEvent',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarAuditEvent>(
    serialize: serializeIsarAuditEvent,
    deserialize: deserializeIsarAuditEvent,
    deserializeProperty: deserializeIsarAuditEventProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarAuditEvent(IsarWriter writer, IsarAuditEvent object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarAuditEvent deserializeIsarAuditEvent(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarAuditEvent(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarAuditEventProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarAuditEventUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarAuditEventUpdateImpl implements _IsarAuditEventUpdate {
  const _IsarAuditEventUpdateImpl(this.collection);

  final IsarCollection<int, IsarAuditEvent> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarAuditEventUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarAuditEventUpdateAllImpl implements _IsarAuditEventUpdateAll {
  const _IsarAuditEventUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarAuditEvent> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarAuditEventUpdate on IsarCollection<int, IsarAuditEvent> {
  _IsarAuditEventUpdate get update => _IsarAuditEventUpdateImpl(this);

  _IsarAuditEventUpdateAll get updateAll => _IsarAuditEventUpdateAllImpl(this);
}

sealed class _IsarAuditEventQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarAuditEventQueryUpdateImpl implements _IsarAuditEventQueryUpdate {
  const _IsarAuditEventQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarAuditEvent> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarAuditEventQueryUpdate on IsarQuery<IsarAuditEvent> {
  _IsarAuditEventQueryUpdate get updateFirst =>
      _IsarAuditEventQueryUpdateImpl(this, limit: 1);

  _IsarAuditEventQueryUpdate get updateAll =>
      _IsarAuditEventQueryUpdateImpl(this);
}

class _IsarAuditEventQueryBuilderUpdateImpl
    implements _IsarAuditEventQueryUpdate {
  const _IsarAuditEventQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarAuditEvent, IsarAuditEvent, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarAuditEventQueryBuilderUpdate
    on QueryBuilder<IsarAuditEvent, IsarAuditEvent, QOperations> {
  _IsarAuditEventQueryUpdate get updateFirst =>
      _IsarAuditEventQueryBuilderUpdateImpl(this, limit: 1);

  _IsarAuditEventQueryUpdate get updateAll =>
      _IsarAuditEventQueryBuilderUpdateImpl(this);
}

extension IsarAuditEventQueryFilter
    on QueryBuilder<IsarAuditEvent, IsarAuditEvent, QFilterCondition> {
  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarAuditEventQueryObject
    on QueryBuilder<IsarAuditEvent, IsarAuditEvent, QFilterCondition> {}

extension IsarAuditEventQuerySortBy
    on QueryBuilder<IsarAuditEvent, IsarAuditEvent, QSortBy> {
  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarAuditEventQuerySortThenBy
    on QueryBuilder<IsarAuditEvent, IsarAuditEvent, QSortThenBy> {
  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarAuditEventQueryWhereDistinct
    on QueryBuilder<IsarAuditEvent, IsarAuditEvent, QDistinct> {
  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarAuditEventQueryProperty1
    on QueryBuilder<IsarAuditEvent, IsarAuditEvent, QProperty> {
  QueryBuilder<IsarAuditEvent, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAuditEvent, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAuditEvent, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarAuditEventQueryProperty2<R>
    on QueryBuilder<IsarAuditEvent, R, QAfterProperty> {
  QueryBuilder<IsarAuditEvent, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAuditEvent, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAuditEvent, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarAuditEventQueryProperty3<R1, R2>
    on QueryBuilder<IsarAuditEvent, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarAuditEvent, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAuditEvent, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarAuditEvent, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarBasicCollection on Isar {
  IsarCollection<int, IsarBasic> get isarBasics => this.collection();
}

const IsarBasicSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarBasic',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarBasic>(
    serialize: serializeIsarBasic,
    deserialize: deserializeIsarBasic,
    deserializeProperty: deserializeIsarBasicProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarBasic(IsarWriter writer, IsarBasic object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarBasic deserializeIsarBasic(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarBasic(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarBasicProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarBasicUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarBasicUpdateImpl implements _IsarBasicUpdate {
  const _IsarBasicUpdateImpl(this.collection);

  final IsarCollection<int, IsarBasic> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarBasicUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarBasicUpdateAllImpl implements _IsarBasicUpdateAll {
  const _IsarBasicUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarBasic> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarBasicUpdate on IsarCollection<int, IsarBasic> {
  _IsarBasicUpdate get update => _IsarBasicUpdateImpl(this);

  _IsarBasicUpdateAll get updateAll => _IsarBasicUpdateAllImpl(this);
}

sealed class _IsarBasicQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarBasicQueryUpdateImpl implements _IsarBasicQueryUpdate {
  const _IsarBasicQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarBasic> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarBasicQueryUpdate on IsarQuery<IsarBasic> {
  _IsarBasicQueryUpdate get updateFirst =>
      _IsarBasicQueryUpdateImpl(this, limit: 1);

  _IsarBasicQueryUpdate get updateAll => _IsarBasicQueryUpdateImpl(this);
}

class _IsarBasicQueryBuilderUpdateImpl implements _IsarBasicQueryUpdate {
  const _IsarBasicQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarBasic, IsarBasic, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarBasicQueryBuilderUpdate
    on QueryBuilder<IsarBasic, IsarBasic, QOperations> {
  _IsarBasicQueryUpdate get updateFirst =>
      _IsarBasicQueryBuilderUpdateImpl(this, limit: 1);

  _IsarBasicQueryUpdate get updateAll => _IsarBasicQueryBuilderUpdateImpl(this);
}

extension IsarBasicQueryFilter
    on QueryBuilder<IsarBasic, IsarBasic, QFilterCondition> {
  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarBasicQueryObject
    on QueryBuilder<IsarBasic, IsarBasic, QFilterCondition> {}

extension IsarBasicQuerySortBy on QueryBuilder<IsarBasic, IsarBasic, QSortBy> {
  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarBasicQuerySortThenBy
    on QueryBuilder<IsarBasic, IsarBasic, QSortThenBy> {
  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarBasicQueryWhereDistinct
    on QueryBuilder<IsarBasic, IsarBasic, QDistinct> {
  QueryBuilder<IsarBasic, IsarBasic, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarBasicQueryProperty1
    on QueryBuilder<IsarBasic, IsarBasic, QProperty> {
  QueryBuilder<IsarBasic, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBasic, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarBasic, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarBasicQueryProperty2<R>
    on QueryBuilder<IsarBasic, R, QAfterProperty> {
  QueryBuilder<IsarBasic, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBasic, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarBasic, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarBasicQueryProperty3<R1, R2>
    on QueryBuilder<IsarBasic, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarBasic, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBasic, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarBasic, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarBinaryCollection on Isar {
  IsarCollection<int, IsarBinary> get isarBinarys => this.collection();
}

const IsarBinarySchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarBinary',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarBinary>(
    serialize: serializeIsarBinary,
    deserialize: deserializeIsarBinary,
    deserializeProperty: deserializeIsarBinaryProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarBinary(IsarWriter writer, IsarBinary object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarBinary deserializeIsarBinary(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarBinary(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarBinaryProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarBinaryUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarBinaryUpdateImpl implements _IsarBinaryUpdate {
  const _IsarBinaryUpdateImpl(this.collection);

  final IsarCollection<int, IsarBinary> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarBinaryUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarBinaryUpdateAllImpl implements _IsarBinaryUpdateAll {
  const _IsarBinaryUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarBinary> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarBinaryUpdate on IsarCollection<int, IsarBinary> {
  _IsarBinaryUpdate get update => _IsarBinaryUpdateImpl(this);

  _IsarBinaryUpdateAll get updateAll => _IsarBinaryUpdateAllImpl(this);
}

sealed class _IsarBinaryQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarBinaryQueryUpdateImpl implements _IsarBinaryQueryUpdate {
  const _IsarBinaryQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarBinary> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarBinaryQueryUpdate on IsarQuery<IsarBinary> {
  _IsarBinaryQueryUpdate get updateFirst =>
      _IsarBinaryQueryUpdateImpl(this, limit: 1);

  _IsarBinaryQueryUpdate get updateAll => _IsarBinaryQueryUpdateImpl(this);
}

class _IsarBinaryQueryBuilderUpdateImpl implements _IsarBinaryQueryUpdate {
  const _IsarBinaryQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarBinary, IsarBinary, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarBinaryQueryBuilderUpdate
    on QueryBuilder<IsarBinary, IsarBinary, QOperations> {
  _IsarBinaryQueryUpdate get updateFirst =>
      _IsarBinaryQueryBuilderUpdateImpl(this, limit: 1);

  _IsarBinaryQueryUpdate get updateAll =>
      _IsarBinaryQueryBuilderUpdateImpl(this);
}

extension IsarBinaryQueryFilter
    on QueryBuilder<IsarBinary, IsarBinary, QFilterCondition> {
  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarBinaryQueryObject
    on QueryBuilder<IsarBinary, IsarBinary, QFilterCondition> {}

extension IsarBinaryQuerySortBy
    on QueryBuilder<IsarBinary, IsarBinary, QSortBy> {
  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarBinaryQuerySortThenBy
    on QueryBuilder<IsarBinary, IsarBinary, QSortThenBy> {
  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarBinaryQueryWhereDistinct
    on QueryBuilder<IsarBinary, IsarBinary, QDistinct> {
  QueryBuilder<IsarBinary, IsarBinary, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarBinaryQueryProperty1
    on QueryBuilder<IsarBinary, IsarBinary, QProperty> {
  QueryBuilder<IsarBinary, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBinary, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarBinary, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarBinaryQueryProperty2<R>
    on QueryBuilder<IsarBinary, R, QAfterProperty> {
  QueryBuilder<IsarBinary, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBinary, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarBinary, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarBinaryQueryProperty3<R1, R2>
    on QueryBuilder<IsarBinary, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarBinary, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBinary, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarBinary, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarBiologicallyDerivedProductCollection on Isar {
  IsarCollection<int, IsarBiologicallyDerivedProduct>
      get isarBiologicallyDerivedProducts => this.collection();
}

const IsarBiologicallyDerivedProductSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarBiologicallyDerivedProduct',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarBiologicallyDerivedProduct>(
    serialize: serializeIsarBiologicallyDerivedProduct,
    deserialize: deserializeIsarBiologicallyDerivedProduct,
    deserializeProperty: deserializeIsarBiologicallyDerivedProductProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarBiologicallyDerivedProduct(
    IsarWriter writer, IsarBiologicallyDerivedProduct object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarBiologicallyDerivedProduct deserializeIsarBiologicallyDerivedProduct(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarBiologicallyDerivedProduct(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarBiologicallyDerivedProductProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarBiologicallyDerivedProductUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarBiologicallyDerivedProductUpdateImpl
    implements _IsarBiologicallyDerivedProductUpdate {
  const _IsarBiologicallyDerivedProductUpdateImpl(this.collection);

  final IsarCollection<int, IsarBiologicallyDerivedProduct> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarBiologicallyDerivedProductUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarBiologicallyDerivedProductUpdateAllImpl
    implements _IsarBiologicallyDerivedProductUpdateAll {
  const _IsarBiologicallyDerivedProductUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarBiologicallyDerivedProduct> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarBiologicallyDerivedProductUpdate
    on IsarCollection<int, IsarBiologicallyDerivedProduct> {
  _IsarBiologicallyDerivedProductUpdate get update =>
      _IsarBiologicallyDerivedProductUpdateImpl(this);

  _IsarBiologicallyDerivedProductUpdateAll get updateAll =>
      _IsarBiologicallyDerivedProductUpdateAllImpl(this);
}

sealed class _IsarBiologicallyDerivedProductQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarBiologicallyDerivedProductQueryUpdateImpl
    implements _IsarBiologicallyDerivedProductQueryUpdate {
  const _IsarBiologicallyDerivedProductQueryUpdateImpl(this.query,
      {this.limit});

  final IsarQuery<IsarBiologicallyDerivedProduct> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarBiologicallyDerivedProductQueryUpdate
    on IsarQuery<IsarBiologicallyDerivedProduct> {
  _IsarBiologicallyDerivedProductQueryUpdate get updateFirst =>
      _IsarBiologicallyDerivedProductQueryUpdateImpl(this, limit: 1);

  _IsarBiologicallyDerivedProductQueryUpdate get updateAll =>
      _IsarBiologicallyDerivedProductQueryUpdateImpl(this);
}

class _IsarBiologicallyDerivedProductQueryBuilderUpdateImpl
    implements _IsarBiologicallyDerivedProductQueryUpdate {
  const _IsarBiologicallyDerivedProductQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarBiologicallyDerivedProduct,
      IsarBiologicallyDerivedProduct, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarBiologicallyDerivedProductQueryBuilderUpdate on QueryBuilder<
    IsarBiologicallyDerivedProduct,
    IsarBiologicallyDerivedProduct,
    QOperations> {
  _IsarBiologicallyDerivedProductQueryUpdate get updateFirst =>
      _IsarBiologicallyDerivedProductQueryBuilderUpdateImpl(this, limit: 1);

  _IsarBiologicallyDerivedProductQueryUpdate get updateAll =>
      _IsarBiologicallyDerivedProductQueryBuilderUpdateImpl(this);
}

extension IsarBiologicallyDerivedProductQueryFilter on QueryBuilder<
    IsarBiologicallyDerivedProduct,
    IsarBiologicallyDerivedProduct,
    QFilterCondition> {
  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarBiologicallyDerivedProductQueryObject on QueryBuilder<
    IsarBiologicallyDerivedProduct,
    IsarBiologicallyDerivedProduct,
    QFilterCondition> {}

extension IsarBiologicallyDerivedProductQuerySortBy on QueryBuilder<
    IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct, QSortBy> {
  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarBiologicallyDerivedProductQuerySortThenBy on QueryBuilder<
    IsarBiologicallyDerivedProduct,
    IsarBiologicallyDerivedProduct,
    QSortThenBy> {
  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarBiologicallyDerivedProductQueryWhereDistinct on QueryBuilder<
    IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct, QDistinct> {
  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarBiologicallyDerivedProductQueryProperty1 on QueryBuilder<
    IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct, QProperty> {
  QueryBuilder<IsarBiologicallyDerivedProduct, int, QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, Map<String, dynamic>,
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarBiologicallyDerivedProductQueryProperty2<R>
    on QueryBuilder<IsarBiologicallyDerivedProduct, R, QAfterProperty> {
  QueryBuilder<IsarBiologicallyDerivedProduct, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarBiologicallyDerivedProductQueryProperty3<R1, R2>
    on QueryBuilder<IsarBiologicallyDerivedProduct, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarBiologicallyDerivedProduct, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarBodyStructureCollection on Isar {
  IsarCollection<int, IsarBodyStructure> get isarBodyStructures =>
      this.collection();
}

const IsarBodyStructureSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarBodyStructure',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarBodyStructure>(
    serialize: serializeIsarBodyStructure,
    deserialize: deserializeIsarBodyStructure,
    deserializeProperty: deserializeIsarBodyStructureProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarBodyStructure(IsarWriter writer, IsarBodyStructure object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarBodyStructure deserializeIsarBodyStructure(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarBodyStructure(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarBodyStructureProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarBodyStructureUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarBodyStructureUpdateImpl implements _IsarBodyStructureUpdate {
  const _IsarBodyStructureUpdateImpl(this.collection);

  final IsarCollection<int, IsarBodyStructure> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarBodyStructureUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarBodyStructureUpdateAllImpl implements _IsarBodyStructureUpdateAll {
  const _IsarBodyStructureUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarBodyStructure> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarBodyStructureUpdate on IsarCollection<int, IsarBodyStructure> {
  _IsarBodyStructureUpdate get update => _IsarBodyStructureUpdateImpl(this);

  _IsarBodyStructureUpdateAll get updateAll =>
      _IsarBodyStructureUpdateAllImpl(this);
}

sealed class _IsarBodyStructureQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarBodyStructureQueryUpdateImpl
    implements _IsarBodyStructureQueryUpdate {
  const _IsarBodyStructureQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarBodyStructure> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarBodyStructureQueryUpdate on IsarQuery<IsarBodyStructure> {
  _IsarBodyStructureQueryUpdate get updateFirst =>
      _IsarBodyStructureQueryUpdateImpl(this, limit: 1);

  _IsarBodyStructureQueryUpdate get updateAll =>
      _IsarBodyStructureQueryUpdateImpl(this);
}

class _IsarBodyStructureQueryBuilderUpdateImpl
    implements _IsarBodyStructureQueryUpdate {
  const _IsarBodyStructureQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarBodyStructure, IsarBodyStructure, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarBodyStructureQueryBuilderUpdate
    on QueryBuilder<IsarBodyStructure, IsarBodyStructure, QOperations> {
  _IsarBodyStructureQueryUpdate get updateFirst =>
      _IsarBodyStructureQueryBuilderUpdateImpl(this, limit: 1);

  _IsarBodyStructureQueryUpdate get updateAll =>
      _IsarBodyStructureQueryBuilderUpdateImpl(this);
}

extension IsarBodyStructureQueryFilter
    on QueryBuilder<IsarBodyStructure, IsarBodyStructure, QFilterCondition> {
  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarBodyStructureQueryObject
    on QueryBuilder<IsarBodyStructure, IsarBodyStructure, QFilterCondition> {}

extension IsarBodyStructureQuerySortBy
    on QueryBuilder<IsarBodyStructure, IsarBodyStructure, QSortBy> {
  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarBodyStructureQuerySortThenBy
    on QueryBuilder<IsarBodyStructure, IsarBodyStructure, QSortThenBy> {
  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarBodyStructureQueryWhereDistinct
    on QueryBuilder<IsarBodyStructure, IsarBodyStructure, QDistinct> {
  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarBodyStructureQueryProperty1
    on QueryBuilder<IsarBodyStructure, IsarBodyStructure, QProperty> {
  QueryBuilder<IsarBodyStructure, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBodyStructure, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarBodyStructure, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarBodyStructureQueryProperty2<R>
    on QueryBuilder<IsarBodyStructure, R, QAfterProperty> {
  QueryBuilder<IsarBodyStructure, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBodyStructure, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarBodyStructure, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarBodyStructureQueryProperty3<R1, R2>
    on QueryBuilder<IsarBodyStructure, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarBodyStructure, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBodyStructure, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarBodyStructure, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarBundleCollection on Isar {
  IsarCollection<int, IsarBundle> get isarBundles => this.collection();
}

const IsarBundleSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarBundle',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarBundle>(
    serialize: serializeIsarBundle,
    deserialize: deserializeIsarBundle,
    deserializeProperty: deserializeIsarBundleProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarBundle(IsarWriter writer, IsarBundle object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarBundle deserializeIsarBundle(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarBundle(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarBundleProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarBundleUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarBundleUpdateImpl implements _IsarBundleUpdate {
  const _IsarBundleUpdateImpl(this.collection);

  final IsarCollection<int, IsarBundle> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarBundleUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarBundleUpdateAllImpl implements _IsarBundleUpdateAll {
  const _IsarBundleUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarBundle> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarBundleUpdate on IsarCollection<int, IsarBundle> {
  _IsarBundleUpdate get update => _IsarBundleUpdateImpl(this);

  _IsarBundleUpdateAll get updateAll => _IsarBundleUpdateAllImpl(this);
}

sealed class _IsarBundleQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarBundleQueryUpdateImpl implements _IsarBundleQueryUpdate {
  const _IsarBundleQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarBundle> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarBundleQueryUpdate on IsarQuery<IsarBundle> {
  _IsarBundleQueryUpdate get updateFirst =>
      _IsarBundleQueryUpdateImpl(this, limit: 1);

  _IsarBundleQueryUpdate get updateAll => _IsarBundleQueryUpdateImpl(this);
}

class _IsarBundleQueryBuilderUpdateImpl implements _IsarBundleQueryUpdate {
  const _IsarBundleQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarBundle, IsarBundle, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarBundleQueryBuilderUpdate
    on QueryBuilder<IsarBundle, IsarBundle, QOperations> {
  _IsarBundleQueryUpdate get updateFirst =>
      _IsarBundleQueryBuilderUpdateImpl(this, limit: 1);

  _IsarBundleQueryUpdate get updateAll =>
      _IsarBundleQueryBuilderUpdateImpl(this);
}

extension IsarBundleQueryFilter
    on QueryBuilder<IsarBundle, IsarBundle, QFilterCondition> {
  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarBundleQueryObject
    on QueryBuilder<IsarBundle, IsarBundle, QFilterCondition> {}

extension IsarBundleQuerySortBy
    on QueryBuilder<IsarBundle, IsarBundle, QSortBy> {
  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarBundleQuerySortThenBy
    on QueryBuilder<IsarBundle, IsarBundle, QSortThenBy> {
  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarBundleQueryWhereDistinct
    on QueryBuilder<IsarBundle, IsarBundle, QDistinct> {
  QueryBuilder<IsarBundle, IsarBundle, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarBundleQueryProperty1
    on QueryBuilder<IsarBundle, IsarBundle, QProperty> {
  QueryBuilder<IsarBundle, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBundle, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarBundle, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarBundleQueryProperty2<R>
    on QueryBuilder<IsarBundle, R, QAfterProperty> {
  QueryBuilder<IsarBundle, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBundle, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarBundle, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarBundleQueryProperty3<R1, R2>
    on QueryBuilder<IsarBundle, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarBundle, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBundle, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarBundle, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCapabilityStatementCollection on Isar {
  IsarCollection<int, IsarCapabilityStatement> get isarCapabilityStatements =>
      this.collection();
}

const IsarCapabilityStatementSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCapabilityStatement',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarCapabilityStatement>(
    serialize: serializeIsarCapabilityStatement,
    deserialize: deserializeIsarCapabilityStatement,
    deserializeProperty: deserializeIsarCapabilityStatementProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCapabilityStatement(
    IsarWriter writer, IsarCapabilityStatement object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarCapabilityStatement deserializeIsarCapabilityStatement(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarCapabilityStatement(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarCapabilityStatementProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarCapabilityStatementUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarCapabilityStatementUpdateImpl
    implements _IsarCapabilityStatementUpdate {
  const _IsarCapabilityStatementUpdateImpl(this.collection);

  final IsarCollection<int, IsarCapabilityStatement> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarCapabilityStatementUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarCapabilityStatementUpdateAllImpl
    implements _IsarCapabilityStatementUpdateAll {
  const _IsarCapabilityStatementUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarCapabilityStatement> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCapabilityStatementUpdate
    on IsarCollection<int, IsarCapabilityStatement> {
  _IsarCapabilityStatementUpdate get update =>
      _IsarCapabilityStatementUpdateImpl(this);

  _IsarCapabilityStatementUpdateAll get updateAll =>
      _IsarCapabilityStatementUpdateAllImpl(this);
}

sealed class _IsarCapabilityStatementQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarCapabilityStatementQueryUpdateImpl
    implements _IsarCapabilityStatementQueryUpdate {
  const _IsarCapabilityStatementQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarCapabilityStatement> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCapabilityStatementQueryUpdate
    on IsarQuery<IsarCapabilityStatement> {
  _IsarCapabilityStatementQueryUpdate get updateFirst =>
      _IsarCapabilityStatementQueryUpdateImpl(this, limit: 1);

  _IsarCapabilityStatementQueryUpdate get updateAll =>
      _IsarCapabilityStatementQueryUpdateImpl(this);
}

class _IsarCapabilityStatementQueryBuilderUpdateImpl
    implements _IsarCapabilityStatementQueryUpdate {
  const _IsarCapabilityStatementQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarCapabilityStatementQueryBuilderUpdate on QueryBuilder<
    IsarCapabilityStatement, IsarCapabilityStatement, QOperations> {
  _IsarCapabilityStatementQueryUpdate get updateFirst =>
      _IsarCapabilityStatementQueryBuilderUpdateImpl(this, limit: 1);

  _IsarCapabilityStatementQueryUpdate get updateAll =>
      _IsarCapabilityStatementQueryBuilderUpdateImpl(this);
}

extension IsarCapabilityStatementQueryFilter on QueryBuilder<
    IsarCapabilityStatement, IsarCapabilityStatement, QFilterCondition> {
  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarCapabilityStatementQueryObject on QueryBuilder<
    IsarCapabilityStatement, IsarCapabilityStatement, QFilterCondition> {}

extension IsarCapabilityStatementQuerySortBy
    on QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QSortBy> {
  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCapabilityStatementQuerySortThenBy on QueryBuilder<
    IsarCapabilityStatement, IsarCapabilityStatement, QSortThenBy> {
  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCapabilityStatementQueryWhereDistinct on QueryBuilder<
    IsarCapabilityStatement, IsarCapabilityStatement, QDistinct> {
  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarCapabilityStatementQueryProperty1 on QueryBuilder<
    IsarCapabilityStatement, IsarCapabilityStatement, QProperty> {
  QueryBuilder<IsarCapabilityStatement, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCapabilityStatement, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCapabilityStatement, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCapabilityStatementQueryProperty2<R>
    on QueryBuilder<IsarCapabilityStatement, R, QAfterProperty> {
  QueryBuilder<IsarCapabilityStatement, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCapabilityStatement, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCapabilityStatement, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCapabilityStatementQueryProperty3<R1, R2>
    on QueryBuilder<IsarCapabilityStatement, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCapabilityStatement, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCapabilityStatement, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCapabilityStatement, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCarePlanCollection on Isar {
  IsarCollection<int, IsarCarePlan> get isarCarePlans => this.collection();
}

const IsarCarePlanSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCarePlan',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarCarePlan>(
    serialize: serializeIsarCarePlan,
    deserialize: deserializeIsarCarePlan,
    deserializeProperty: deserializeIsarCarePlanProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCarePlan(IsarWriter writer, IsarCarePlan object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarCarePlan deserializeIsarCarePlan(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarCarePlan(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarCarePlanProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarCarePlanUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarCarePlanUpdateImpl implements _IsarCarePlanUpdate {
  const _IsarCarePlanUpdateImpl(this.collection);

  final IsarCollection<int, IsarCarePlan> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarCarePlanUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarCarePlanUpdateAllImpl implements _IsarCarePlanUpdateAll {
  const _IsarCarePlanUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarCarePlan> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCarePlanUpdate on IsarCollection<int, IsarCarePlan> {
  _IsarCarePlanUpdate get update => _IsarCarePlanUpdateImpl(this);

  _IsarCarePlanUpdateAll get updateAll => _IsarCarePlanUpdateAllImpl(this);
}

sealed class _IsarCarePlanQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarCarePlanQueryUpdateImpl implements _IsarCarePlanQueryUpdate {
  const _IsarCarePlanQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarCarePlan> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCarePlanQueryUpdate on IsarQuery<IsarCarePlan> {
  _IsarCarePlanQueryUpdate get updateFirst =>
      _IsarCarePlanQueryUpdateImpl(this, limit: 1);

  _IsarCarePlanQueryUpdate get updateAll => _IsarCarePlanQueryUpdateImpl(this);
}

class _IsarCarePlanQueryBuilderUpdateImpl implements _IsarCarePlanQueryUpdate {
  const _IsarCarePlanQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarCarePlan, IsarCarePlan, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarCarePlanQueryBuilderUpdate
    on QueryBuilder<IsarCarePlan, IsarCarePlan, QOperations> {
  _IsarCarePlanQueryUpdate get updateFirst =>
      _IsarCarePlanQueryBuilderUpdateImpl(this, limit: 1);

  _IsarCarePlanQueryUpdate get updateAll =>
      _IsarCarePlanQueryBuilderUpdateImpl(this);
}

extension IsarCarePlanQueryFilter
    on QueryBuilder<IsarCarePlan, IsarCarePlan, QFilterCondition> {
  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarCarePlanQueryObject
    on QueryBuilder<IsarCarePlan, IsarCarePlan, QFilterCondition> {}

extension IsarCarePlanQuerySortBy
    on QueryBuilder<IsarCarePlan, IsarCarePlan, QSortBy> {
  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCarePlanQuerySortThenBy
    on QueryBuilder<IsarCarePlan, IsarCarePlan, QSortThenBy> {
  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCarePlanQueryWhereDistinct
    on QueryBuilder<IsarCarePlan, IsarCarePlan, QDistinct> {
  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarCarePlanQueryProperty1
    on QueryBuilder<IsarCarePlan, IsarCarePlan, QProperty> {
  QueryBuilder<IsarCarePlan, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCarePlan, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCarePlan, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCarePlanQueryProperty2<R>
    on QueryBuilder<IsarCarePlan, R, QAfterProperty> {
  QueryBuilder<IsarCarePlan, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCarePlan, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCarePlan, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCarePlanQueryProperty3<R1, R2>
    on QueryBuilder<IsarCarePlan, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCarePlan, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCarePlan, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCarePlan, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCareTeamCollection on Isar {
  IsarCollection<int, IsarCareTeam> get isarCareTeams => this.collection();
}

const IsarCareTeamSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCareTeam',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarCareTeam>(
    serialize: serializeIsarCareTeam,
    deserialize: deserializeIsarCareTeam,
    deserializeProperty: deserializeIsarCareTeamProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCareTeam(IsarWriter writer, IsarCareTeam object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarCareTeam deserializeIsarCareTeam(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarCareTeam(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarCareTeamProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarCareTeamUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarCareTeamUpdateImpl implements _IsarCareTeamUpdate {
  const _IsarCareTeamUpdateImpl(this.collection);

  final IsarCollection<int, IsarCareTeam> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarCareTeamUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarCareTeamUpdateAllImpl implements _IsarCareTeamUpdateAll {
  const _IsarCareTeamUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarCareTeam> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCareTeamUpdate on IsarCollection<int, IsarCareTeam> {
  _IsarCareTeamUpdate get update => _IsarCareTeamUpdateImpl(this);

  _IsarCareTeamUpdateAll get updateAll => _IsarCareTeamUpdateAllImpl(this);
}

sealed class _IsarCareTeamQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarCareTeamQueryUpdateImpl implements _IsarCareTeamQueryUpdate {
  const _IsarCareTeamQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarCareTeam> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCareTeamQueryUpdate on IsarQuery<IsarCareTeam> {
  _IsarCareTeamQueryUpdate get updateFirst =>
      _IsarCareTeamQueryUpdateImpl(this, limit: 1);

  _IsarCareTeamQueryUpdate get updateAll => _IsarCareTeamQueryUpdateImpl(this);
}

class _IsarCareTeamQueryBuilderUpdateImpl implements _IsarCareTeamQueryUpdate {
  const _IsarCareTeamQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarCareTeam, IsarCareTeam, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarCareTeamQueryBuilderUpdate
    on QueryBuilder<IsarCareTeam, IsarCareTeam, QOperations> {
  _IsarCareTeamQueryUpdate get updateFirst =>
      _IsarCareTeamQueryBuilderUpdateImpl(this, limit: 1);

  _IsarCareTeamQueryUpdate get updateAll =>
      _IsarCareTeamQueryBuilderUpdateImpl(this);
}

extension IsarCareTeamQueryFilter
    on QueryBuilder<IsarCareTeam, IsarCareTeam, QFilterCondition> {
  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarCareTeamQueryObject
    on QueryBuilder<IsarCareTeam, IsarCareTeam, QFilterCondition> {}

extension IsarCareTeamQuerySortBy
    on QueryBuilder<IsarCareTeam, IsarCareTeam, QSortBy> {
  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCareTeamQuerySortThenBy
    on QueryBuilder<IsarCareTeam, IsarCareTeam, QSortThenBy> {
  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCareTeamQueryWhereDistinct
    on QueryBuilder<IsarCareTeam, IsarCareTeam, QDistinct> {
  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarCareTeamQueryProperty1
    on QueryBuilder<IsarCareTeam, IsarCareTeam, QProperty> {
  QueryBuilder<IsarCareTeam, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCareTeam, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCareTeam, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCareTeamQueryProperty2<R>
    on QueryBuilder<IsarCareTeam, R, QAfterProperty> {
  QueryBuilder<IsarCareTeam, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCareTeam, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCareTeam, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCareTeamQueryProperty3<R1, R2>
    on QueryBuilder<IsarCareTeam, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCareTeam, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCareTeam, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCareTeam, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCatalogEntryCollection on Isar {
  IsarCollection<int, IsarCatalogEntry> get isarCatalogEntrys =>
      this.collection();
}

const IsarCatalogEntrySchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCatalogEntry',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarCatalogEntry>(
    serialize: serializeIsarCatalogEntry,
    deserialize: deserializeIsarCatalogEntry,
    deserializeProperty: deserializeIsarCatalogEntryProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCatalogEntry(IsarWriter writer, IsarCatalogEntry object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarCatalogEntry deserializeIsarCatalogEntry(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarCatalogEntry(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarCatalogEntryProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarCatalogEntryUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarCatalogEntryUpdateImpl implements _IsarCatalogEntryUpdate {
  const _IsarCatalogEntryUpdateImpl(this.collection);

  final IsarCollection<int, IsarCatalogEntry> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarCatalogEntryUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarCatalogEntryUpdateAllImpl implements _IsarCatalogEntryUpdateAll {
  const _IsarCatalogEntryUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarCatalogEntry> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCatalogEntryUpdate on IsarCollection<int, IsarCatalogEntry> {
  _IsarCatalogEntryUpdate get update => _IsarCatalogEntryUpdateImpl(this);

  _IsarCatalogEntryUpdateAll get updateAll =>
      _IsarCatalogEntryUpdateAllImpl(this);
}

sealed class _IsarCatalogEntryQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarCatalogEntryQueryUpdateImpl implements _IsarCatalogEntryQueryUpdate {
  const _IsarCatalogEntryQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarCatalogEntry> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCatalogEntryQueryUpdate on IsarQuery<IsarCatalogEntry> {
  _IsarCatalogEntryQueryUpdate get updateFirst =>
      _IsarCatalogEntryQueryUpdateImpl(this, limit: 1);

  _IsarCatalogEntryQueryUpdate get updateAll =>
      _IsarCatalogEntryQueryUpdateImpl(this);
}

class _IsarCatalogEntryQueryBuilderUpdateImpl
    implements _IsarCatalogEntryQueryUpdate {
  const _IsarCatalogEntryQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarCatalogEntryQueryBuilderUpdate
    on QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QOperations> {
  _IsarCatalogEntryQueryUpdate get updateFirst =>
      _IsarCatalogEntryQueryBuilderUpdateImpl(this, limit: 1);

  _IsarCatalogEntryQueryUpdate get updateAll =>
      _IsarCatalogEntryQueryBuilderUpdateImpl(this);
}

extension IsarCatalogEntryQueryFilter
    on QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QFilterCondition> {
  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarCatalogEntryQueryObject
    on QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QFilterCondition> {}

extension IsarCatalogEntryQuerySortBy
    on QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QSortBy> {
  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCatalogEntryQuerySortThenBy
    on QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QSortThenBy> {
  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCatalogEntryQueryWhereDistinct
    on QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QDistinct> {
  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarCatalogEntryQueryProperty1
    on QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QProperty> {
  QueryBuilder<IsarCatalogEntry, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCatalogEntry, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCatalogEntry, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCatalogEntryQueryProperty2<R>
    on QueryBuilder<IsarCatalogEntry, R, QAfterProperty> {
  QueryBuilder<IsarCatalogEntry, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCatalogEntry, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCatalogEntry, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCatalogEntryQueryProperty3<R1, R2>
    on QueryBuilder<IsarCatalogEntry, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCatalogEntry, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCatalogEntry, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCatalogEntry, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarChargeItemCollection on Isar {
  IsarCollection<int, IsarChargeItem> get isarChargeItems => this.collection();
}

const IsarChargeItemSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarChargeItem',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarChargeItem>(
    serialize: serializeIsarChargeItem,
    deserialize: deserializeIsarChargeItem,
    deserializeProperty: deserializeIsarChargeItemProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarChargeItem(IsarWriter writer, IsarChargeItem object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarChargeItem deserializeIsarChargeItem(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarChargeItem(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarChargeItemProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarChargeItemUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarChargeItemUpdateImpl implements _IsarChargeItemUpdate {
  const _IsarChargeItemUpdateImpl(this.collection);

  final IsarCollection<int, IsarChargeItem> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarChargeItemUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarChargeItemUpdateAllImpl implements _IsarChargeItemUpdateAll {
  const _IsarChargeItemUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarChargeItem> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarChargeItemUpdate on IsarCollection<int, IsarChargeItem> {
  _IsarChargeItemUpdate get update => _IsarChargeItemUpdateImpl(this);

  _IsarChargeItemUpdateAll get updateAll => _IsarChargeItemUpdateAllImpl(this);
}

sealed class _IsarChargeItemQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarChargeItemQueryUpdateImpl implements _IsarChargeItemQueryUpdate {
  const _IsarChargeItemQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarChargeItem> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarChargeItemQueryUpdate on IsarQuery<IsarChargeItem> {
  _IsarChargeItemQueryUpdate get updateFirst =>
      _IsarChargeItemQueryUpdateImpl(this, limit: 1);

  _IsarChargeItemQueryUpdate get updateAll =>
      _IsarChargeItemQueryUpdateImpl(this);
}

class _IsarChargeItemQueryBuilderUpdateImpl
    implements _IsarChargeItemQueryUpdate {
  const _IsarChargeItemQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarChargeItem, IsarChargeItem, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarChargeItemQueryBuilderUpdate
    on QueryBuilder<IsarChargeItem, IsarChargeItem, QOperations> {
  _IsarChargeItemQueryUpdate get updateFirst =>
      _IsarChargeItemQueryBuilderUpdateImpl(this, limit: 1);

  _IsarChargeItemQueryUpdate get updateAll =>
      _IsarChargeItemQueryBuilderUpdateImpl(this);
}

extension IsarChargeItemQueryFilter
    on QueryBuilder<IsarChargeItem, IsarChargeItem, QFilterCondition> {
  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarChargeItemQueryObject
    on QueryBuilder<IsarChargeItem, IsarChargeItem, QFilterCondition> {}

extension IsarChargeItemQuerySortBy
    on QueryBuilder<IsarChargeItem, IsarChargeItem, QSortBy> {
  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarChargeItemQuerySortThenBy
    on QueryBuilder<IsarChargeItem, IsarChargeItem, QSortThenBy> {
  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarChargeItemQueryWhereDistinct
    on QueryBuilder<IsarChargeItem, IsarChargeItem, QDistinct> {
  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarChargeItemQueryProperty1
    on QueryBuilder<IsarChargeItem, IsarChargeItem, QProperty> {
  QueryBuilder<IsarChargeItem, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarChargeItem, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarChargeItem, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarChargeItemQueryProperty2<R>
    on QueryBuilder<IsarChargeItem, R, QAfterProperty> {
  QueryBuilder<IsarChargeItem, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarChargeItem, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarChargeItem, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarChargeItemQueryProperty3<R1, R2>
    on QueryBuilder<IsarChargeItem, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarChargeItem, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarChargeItem, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarChargeItem, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarChargeItemDefinitionCollection on Isar {
  IsarCollection<int, IsarChargeItemDefinition> get isarChargeItemDefinitions =>
      this.collection();
}

const IsarChargeItemDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarChargeItemDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarChargeItemDefinition>(
    serialize: serializeIsarChargeItemDefinition,
    deserialize: deserializeIsarChargeItemDefinition,
    deserializeProperty: deserializeIsarChargeItemDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarChargeItemDefinition(
    IsarWriter writer, IsarChargeItemDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarChargeItemDefinition deserializeIsarChargeItemDefinition(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarChargeItemDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarChargeItemDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarChargeItemDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarChargeItemDefinitionUpdateImpl
    implements _IsarChargeItemDefinitionUpdate {
  const _IsarChargeItemDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarChargeItemDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarChargeItemDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarChargeItemDefinitionUpdateAllImpl
    implements _IsarChargeItemDefinitionUpdateAll {
  const _IsarChargeItemDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarChargeItemDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarChargeItemDefinitionUpdate
    on IsarCollection<int, IsarChargeItemDefinition> {
  _IsarChargeItemDefinitionUpdate get update =>
      _IsarChargeItemDefinitionUpdateImpl(this);

  _IsarChargeItemDefinitionUpdateAll get updateAll =>
      _IsarChargeItemDefinitionUpdateAllImpl(this);
}

sealed class _IsarChargeItemDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarChargeItemDefinitionQueryUpdateImpl
    implements _IsarChargeItemDefinitionQueryUpdate {
  const _IsarChargeItemDefinitionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarChargeItemDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarChargeItemDefinitionQueryUpdate
    on IsarQuery<IsarChargeItemDefinition> {
  _IsarChargeItemDefinitionQueryUpdate get updateFirst =>
      _IsarChargeItemDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarChargeItemDefinitionQueryUpdate get updateAll =>
      _IsarChargeItemDefinitionQueryUpdateImpl(this);
}

class _IsarChargeItemDefinitionQueryBuilderUpdateImpl
    implements _IsarChargeItemDefinitionQueryUpdate {
  const _IsarChargeItemDefinitionQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarChargeItemDefinitionQueryBuilderUpdate on QueryBuilder<
    IsarChargeItemDefinition, IsarChargeItemDefinition, QOperations> {
  _IsarChargeItemDefinitionQueryUpdate get updateFirst =>
      _IsarChargeItemDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarChargeItemDefinitionQueryUpdate get updateAll =>
      _IsarChargeItemDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarChargeItemDefinitionQueryFilter on QueryBuilder<
    IsarChargeItemDefinition, IsarChargeItemDefinition, QFilterCondition> {
  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarChargeItemDefinitionQueryObject on QueryBuilder<
    IsarChargeItemDefinition, IsarChargeItemDefinition, QFilterCondition> {}

extension IsarChargeItemDefinitionQuerySortBy on QueryBuilder<
    IsarChargeItemDefinition, IsarChargeItemDefinition, QSortBy> {
  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarChargeItemDefinitionQuerySortThenBy on QueryBuilder<
    IsarChargeItemDefinition, IsarChargeItemDefinition, QSortThenBy> {
  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarChargeItemDefinitionQueryWhereDistinct on QueryBuilder<
    IsarChargeItemDefinition, IsarChargeItemDefinition, QDistinct> {
  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarChargeItemDefinitionQueryProperty1 on QueryBuilder<
    IsarChargeItemDefinition, IsarChargeItemDefinition, QProperty> {
  QueryBuilder<IsarChargeItemDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarChargeItemDefinitionQueryProperty2<R>
    on QueryBuilder<IsarChargeItemDefinition, R, QAfterProperty> {
  QueryBuilder<IsarChargeItemDefinition, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarChargeItemDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarChargeItemDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarChargeItemDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCitationCollection on Isar {
  IsarCollection<int, IsarCitation> get isarCitations => this.collection();
}

const IsarCitationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCitation',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarCitation>(
    serialize: serializeIsarCitation,
    deserialize: deserializeIsarCitation,
    deserializeProperty: deserializeIsarCitationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCitation(IsarWriter writer, IsarCitation object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarCitation deserializeIsarCitation(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarCitation(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarCitationProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarCitationUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarCitationUpdateImpl implements _IsarCitationUpdate {
  const _IsarCitationUpdateImpl(this.collection);

  final IsarCollection<int, IsarCitation> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarCitationUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarCitationUpdateAllImpl implements _IsarCitationUpdateAll {
  const _IsarCitationUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarCitation> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCitationUpdate on IsarCollection<int, IsarCitation> {
  _IsarCitationUpdate get update => _IsarCitationUpdateImpl(this);

  _IsarCitationUpdateAll get updateAll => _IsarCitationUpdateAllImpl(this);
}

sealed class _IsarCitationQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarCitationQueryUpdateImpl implements _IsarCitationQueryUpdate {
  const _IsarCitationQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarCitation> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCitationQueryUpdate on IsarQuery<IsarCitation> {
  _IsarCitationQueryUpdate get updateFirst =>
      _IsarCitationQueryUpdateImpl(this, limit: 1);

  _IsarCitationQueryUpdate get updateAll => _IsarCitationQueryUpdateImpl(this);
}

class _IsarCitationQueryBuilderUpdateImpl implements _IsarCitationQueryUpdate {
  const _IsarCitationQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarCitation, IsarCitation, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarCitationQueryBuilderUpdate
    on QueryBuilder<IsarCitation, IsarCitation, QOperations> {
  _IsarCitationQueryUpdate get updateFirst =>
      _IsarCitationQueryBuilderUpdateImpl(this, limit: 1);

  _IsarCitationQueryUpdate get updateAll =>
      _IsarCitationQueryBuilderUpdateImpl(this);
}

extension IsarCitationQueryFilter
    on QueryBuilder<IsarCitation, IsarCitation, QFilterCondition> {
  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarCitationQueryObject
    on QueryBuilder<IsarCitation, IsarCitation, QFilterCondition> {}

extension IsarCitationQuerySortBy
    on QueryBuilder<IsarCitation, IsarCitation, QSortBy> {
  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCitationQuerySortThenBy
    on QueryBuilder<IsarCitation, IsarCitation, QSortThenBy> {
  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCitationQueryWhereDistinct
    on QueryBuilder<IsarCitation, IsarCitation, QDistinct> {
  QueryBuilder<IsarCitation, IsarCitation, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarCitationQueryProperty1
    on QueryBuilder<IsarCitation, IsarCitation, QProperty> {
  QueryBuilder<IsarCitation, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCitation, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCitation, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCitationQueryProperty2<R>
    on QueryBuilder<IsarCitation, R, QAfterProperty> {
  QueryBuilder<IsarCitation, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCitation, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCitation, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCitationQueryProperty3<R1, R2>
    on QueryBuilder<IsarCitation, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCitation, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCitation, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCitation, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarClaimCollection on Isar {
  IsarCollection<int, IsarClaim> get isarClaims => this.collection();
}

const IsarClaimSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarClaim',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarClaim>(
    serialize: serializeIsarClaim,
    deserialize: deserializeIsarClaim,
    deserializeProperty: deserializeIsarClaimProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarClaim(IsarWriter writer, IsarClaim object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarClaim deserializeIsarClaim(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarClaim(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarClaimProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarClaimUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarClaimUpdateImpl implements _IsarClaimUpdate {
  const _IsarClaimUpdateImpl(this.collection);

  final IsarCollection<int, IsarClaim> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarClaimUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarClaimUpdateAllImpl implements _IsarClaimUpdateAll {
  const _IsarClaimUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarClaim> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarClaimUpdate on IsarCollection<int, IsarClaim> {
  _IsarClaimUpdate get update => _IsarClaimUpdateImpl(this);

  _IsarClaimUpdateAll get updateAll => _IsarClaimUpdateAllImpl(this);
}

sealed class _IsarClaimQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarClaimQueryUpdateImpl implements _IsarClaimQueryUpdate {
  const _IsarClaimQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarClaim> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarClaimQueryUpdate on IsarQuery<IsarClaim> {
  _IsarClaimQueryUpdate get updateFirst =>
      _IsarClaimQueryUpdateImpl(this, limit: 1);

  _IsarClaimQueryUpdate get updateAll => _IsarClaimQueryUpdateImpl(this);
}

class _IsarClaimQueryBuilderUpdateImpl implements _IsarClaimQueryUpdate {
  const _IsarClaimQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarClaim, IsarClaim, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarClaimQueryBuilderUpdate
    on QueryBuilder<IsarClaim, IsarClaim, QOperations> {
  _IsarClaimQueryUpdate get updateFirst =>
      _IsarClaimQueryBuilderUpdateImpl(this, limit: 1);

  _IsarClaimQueryUpdate get updateAll => _IsarClaimQueryBuilderUpdateImpl(this);
}

extension IsarClaimQueryFilter
    on QueryBuilder<IsarClaim, IsarClaim, QFilterCondition> {
  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarClaimQueryObject
    on QueryBuilder<IsarClaim, IsarClaim, QFilterCondition> {}

extension IsarClaimQuerySortBy on QueryBuilder<IsarClaim, IsarClaim, QSortBy> {
  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarClaimQuerySortThenBy
    on QueryBuilder<IsarClaim, IsarClaim, QSortThenBy> {
  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarClaimQueryWhereDistinct
    on QueryBuilder<IsarClaim, IsarClaim, QDistinct> {
  QueryBuilder<IsarClaim, IsarClaim, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarClaimQueryProperty1
    on QueryBuilder<IsarClaim, IsarClaim, QProperty> {
  QueryBuilder<IsarClaim, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClaim, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarClaim, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarClaimQueryProperty2<R>
    on QueryBuilder<IsarClaim, R, QAfterProperty> {
  QueryBuilder<IsarClaim, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClaim, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarClaim, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarClaimQueryProperty3<R1, R2>
    on QueryBuilder<IsarClaim, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarClaim, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClaim, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarClaim, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarClaimResponseCollection on Isar {
  IsarCollection<int, IsarClaimResponse> get isarClaimResponses =>
      this.collection();
}

const IsarClaimResponseSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarClaimResponse',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarClaimResponse>(
    serialize: serializeIsarClaimResponse,
    deserialize: deserializeIsarClaimResponse,
    deserializeProperty: deserializeIsarClaimResponseProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarClaimResponse(IsarWriter writer, IsarClaimResponse object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarClaimResponse deserializeIsarClaimResponse(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarClaimResponse(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarClaimResponseProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarClaimResponseUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarClaimResponseUpdateImpl implements _IsarClaimResponseUpdate {
  const _IsarClaimResponseUpdateImpl(this.collection);

  final IsarCollection<int, IsarClaimResponse> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarClaimResponseUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarClaimResponseUpdateAllImpl implements _IsarClaimResponseUpdateAll {
  const _IsarClaimResponseUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarClaimResponse> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarClaimResponseUpdate on IsarCollection<int, IsarClaimResponse> {
  _IsarClaimResponseUpdate get update => _IsarClaimResponseUpdateImpl(this);

  _IsarClaimResponseUpdateAll get updateAll =>
      _IsarClaimResponseUpdateAllImpl(this);
}

sealed class _IsarClaimResponseQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarClaimResponseQueryUpdateImpl
    implements _IsarClaimResponseQueryUpdate {
  const _IsarClaimResponseQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarClaimResponse> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarClaimResponseQueryUpdate on IsarQuery<IsarClaimResponse> {
  _IsarClaimResponseQueryUpdate get updateFirst =>
      _IsarClaimResponseQueryUpdateImpl(this, limit: 1);

  _IsarClaimResponseQueryUpdate get updateAll =>
      _IsarClaimResponseQueryUpdateImpl(this);
}

class _IsarClaimResponseQueryBuilderUpdateImpl
    implements _IsarClaimResponseQueryUpdate {
  const _IsarClaimResponseQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarClaimResponse, IsarClaimResponse, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarClaimResponseQueryBuilderUpdate
    on QueryBuilder<IsarClaimResponse, IsarClaimResponse, QOperations> {
  _IsarClaimResponseQueryUpdate get updateFirst =>
      _IsarClaimResponseQueryBuilderUpdateImpl(this, limit: 1);

  _IsarClaimResponseQueryUpdate get updateAll =>
      _IsarClaimResponseQueryBuilderUpdateImpl(this);
}

extension IsarClaimResponseQueryFilter
    on QueryBuilder<IsarClaimResponse, IsarClaimResponse, QFilterCondition> {
  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarClaimResponseQueryObject
    on QueryBuilder<IsarClaimResponse, IsarClaimResponse, QFilterCondition> {}

extension IsarClaimResponseQuerySortBy
    on QueryBuilder<IsarClaimResponse, IsarClaimResponse, QSortBy> {
  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarClaimResponseQuerySortThenBy
    on QueryBuilder<IsarClaimResponse, IsarClaimResponse, QSortThenBy> {
  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarClaimResponseQueryWhereDistinct
    on QueryBuilder<IsarClaimResponse, IsarClaimResponse, QDistinct> {
  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarClaimResponseQueryProperty1
    on QueryBuilder<IsarClaimResponse, IsarClaimResponse, QProperty> {
  QueryBuilder<IsarClaimResponse, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClaimResponse, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarClaimResponse, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarClaimResponseQueryProperty2<R>
    on QueryBuilder<IsarClaimResponse, R, QAfterProperty> {
  QueryBuilder<IsarClaimResponse, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClaimResponse, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarClaimResponse, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarClaimResponseQueryProperty3<R1, R2>
    on QueryBuilder<IsarClaimResponse, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarClaimResponse, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClaimResponse, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarClaimResponse, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarClinicalImpressionCollection on Isar {
  IsarCollection<int, IsarClinicalImpression> get isarClinicalImpressions =>
      this.collection();
}

const IsarClinicalImpressionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarClinicalImpression',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarClinicalImpression>(
    serialize: serializeIsarClinicalImpression,
    deserialize: deserializeIsarClinicalImpression,
    deserializeProperty: deserializeIsarClinicalImpressionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarClinicalImpression(
    IsarWriter writer, IsarClinicalImpression object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarClinicalImpression deserializeIsarClinicalImpression(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarClinicalImpression(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarClinicalImpressionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarClinicalImpressionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarClinicalImpressionUpdateImpl
    implements _IsarClinicalImpressionUpdate {
  const _IsarClinicalImpressionUpdateImpl(this.collection);

  final IsarCollection<int, IsarClinicalImpression> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarClinicalImpressionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarClinicalImpressionUpdateAllImpl
    implements _IsarClinicalImpressionUpdateAll {
  const _IsarClinicalImpressionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarClinicalImpression> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarClinicalImpressionUpdate
    on IsarCollection<int, IsarClinicalImpression> {
  _IsarClinicalImpressionUpdate get update =>
      _IsarClinicalImpressionUpdateImpl(this);

  _IsarClinicalImpressionUpdateAll get updateAll =>
      _IsarClinicalImpressionUpdateAllImpl(this);
}

sealed class _IsarClinicalImpressionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarClinicalImpressionQueryUpdateImpl
    implements _IsarClinicalImpressionQueryUpdate {
  const _IsarClinicalImpressionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarClinicalImpression> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarClinicalImpressionQueryUpdate
    on IsarQuery<IsarClinicalImpression> {
  _IsarClinicalImpressionQueryUpdate get updateFirst =>
      _IsarClinicalImpressionQueryUpdateImpl(this, limit: 1);

  _IsarClinicalImpressionQueryUpdate get updateAll =>
      _IsarClinicalImpressionQueryUpdateImpl(this);
}

class _IsarClinicalImpressionQueryBuilderUpdateImpl
    implements _IsarClinicalImpressionQueryUpdate {
  const _IsarClinicalImpressionQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarClinicalImpressionQueryBuilderUpdate on QueryBuilder<
    IsarClinicalImpression, IsarClinicalImpression, QOperations> {
  _IsarClinicalImpressionQueryUpdate get updateFirst =>
      _IsarClinicalImpressionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarClinicalImpressionQueryUpdate get updateAll =>
      _IsarClinicalImpressionQueryBuilderUpdateImpl(this);
}

extension IsarClinicalImpressionQueryFilter on QueryBuilder<
    IsarClinicalImpression, IsarClinicalImpression, QFilterCondition> {
  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarClinicalImpressionQueryObject on QueryBuilder<
    IsarClinicalImpression, IsarClinicalImpression, QFilterCondition> {}

extension IsarClinicalImpressionQuerySortBy
    on QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QSortBy> {
  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarClinicalImpressionQuerySortThenBy on QueryBuilder<
    IsarClinicalImpression, IsarClinicalImpression, QSortThenBy> {
  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarClinicalImpressionQueryWhereDistinct
    on QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QDistinct> {
  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarClinicalImpressionQueryProperty1
    on QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QProperty> {
  QueryBuilder<IsarClinicalImpression, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClinicalImpression, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarClinicalImpression, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarClinicalImpressionQueryProperty2<R>
    on QueryBuilder<IsarClinicalImpression, R, QAfterProperty> {
  QueryBuilder<IsarClinicalImpression, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClinicalImpression, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarClinicalImpression, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarClinicalImpressionQueryProperty3<R1, R2>
    on QueryBuilder<IsarClinicalImpression, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarClinicalImpression, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClinicalImpression, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarClinicalImpression, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarClinicalUseDefinitionCollection on Isar {
  IsarCollection<int, IsarClinicalUseDefinition>
      get isarClinicalUseDefinitions => this.collection();
}

const IsarClinicalUseDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarClinicalUseDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarClinicalUseDefinition>(
    serialize: serializeIsarClinicalUseDefinition,
    deserialize: deserializeIsarClinicalUseDefinition,
    deserializeProperty: deserializeIsarClinicalUseDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarClinicalUseDefinition(
    IsarWriter writer, IsarClinicalUseDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarClinicalUseDefinition deserializeIsarClinicalUseDefinition(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarClinicalUseDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarClinicalUseDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarClinicalUseDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarClinicalUseDefinitionUpdateImpl
    implements _IsarClinicalUseDefinitionUpdate {
  const _IsarClinicalUseDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarClinicalUseDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarClinicalUseDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarClinicalUseDefinitionUpdateAllImpl
    implements _IsarClinicalUseDefinitionUpdateAll {
  const _IsarClinicalUseDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarClinicalUseDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarClinicalUseDefinitionUpdate
    on IsarCollection<int, IsarClinicalUseDefinition> {
  _IsarClinicalUseDefinitionUpdate get update =>
      _IsarClinicalUseDefinitionUpdateImpl(this);

  _IsarClinicalUseDefinitionUpdateAll get updateAll =>
      _IsarClinicalUseDefinitionUpdateAllImpl(this);
}

sealed class _IsarClinicalUseDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarClinicalUseDefinitionQueryUpdateImpl
    implements _IsarClinicalUseDefinitionQueryUpdate {
  const _IsarClinicalUseDefinitionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarClinicalUseDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarClinicalUseDefinitionQueryUpdate
    on IsarQuery<IsarClinicalUseDefinition> {
  _IsarClinicalUseDefinitionQueryUpdate get updateFirst =>
      _IsarClinicalUseDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarClinicalUseDefinitionQueryUpdate get updateAll =>
      _IsarClinicalUseDefinitionQueryUpdateImpl(this);
}

class _IsarClinicalUseDefinitionQueryBuilderUpdateImpl
    implements _IsarClinicalUseDefinitionQueryUpdate {
  const _IsarClinicalUseDefinitionQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarClinicalUseDefinitionQueryBuilderUpdate on QueryBuilder<
    IsarClinicalUseDefinition, IsarClinicalUseDefinition, QOperations> {
  _IsarClinicalUseDefinitionQueryUpdate get updateFirst =>
      _IsarClinicalUseDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarClinicalUseDefinitionQueryUpdate get updateAll =>
      _IsarClinicalUseDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarClinicalUseDefinitionQueryFilter on QueryBuilder<
    IsarClinicalUseDefinition, IsarClinicalUseDefinition, QFilterCondition> {
  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarClinicalUseDefinitionQueryObject on QueryBuilder<
    IsarClinicalUseDefinition, IsarClinicalUseDefinition, QFilterCondition> {}

extension IsarClinicalUseDefinitionQuerySortBy on QueryBuilder<
    IsarClinicalUseDefinition, IsarClinicalUseDefinition, QSortBy> {
  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarClinicalUseDefinitionQuerySortThenBy on QueryBuilder<
    IsarClinicalUseDefinition, IsarClinicalUseDefinition, QSortThenBy> {
  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarClinicalUseDefinitionQueryWhereDistinct on QueryBuilder<
    IsarClinicalUseDefinition, IsarClinicalUseDefinition, QDistinct> {
  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarClinicalUseDefinitionQueryProperty1 on QueryBuilder<
    IsarClinicalUseDefinition, IsarClinicalUseDefinition, QProperty> {
  QueryBuilder<IsarClinicalUseDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarClinicalUseDefinitionQueryProperty2<R>
    on QueryBuilder<IsarClinicalUseDefinition, R, QAfterProperty> {
  QueryBuilder<IsarClinicalUseDefinition, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarClinicalUseDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarClinicalUseDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarClinicalUseDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCodeSystemCollection on Isar {
  IsarCollection<int, IsarCodeSystem> get isarCodeSystems => this.collection();
}

const IsarCodeSystemSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCodeSystem',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarCodeSystem>(
    serialize: serializeIsarCodeSystem,
    deserialize: deserializeIsarCodeSystem,
    deserializeProperty: deserializeIsarCodeSystemProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCodeSystem(IsarWriter writer, IsarCodeSystem object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarCodeSystem deserializeIsarCodeSystem(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarCodeSystem(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarCodeSystemProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarCodeSystemUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarCodeSystemUpdateImpl implements _IsarCodeSystemUpdate {
  const _IsarCodeSystemUpdateImpl(this.collection);

  final IsarCollection<int, IsarCodeSystem> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarCodeSystemUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarCodeSystemUpdateAllImpl implements _IsarCodeSystemUpdateAll {
  const _IsarCodeSystemUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarCodeSystem> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCodeSystemUpdate on IsarCollection<int, IsarCodeSystem> {
  _IsarCodeSystemUpdate get update => _IsarCodeSystemUpdateImpl(this);

  _IsarCodeSystemUpdateAll get updateAll => _IsarCodeSystemUpdateAllImpl(this);
}

sealed class _IsarCodeSystemQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarCodeSystemQueryUpdateImpl implements _IsarCodeSystemQueryUpdate {
  const _IsarCodeSystemQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarCodeSystem> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCodeSystemQueryUpdate on IsarQuery<IsarCodeSystem> {
  _IsarCodeSystemQueryUpdate get updateFirst =>
      _IsarCodeSystemQueryUpdateImpl(this, limit: 1);

  _IsarCodeSystemQueryUpdate get updateAll =>
      _IsarCodeSystemQueryUpdateImpl(this);
}

class _IsarCodeSystemQueryBuilderUpdateImpl
    implements _IsarCodeSystemQueryUpdate {
  const _IsarCodeSystemQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarCodeSystem, IsarCodeSystem, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarCodeSystemQueryBuilderUpdate
    on QueryBuilder<IsarCodeSystem, IsarCodeSystem, QOperations> {
  _IsarCodeSystemQueryUpdate get updateFirst =>
      _IsarCodeSystemQueryBuilderUpdateImpl(this, limit: 1);

  _IsarCodeSystemQueryUpdate get updateAll =>
      _IsarCodeSystemQueryBuilderUpdateImpl(this);
}

extension IsarCodeSystemQueryFilter
    on QueryBuilder<IsarCodeSystem, IsarCodeSystem, QFilterCondition> {
  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarCodeSystemQueryObject
    on QueryBuilder<IsarCodeSystem, IsarCodeSystem, QFilterCondition> {}

extension IsarCodeSystemQuerySortBy
    on QueryBuilder<IsarCodeSystem, IsarCodeSystem, QSortBy> {
  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCodeSystemQuerySortThenBy
    on QueryBuilder<IsarCodeSystem, IsarCodeSystem, QSortThenBy> {
  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCodeSystemQueryWhereDistinct
    on QueryBuilder<IsarCodeSystem, IsarCodeSystem, QDistinct> {
  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarCodeSystemQueryProperty1
    on QueryBuilder<IsarCodeSystem, IsarCodeSystem, QProperty> {
  QueryBuilder<IsarCodeSystem, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCodeSystem, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCodeSystem, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCodeSystemQueryProperty2<R>
    on QueryBuilder<IsarCodeSystem, R, QAfterProperty> {
  QueryBuilder<IsarCodeSystem, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCodeSystem, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCodeSystem, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCodeSystemQueryProperty3<R1, R2>
    on QueryBuilder<IsarCodeSystem, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCodeSystem, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCodeSystem, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCodeSystem, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCommunicationCollection on Isar {
  IsarCollection<int, IsarCommunication> get isarCommunications =>
      this.collection();
}

const IsarCommunicationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCommunication',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarCommunication>(
    serialize: serializeIsarCommunication,
    deserialize: deserializeIsarCommunication,
    deserializeProperty: deserializeIsarCommunicationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCommunication(IsarWriter writer, IsarCommunication object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarCommunication deserializeIsarCommunication(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarCommunication(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarCommunicationProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarCommunicationUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarCommunicationUpdateImpl implements _IsarCommunicationUpdate {
  const _IsarCommunicationUpdateImpl(this.collection);

  final IsarCollection<int, IsarCommunication> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarCommunicationUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarCommunicationUpdateAllImpl implements _IsarCommunicationUpdateAll {
  const _IsarCommunicationUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarCommunication> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCommunicationUpdate on IsarCollection<int, IsarCommunication> {
  _IsarCommunicationUpdate get update => _IsarCommunicationUpdateImpl(this);

  _IsarCommunicationUpdateAll get updateAll =>
      _IsarCommunicationUpdateAllImpl(this);
}

sealed class _IsarCommunicationQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarCommunicationQueryUpdateImpl
    implements _IsarCommunicationQueryUpdate {
  const _IsarCommunicationQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarCommunication> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCommunicationQueryUpdate on IsarQuery<IsarCommunication> {
  _IsarCommunicationQueryUpdate get updateFirst =>
      _IsarCommunicationQueryUpdateImpl(this, limit: 1);

  _IsarCommunicationQueryUpdate get updateAll =>
      _IsarCommunicationQueryUpdateImpl(this);
}

class _IsarCommunicationQueryBuilderUpdateImpl
    implements _IsarCommunicationQueryUpdate {
  const _IsarCommunicationQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarCommunication, IsarCommunication, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarCommunicationQueryBuilderUpdate
    on QueryBuilder<IsarCommunication, IsarCommunication, QOperations> {
  _IsarCommunicationQueryUpdate get updateFirst =>
      _IsarCommunicationQueryBuilderUpdateImpl(this, limit: 1);

  _IsarCommunicationQueryUpdate get updateAll =>
      _IsarCommunicationQueryBuilderUpdateImpl(this);
}

extension IsarCommunicationQueryFilter
    on QueryBuilder<IsarCommunication, IsarCommunication, QFilterCondition> {
  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarCommunicationQueryObject
    on QueryBuilder<IsarCommunication, IsarCommunication, QFilterCondition> {}

extension IsarCommunicationQuerySortBy
    on QueryBuilder<IsarCommunication, IsarCommunication, QSortBy> {
  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCommunicationQuerySortThenBy
    on QueryBuilder<IsarCommunication, IsarCommunication, QSortThenBy> {
  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCommunicationQueryWhereDistinct
    on QueryBuilder<IsarCommunication, IsarCommunication, QDistinct> {
  QueryBuilder<IsarCommunication, IsarCommunication, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarCommunicationQueryProperty1
    on QueryBuilder<IsarCommunication, IsarCommunication, QProperty> {
  QueryBuilder<IsarCommunication, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCommunication, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCommunication, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCommunicationQueryProperty2<R>
    on QueryBuilder<IsarCommunication, R, QAfterProperty> {
  QueryBuilder<IsarCommunication, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCommunication, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCommunication, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCommunicationQueryProperty3<R1, R2>
    on QueryBuilder<IsarCommunication, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCommunication, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCommunication, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCommunication, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCommunicationRequestCollection on Isar {
  IsarCollection<int, IsarCommunicationRequest> get isarCommunicationRequests =>
      this.collection();
}

const IsarCommunicationRequestSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCommunicationRequest',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarCommunicationRequest>(
    serialize: serializeIsarCommunicationRequest,
    deserialize: deserializeIsarCommunicationRequest,
    deserializeProperty: deserializeIsarCommunicationRequestProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCommunicationRequest(
    IsarWriter writer, IsarCommunicationRequest object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarCommunicationRequest deserializeIsarCommunicationRequest(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarCommunicationRequest(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarCommunicationRequestProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarCommunicationRequestUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarCommunicationRequestUpdateImpl
    implements _IsarCommunicationRequestUpdate {
  const _IsarCommunicationRequestUpdateImpl(this.collection);

  final IsarCollection<int, IsarCommunicationRequest> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarCommunicationRequestUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarCommunicationRequestUpdateAllImpl
    implements _IsarCommunicationRequestUpdateAll {
  const _IsarCommunicationRequestUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarCommunicationRequest> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCommunicationRequestUpdate
    on IsarCollection<int, IsarCommunicationRequest> {
  _IsarCommunicationRequestUpdate get update =>
      _IsarCommunicationRequestUpdateImpl(this);

  _IsarCommunicationRequestUpdateAll get updateAll =>
      _IsarCommunicationRequestUpdateAllImpl(this);
}

sealed class _IsarCommunicationRequestQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarCommunicationRequestQueryUpdateImpl
    implements _IsarCommunicationRequestQueryUpdate {
  const _IsarCommunicationRequestQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarCommunicationRequest> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCommunicationRequestQueryUpdate
    on IsarQuery<IsarCommunicationRequest> {
  _IsarCommunicationRequestQueryUpdate get updateFirst =>
      _IsarCommunicationRequestQueryUpdateImpl(this, limit: 1);

  _IsarCommunicationRequestQueryUpdate get updateAll =>
      _IsarCommunicationRequestQueryUpdateImpl(this);
}

class _IsarCommunicationRequestQueryBuilderUpdateImpl
    implements _IsarCommunicationRequestQueryUpdate {
  const _IsarCommunicationRequestQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarCommunicationRequestQueryBuilderUpdate on QueryBuilder<
    IsarCommunicationRequest, IsarCommunicationRequest, QOperations> {
  _IsarCommunicationRequestQueryUpdate get updateFirst =>
      _IsarCommunicationRequestQueryBuilderUpdateImpl(this, limit: 1);

  _IsarCommunicationRequestQueryUpdate get updateAll =>
      _IsarCommunicationRequestQueryBuilderUpdateImpl(this);
}

extension IsarCommunicationRequestQueryFilter on QueryBuilder<
    IsarCommunicationRequest, IsarCommunicationRequest, QFilterCondition> {
  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarCommunicationRequestQueryObject on QueryBuilder<
    IsarCommunicationRequest, IsarCommunicationRequest, QFilterCondition> {}

extension IsarCommunicationRequestQuerySortBy on QueryBuilder<
    IsarCommunicationRequest, IsarCommunicationRequest, QSortBy> {
  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCommunicationRequestQuerySortThenBy on QueryBuilder<
    IsarCommunicationRequest, IsarCommunicationRequest, QSortThenBy> {
  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCommunicationRequestQueryWhereDistinct on QueryBuilder<
    IsarCommunicationRequest, IsarCommunicationRequest, QDistinct> {
  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarCommunicationRequestQueryProperty1 on QueryBuilder<
    IsarCommunicationRequest, IsarCommunicationRequest, QProperty> {
  QueryBuilder<IsarCommunicationRequest, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCommunicationRequest, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCommunicationRequest, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCommunicationRequestQueryProperty2<R>
    on QueryBuilder<IsarCommunicationRequest, R, QAfterProperty> {
  QueryBuilder<IsarCommunicationRequest, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCommunicationRequest, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCommunicationRequest, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCommunicationRequestQueryProperty3<R1, R2>
    on QueryBuilder<IsarCommunicationRequest, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCommunicationRequest, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCommunicationRequest, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCommunicationRequest, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCompartmentDefinitionCollection on Isar {
  IsarCollection<int, IsarCompartmentDefinition>
      get isarCompartmentDefinitions => this.collection();
}

const IsarCompartmentDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCompartmentDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarCompartmentDefinition>(
    serialize: serializeIsarCompartmentDefinition,
    deserialize: deserializeIsarCompartmentDefinition,
    deserializeProperty: deserializeIsarCompartmentDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCompartmentDefinition(
    IsarWriter writer, IsarCompartmentDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarCompartmentDefinition deserializeIsarCompartmentDefinition(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarCompartmentDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarCompartmentDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarCompartmentDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarCompartmentDefinitionUpdateImpl
    implements _IsarCompartmentDefinitionUpdate {
  const _IsarCompartmentDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarCompartmentDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarCompartmentDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarCompartmentDefinitionUpdateAllImpl
    implements _IsarCompartmentDefinitionUpdateAll {
  const _IsarCompartmentDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarCompartmentDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCompartmentDefinitionUpdate
    on IsarCollection<int, IsarCompartmentDefinition> {
  _IsarCompartmentDefinitionUpdate get update =>
      _IsarCompartmentDefinitionUpdateImpl(this);

  _IsarCompartmentDefinitionUpdateAll get updateAll =>
      _IsarCompartmentDefinitionUpdateAllImpl(this);
}

sealed class _IsarCompartmentDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarCompartmentDefinitionQueryUpdateImpl
    implements _IsarCompartmentDefinitionQueryUpdate {
  const _IsarCompartmentDefinitionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarCompartmentDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCompartmentDefinitionQueryUpdate
    on IsarQuery<IsarCompartmentDefinition> {
  _IsarCompartmentDefinitionQueryUpdate get updateFirst =>
      _IsarCompartmentDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarCompartmentDefinitionQueryUpdate get updateAll =>
      _IsarCompartmentDefinitionQueryUpdateImpl(this);
}

class _IsarCompartmentDefinitionQueryBuilderUpdateImpl
    implements _IsarCompartmentDefinitionQueryUpdate {
  const _IsarCompartmentDefinitionQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarCompartmentDefinitionQueryBuilderUpdate on QueryBuilder<
    IsarCompartmentDefinition, IsarCompartmentDefinition, QOperations> {
  _IsarCompartmentDefinitionQueryUpdate get updateFirst =>
      _IsarCompartmentDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarCompartmentDefinitionQueryUpdate get updateAll =>
      _IsarCompartmentDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarCompartmentDefinitionQueryFilter on QueryBuilder<
    IsarCompartmentDefinition, IsarCompartmentDefinition, QFilterCondition> {
  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarCompartmentDefinitionQueryObject on QueryBuilder<
    IsarCompartmentDefinition, IsarCompartmentDefinition, QFilterCondition> {}

extension IsarCompartmentDefinitionQuerySortBy on QueryBuilder<
    IsarCompartmentDefinition, IsarCompartmentDefinition, QSortBy> {
  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCompartmentDefinitionQuerySortThenBy on QueryBuilder<
    IsarCompartmentDefinition, IsarCompartmentDefinition, QSortThenBy> {
  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCompartmentDefinitionQueryWhereDistinct on QueryBuilder<
    IsarCompartmentDefinition, IsarCompartmentDefinition, QDistinct> {
  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarCompartmentDefinitionQueryProperty1 on QueryBuilder<
    IsarCompartmentDefinition, IsarCompartmentDefinition, QProperty> {
  QueryBuilder<IsarCompartmentDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCompartmentDefinitionQueryProperty2<R>
    on QueryBuilder<IsarCompartmentDefinition, R, QAfterProperty> {
  QueryBuilder<IsarCompartmentDefinition, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCompartmentDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarCompartmentDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCompartmentDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCompositionCollection on Isar {
  IsarCollection<int, IsarComposition> get isarCompositions =>
      this.collection();
}

const IsarCompositionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarComposition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarComposition>(
    serialize: serializeIsarComposition,
    deserialize: deserializeIsarComposition,
    deserializeProperty: deserializeIsarCompositionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarComposition(IsarWriter writer, IsarComposition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarComposition deserializeIsarComposition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarComposition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarCompositionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarCompositionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarCompositionUpdateImpl implements _IsarCompositionUpdate {
  const _IsarCompositionUpdateImpl(this.collection);

  final IsarCollection<int, IsarComposition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarCompositionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarCompositionUpdateAllImpl implements _IsarCompositionUpdateAll {
  const _IsarCompositionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarComposition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCompositionUpdate on IsarCollection<int, IsarComposition> {
  _IsarCompositionUpdate get update => _IsarCompositionUpdateImpl(this);

  _IsarCompositionUpdateAll get updateAll =>
      _IsarCompositionUpdateAllImpl(this);
}

sealed class _IsarCompositionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarCompositionQueryUpdateImpl implements _IsarCompositionQueryUpdate {
  const _IsarCompositionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarComposition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCompositionQueryUpdate on IsarQuery<IsarComposition> {
  _IsarCompositionQueryUpdate get updateFirst =>
      _IsarCompositionQueryUpdateImpl(this, limit: 1);

  _IsarCompositionQueryUpdate get updateAll =>
      _IsarCompositionQueryUpdateImpl(this);
}

class _IsarCompositionQueryBuilderUpdateImpl
    implements _IsarCompositionQueryUpdate {
  const _IsarCompositionQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarComposition, IsarComposition, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarCompositionQueryBuilderUpdate
    on QueryBuilder<IsarComposition, IsarComposition, QOperations> {
  _IsarCompositionQueryUpdate get updateFirst =>
      _IsarCompositionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarCompositionQueryUpdate get updateAll =>
      _IsarCompositionQueryBuilderUpdateImpl(this);
}

extension IsarCompositionQueryFilter
    on QueryBuilder<IsarComposition, IsarComposition, QFilterCondition> {
  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarCompositionQueryObject
    on QueryBuilder<IsarComposition, IsarComposition, QFilterCondition> {}

extension IsarCompositionQuerySortBy
    on QueryBuilder<IsarComposition, IsarComposition, QSortBy> {
  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCompositionQuerySortThenBy
    on QueryBuilder<IsarComposition, IsarComposition, QSortThenBy> {
  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCompositionQueryWhereDistinct
    on QueryBuilder<IsarComposition, IsarComposition, QDistinct> {
  QueryBuilder<IsarComposition, IsarComposition, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarCompositionQueryProperty1
    on QueryBuilder<IsarComposition, IsarComposition, QProperty> {
  QueryBuilder<IsarComposition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarComposition, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarComposition, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCompositionQueryProperty2<R>
    on QueryBuilder<IsarComposition, R, QAfterProperty> {
  QueryBuilder<IsarComposition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarComposition, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarComposition, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCompositionQueryProperty3<R1, R2>
    on QueryBuilder<IsarComposition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarComposition, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarComposition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarComposition, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarConceptMapCollection on Isar {
  IsarCollection<int, IsarConceptMap> get isarConceptMaps => this.collection();
}

const IsarConceptMapSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarConceptMap',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarConceptMap>(
    serialize: serializeIsarConceptMap,
    deserialize: deserializeIsarConceptMap,
    deserializeProperty: deserializeIsarConceptMapProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarConceptMap(IsarWriter writer, IsarConceptMap object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarConceptMap deserializeIsarConceptMap(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarConceptMap(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarConceptMapProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarConceptMapUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarConceptMapUpdateImpl implements _IsarConceptMapUpdate {
  const _IsarConceptMapUpdateImpl(this.collection);

  final IsarCollection<int, IsarConceptMap> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarConceptMapUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarConceptMapUpdateAllImpl implements _IsarConceptMapUpdateAll {
  const _IsarConceptMapUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarConceptMap> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarConceptMapUpdate on IsarCollection<int, IsarConceptMap> {
  _IsarConceptMapUpdate get update => _IsarConceptMapUpdateImpl(this);

  _IsarConceptMapUpdateAll get updateAll => _IsarConceptMapUpdateAllImpl(this);
}

sealed class _IsarConceptMapQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarConceptMapQueryUpdateImpl implements _IsarConceptMapQueryUpdate {
  const _IsarConceptMapQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarConceptMap> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarConceptMapQueryUpdate on IsarQuery<IsarConceptMap> {
  _IsarConceptMapQueryUpdate get updateFirst =>
      _IsarConceptMapQueryUpdateImpl(this, limit: 1);

  _IsarConceptMapQueryUpdate get updateAll =>
      _IsarConceptMapQueryUpdateImpl(this);
}

class _IsarConceptMapQueryBuilderUpdateImpl
    implements _IsarConceptMapQueryUpdate {
  const _IsarConceptMapQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarConceptMap, IsarConceptMap, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarConceptMapQueryBuilderUpdate
    on QueryBuilder<IsarConceptMap, IsarConceptMap, QOperations> {
  _IsarConceptMapQueryUpdate get updateFirst =>
      _IsarConceptMapQueryBuilderUpdateImpl(this, limit: 1);

  _IsarConceptMapQueryUpdate get updateAll =>
      _IsarConceptMapQueryBuilderUpdateImpl(this);
}

extension IsarConceptMapQueryFilter
    on QueryBuilder<IsarConceptMap, IsarConceptMap, QFilterCondition> {
  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarConceptMapQueryObject
    on QueryBuilder<IsarConceptMap, IsarConceptMap, QFilterCondition> {}

extension IsarConceptMapQuerySortBy
    on QueryBuilder<IsarConceptMap, IsarConceptMap, QSortBy> {
  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarConceptMapQuerySortThenBy
    on QueryBuilder<IsarConceptMap, IsarConceptMap, QSortThenBy> {
  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarConceptMapQueryWhereDistinct
    on QueryBuilder<IsarConceptMap, IsarConceptMap, QDistinct> {
  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarConceptMapQueryProperty1
    on QueryBuilder<IsarConceptMap, IsarConceptMap, QProperty> {
  QueryBuilder<IsarConceptMap, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarConceptMap, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarConceptMap, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarConceptMapQueryProperty2<R>
    on QueryBuilder<IsarConceptMap, R, QAfterProperty> {
  QueryBuilder<IsarConceptMap, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarConceptMap, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarConceptMap, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarConceptMapQueryProperty3<R1, R2>
    on QueryBuilder<IsarConceptMap, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarConceptMap, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarConceptMap, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarConceptMap, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarConditionCollection on Isar {
  IsarCollection<int, IsarCondition> get isarConditions => this.collection();
}

const IsarConditionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCondition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarCondition>(
    serialize: serializeIsarCondition,
    deserialize: deserializeIsarCondition,
    deserializeProperty: deserializeIsarConditionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCondition(IsarWriter writer, IsarCondition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarCondition deserializeIsarCondition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarCondition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarConditionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarConditionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarConditionUpdateImpl implements _IsarConditionUpdate {
  const _IsarConditionUpdateImpl(this.collection);

  final IsarCollection<int, IsarCondition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarConditionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarConditionUpdateAllImpl implements _IsarConditionUpdateAll {
  const _IsarConditionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarCondition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarConditionUpdate on IsarCollection<int, IsarCondition> {
  _IsarConditionUpdate get update => _IsarConditionUpdateImpl(this);

  _IsarConditionUpdateAll get updateAll => _IsarConditionUpdateAllImpl(this);
}

sealed class _IsarConditionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarConditionQueryUpdateImpl implements _IsarConditionQueryUpdate {
  const _IsarConditionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarCondition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarConditionQueryUpdate on IsarQuery<IsarCondition> {
  _IsarConditionQueryUpdate get updateFirst =>
      _IsarConditionQueryUpdateImpl(this, limit: 1);

  _IsarConditionQueryUpdate get updateAll =>
      _IsarConditionQueryUpdateImpl(this);
}

class _IsarConditionQueryBuilderUpdateImpl
    implements _IsarConditionQueryUpdate {
  const _IsarConditionQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarCondition, IsarCondition, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarConditionQueryBuilderUpdate
    on QueryBuilder<IsarCondition, IsarCondition, QOperations> {
  _IsarConditionQueryUpdate get updateFirst =>
      _IsarConditionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarConditionQueryUpdate get updateAll =>
      _IsarConditionQueryBuilderUpdateImpl(this);
}

extension IsarConditionQueryFilter
    on QueryBuilder<IsarCondition, IsarCondition, QFilterCondition> {
  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarConditionQueryObject
    on QueryBuilder<IsarCondition, IsarCondition, QFilterCondition> {}

extension IsarConditionQuerySortBy
    on QueryBuilder<IsarCondition, IsarCondition, QSortBy> {
  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarConditionQuerySortThenBy
    on QueryBuilder<IsarCondition, IsarCondition, QSortThenBy> {
  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarConditionQueryWhereDistinct
    on QueryBuilder<IsarCondition, IsarCondition, QDistinct> {
  QueryBuilder<IsarCondition, IsarCondition, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarConditionQueryProperty1
    on QueryBuilder<IsarCondition, IsarCondition, QProperty> {
  QueryBuilder<IsarCondition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCondition, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCondition, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarConditionQueryProperty2<R>
    on QueryBuilder<IsarCondition, R, QAfterProperty> {
  QueryBuilder<IsarCondition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCondition, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCondition, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarConditionQueryProperty3<R1, R2>
    on QueryBuilder<IsarCondition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCondition, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCondition, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCondition, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarConsentCollection on Isar {
  IsarCollection<int, IsarConsent> get isarConsents => this.collection();
}

const IsarConsentSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarConsent',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarConsent>(
    serialize: serializeIsarConsent,
    deserialize: deserializeIsarConsent,
    deserializeProperty: deserializeIsarConsentProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarConsent(IsarWriter writer, IsarConsent object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarConsent deserializeIsarConsent(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarConsent(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarConsentProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarConsentUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarConsentUpdateImpl implements _IsarConsentUpdate {
  const _IsarConsentUpdateImpl(this.collection);

  final IsarCollection<int, IsarConsent> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarConsentUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarConsentUpdateAllImpl implements _IsarConsentUpdateAll {
  const _IsarConsentUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarConsent> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarConsentUpdate on IsarCollection<int, IsarConsent> {
  _IsarConsentUpdate get update => _IsarConsentUpdateImpl(this);

  _IsarConsentUpdateAll get updateAll => _IsarConsentUpdateAllImpl(this);
}

sealed class _IsarConsentQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarConsentQueryUpdateImpl implements _IsarConsentQueryUpdate {
  const _IsarConsentQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarConsent> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarConsentQueryUpdate on IsarQuery<IsarConsent> {
  _IsarConsentQueryUpdate get updateFirst =>
      _IsarConsentQueryUpdateImpl(this, limit: 1);

  _IsarConsentQueryUpdate get updateAll => _IsarConsentQueryUpdateImpl(this);
}

class _IsarConsentQueryBuilderUpdateImpl implements _IsarConsentQueryUpdate {
  const _IsarConsentQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarConsent, IsarConsent, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarConsentQueryBuilderUpdate
    on QueryBuilder<IsarConsent, IsarConsent, QOperations> {
  _IsarConsentQueryUpdate get updateFirst =>
      _IsarConsentQueryBuilderUpdateImpl(this, limit: 1);

  _IsarConsentQueryUpdate get updateAll =>
      _IsarConsentQueryBuilderUpdateImpl(this);
}

extension IsarConsentQueryFilter
    on QueryBuilder<IsarConsent, IsarConsent, QFilterCondition> {
  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarConsentQueryObject
    on QueryBuilder<IsarConsent, IsarConsent, QFilterCondition> {}

extension IsarConsentQuerySortBy
    on QueryBuilder<IsarConsent, IsarConsent, QSortBy> {
  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarConsentQuerySortThenBy
    on QueryBuilder<IsarConsent, IsarConsent, QSortThenBy> {
  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarConsentQueryWhereDistinct
    on QueryBuilder<IsarConsent, IsarConsent, QDistinct> {
  QueryBuilder<IsarConsent, IsarConsent, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarConsentQueryProperty1
    on QueryBuilder<IsarConsent, IsarConsent, QProperty> {
  QueryBuilder<IsarConsent, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarConsent, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarConsent, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarConsentQueryProperty2<R>
    on QueryBuilder<IsarConsent, R, QAfterProperty> {
  QueryBuilder<IsarConsent, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarConsent, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarConsent, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarConsentQueryProperty3<R1, R2>
    on QueryBuilder<IsarConsent, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarConsent, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarConsent, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarConsent, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarContractCollection on Isar {
  IsarCollection<int, IsarContract> get isarContracts => this.collection();
}

const IsarContractSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarContract',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarContract>(
    serialize: serializeIsarContract,
    deserialize: deserializeIsarContract,
    deserializeProperty: deserializeIsarContractProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarContract(IsarWriter writer, IsarContract object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarContract deserializeIsarContract(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarContract(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarContractProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarContractUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarContractUpdateImpl implements _IsarContractUpdate {
  const _IsarContractUpdateImpl(this.collection);

  final IsarCollection<int, IsarContract> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarContractUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarContractUpdateAllImpl implements _IsarContractUpdateAll {
  const _IsarContractUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarContract> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarContractUpdate on IsarCollection<int, IsarContract> {
  _IsarContractUpdate get update => _IsarContractUpdateImpl(this);

  _IsarContractUpdateAll get updateAll => _IsarContractUpdateAllImpl(this);
}

sealed class _IsarContractQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarContractQueryUpdateImpl implements _IsarContractQueryUpdate {
  const _IsarContractQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarContract> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarContractQueryUpdate on IsarQuery<IsarContract> {
  _IsarContractQueryUpdate get updateFirst =>
      _IsarContractQueryUpdateImpl(this, limit: 1);

  _IsarContractQueryUpdate get updateAll => _IsarContractQueryUpdateImpl(this);
}

class _IsarContractQueryBuilderUpdateImpl implements _IsarContractQueryUpdate {
  const _IsarContractQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarContract, IsarContract, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarContractQueryBuilderUpdate
    on QueryBuilder<IsarContract, IsarContract, QOperations> {
  _IsarContractQueryUpdate get updateFirst =>
      _IsarContractQueryBuilderUpdateImpl(this, limit: 1);

  _IsarContractQueryUpdate get updateAll =>
      _IsarContractQueryBuilderUpdateImpl(this);
}

extension IsarContractQueryFilter
    on QueryBuilder<IsarContract, IsarContract, QFilterCondition> {
  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarContractQueryObject
    on QueryBuilder<IsarContract, IsarContract, QFilterCondition> {}

extension IsarContractQuerySortBy
    on QueryBuilder<IsarContract, IsarContract, QSortBy> {
  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarContractQuerySortThenBy
    on QueryBuilder<IsarContract, IsarContract, QSortThenBy> {
  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarContractQueryWhereDistinct
    on QueryBuilder<IsarContract, IsarContract, QDistinct> {
  QueryBuilder<IsarContract, IsarContract, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarContractQueryProperty1
    on QueryBuilder<IsarContract, IsarContract, QProperty> {
  QueryBuilder<IsarContract, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarContract, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarContract, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarContractQueryProperty2<R>
    on QueryBuilder<IsarContract, R, QAfterProperty> {
  QueryBuilder<IsarContract, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarContract, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarContract, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarContractQueryProperty3<R1, R2>
    on QueryBuilder<IsarContract, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarContract, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarContract, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarContract, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCoverageCollection on Isar {
  IsarCollection<int, IsarCoverage> get isarCoverages => this.collection();
}

const IsarCoverageSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCoverage',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarCoverage>(
    serialize: serializeIsarCoverage,
    deserialize: deserializeIsarCoverage,
    deserializeProperty: deserializeIsarCoverageProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCoverage(IsarWriter writer, IsarCoverage object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarCoverage deserializeIsarCoverage(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarCoverage(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarCoverageProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarCoverageUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarCoverageUpdateImpl implements _IsarCoverageUpdate {
  const _IsarCoverageUpdateImpl(this.collection);

  final IsarCollection<int, IsarCoverage> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarCoverageUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarCoverageUpdateAllImpl implements _IsarCoverageUpdateAll {
  const _IsarCoverageUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarCoverage> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCoverageUpdate on IsarCollection<int, IsarCoverage> {
  _IsarCoverageUpdate get update => _IsarCoverageUpdateImpl(this);

  _IsarCoverageUpdateAll get updateAll => _IsarCoverageUpdateAllImpl(this);
}

sealed class _IsarCoverageQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarCoverageQueryUpdateImpl implements _IsarCoverageQueryUpdate {
  const _IsarCoverageQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarCoverage> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCoverageQueryUpdate on IsarQuery<IsarCoverage> {
  _IsarCoverageQueryUpdate get updateFirst =>
      _IsarCoverageQueryUpdateImpl(this, limit: 1);

  _IsarCoverageQueryUpdate get updateAll => _IsarCoverageQueryUpdateImpl(this);
}

class _IsarCoverageQueryBuilderUpdateImpl implements _IsarCoverageQueryUpdate {
  const _IsarCoverageQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarCoverage, IsarCoverage, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarCoverageQueryBuilderUpdate
    on QueryBuilder<IsarCoverage, IsarCoverage, QOperations> {
  _IsarCoverageQueryUpdate get updateFirst =>
      _IsarCoverageQueryBuilderUpdateImpl(this, limit: 1);

  _IsarCoverageQueryUpdate get updateAll =>
      _IsarCoverageQueryBuilderUpdateImpl(this);
}

extension IsarCoverageQueryFilter
    on QueryBuilder<IsarCoverage, IsarCoverage, QFilterCondition> {
  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarCoverageQueryObject
    on QueryBuilder<IsarCoverage, IsarCoverage, QFilterCondition> {}

extension IsarCoverageQuerySortBy
    on QueryBuilder<IsarCoverage, IsarCoverage, QSortBy> {
  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCoverageQuerySortThenBy
    on QueryBuilder<IsarCoverage, IsarCoverage, QSortThenBy> {
  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCoverageQueryWhereDistinct
    on QueryBuilder<IsarCoverage, IsarCoverage, QDistinct> {
  QueryBuilder<IsarCoverage, IsarCoverage, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarCoverageQueryProperty1
    on QueryBuilder<IsarCoverage, IsarCoverage, QProperty> {
  QueryBuilder<IsarCoverage, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCoverage, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCoverage, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCoverageQueryProperty2<R>
    on QueryBuilder<IsarCoverage, R, QAfterProperty> {
  QueryBuilder<IsarCoverage, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCoverage, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCoverage, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCoverageQueryProperty3<R1, R2>
    on QueryBuilder<IsarCoverage, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCoverage, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCoverage, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCoverage, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCoverageEligibilityRequestCollection on Isar {
  IsarCollection<int, IsarCoverageEligibilityRequest>
      get isarCoverageEligibilityRequests => this.collection();
}

const IsarCoverageEligibilityRequestSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCoverageEligibilityRequest',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarCoverageEligibilityRequest>(
    serialize: serializeIsarCoverageEligibilityRequest,
    deserialize: deserializeIsarCoverageEligibilityRequest,
    deserializeProperty: deserializeIsarCoverageEligibilityRequestProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCoverageEligibilityRequest(
    IsarWriter writer, IsarCoverageEligibilityRequest object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarCoverageEligibilityRequest deserializeIsarCoverageEligibilityRequest(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarCoverageEligibilityRequest(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarCoverageEligibilityRequestProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarCoverageEligibilityRequestUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarCoverageEligibilityRequestUpdateImpl
    implements _IsarCoverageEligibilityRequestUpdate {
  const _IsarCoverageEligibilityRequestUpdateImpl(this.collection);

  final IsarCollection<int, IsarCoverageEligibilityRequest> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarCoverageEligibilityRequestUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarCoverageEligibilityRequestUpdateAllImpl
    implements _IsarCoverageEligibilityRequestUpdateAll {
  const _IsarCoverageEligibilityRequestUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarCoverageEligibilityRequest> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCoverageEligibilityRequestUpdate
    on IsarCollection<int, IsarCoverageEligibilityRequest> {
  _IsarCoverageEligibilityRequestUpdate get update =>
      _IsarCoverageEligibilityRequestUpdateImpl(this);

  _IsarCoverageEligibilityRequestUpdateAll get updateAll =>
      _IsarCoverageEligibilityRequestUpdateAllImpl(this);
}

sealed class _IsarCoverageEligibilityRequestQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarCoverageEligibilityRequestQueryUpdateImpl
    implements _IsarCoverageEligibilityRequestQueryUpdate {
  const _IsarCoverageEligibilityRequestQueryUpdateImpl(this.query,
      {this.limit});

  final IsarQuery<IsarCoverageEligibilityRequest> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCoverageEligibilityRequestQueryUpdate
    on IsarQuery<IsarCoverageEligibilityRequest> {
  _IsarCoverageEligibilityRequestQueryUpdate get updateFirst =>
      _IsarCoverageEligibilityRequestQueryUpdateImpl(this, limit: 1);

  _IsarCoverageEligibilityRequestQueryUpdate get updateAll =>
      _IsarCoverageEligibilityRequestQueryUpdateImpl(this);
}

class _IsarCoverageEligibilityRequestQueryBuilderUpdateImpl
    implements _IsarCoverageEligibilityRequestQueryUpdate {
  const _IsarCoverageEligibilityRequestQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarCoverageEligibilityRequest,
      IsarCoverageEligibilityRequest, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarCoverageEligibilityRequestQueryBuilderUpdate on QueryBuilder<
    IsarCoverageEligibilityRequest,
    IsarCoverageEligibilityRequest,
    QOperations> {
  _IsarCoverageEligibilityRequestQueryUpdate get updateFirst =>
      _IsarCoverageEligibilityRequestQueryBuilderUpdateImpl(this, limit: 1);

  _IsarCoverageEligibilityRequestQueryUpdate get updateAll =>
      _IsarCoverageEligibilityRequestQueryBuilderUpdateImpl(this);
}

extension IsarCoverageEligibilityRequestQueryFilter on QueryBuilder<
    IsarCoverageEligibilityRequest,
    IsarCoverageEligibilityRequest,
    QFilterCondition> {
  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarCoverageEligibilityRequestQueryObject on QueryBuilder<
    IsarCoverageEligibilityRequest,
    IsarCoverageEligibilityRequest,
    QFilterCondition> {}

extension IsarCoverageEligibilityRequestQuerySortBy on QueryBuilder<
    IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest, QSortBy> {
  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCoverageEligibilityRequestQuerySortThenBy on QueryBuilder<
    IsarCoverageEligibilityRequest,
    IsarCoverageEligibilityRequest,
    QSortThenBy> {
  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCoverageEligibilityRequestQueryWhereDistinct on QueryBuilder<
    IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest, QDistinct> {
  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarCoverageEligibilityRequestQueryProperty1 on QueryBuilder<
    IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest, QProperty> {
  QueryBuilder<IsarCoverageEligibilityRequest, int, QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, Map<String, dynamic>,
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCoverageEligibilityRequestQueryProperty2<R>
    on QueryBuilder<IsarCoverageEligibilityRequest, R, QAfterProperty> {
  QueryBuilder<IsarCoverageEligibilityRequest, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCoverageEligibilityRequestQueryProperty3<R1, R2>
    on QueryBuilder<IsarCoverageEligibilityRequest, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCoverageEligibilityRequest, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCoverageEligibilityResponseCollection on Isar {
  IsarCollection<int, IsarCoverageEligibilityResponse>
      get isarCoverageEligibilityResponses => this.collection();
}

const IsarCoverageEligibilityResponseSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCoverageEligibilityResponse',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarCoverageEligibilityResponse>(
    serialize: serializeIsarCoverageEligibilityResponse,
    deserialize: deserializeIsarCoverageEligibilityResponse,
    deserializeProperty: deserializeIsarCoverageEligibilityResponseProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCoverageEligibilityResponse(
    IsarWriter writer, IsarCoverageEligibilityResponse object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarCoverageEligibilityResponse deserializeIsarCoverageEligibilityResponse(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarCoverageEligibilityResponse(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarCoverageEligibilityResponseProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarCoverageEligibilityResponseUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarCoverageEligibilityResponseUpdateImpl
    implements _IsarCoverageEligibilityResponseUpdate {
  const _IsarCoverageEligibilityResponseUpdateImpl(this.collection);

  final IsarCollection<int, IsarCoverageEligibilityResponse> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarCoverageEligibilityResponseUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarCoverageEligibilityResponseUpdateAllImpl
    implements _IsarCoverageEligibilityResponseUpdateAll {
  const _IsarCoverageEligibilityResponseUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarCoverageEligibilityResponse> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCoverageEligibilityResponseUpdate
    on IsarCollection<int, IsarCoverageEligibilityResponse> {
  _IsarCoverageEligibilityResponseUpdate get update =>
      _IsarCoverageEligibilityResponseUpdateImpl(this);

  _IsarCoverageEligibilityResponseUpdateAll get updateAll =>
      _IsarCoverageEligibilityResponseUpdateAllImpl(this);
}

sealed class _IsarCoverageEligibilityResponseQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarCoverageEligibilityResponseQueryUpdateImpl
    implements _IsarCoverageEligibilityResponseQueryUpdate {
  const _IsarCoverageEligibilityResponseQueryUpdateImpl(this.query,
      {this.limit});

  final IsarQuery<IsarCoverageEligibilityResponse> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarCoverageEligibilityResponseQueryUpdate
    on IsarQuery<IsarCoverageEligibilityResponse> {
  _IsarCoverageEligibilityResponseQueryUpdate get updateFirst =>
      _IsarCoverageEligibilityResponseQueryUpdateImpl(this, limit: 1);

  _IsarCoverageEligibilityResponseQueryUpdate get updateAll =>
      _IsarCoverageEligibilityResponseQueryUpdateImpl(this);
}

class _IsarCoverageEligibilityResponseQueryBuilderUpdateImpl
    implements _IsarCoverageEligibilityResponseQueryUpdate {
  const _IsarCoverageEligibilityResponseQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarCoverageEligibilityResponse,
      IsarCoverageEligibilityResponse, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarCoverageEligibilityResponseQueryBuilderUpdate on QueryBuilder<
    IsarCoverageEligibilityResponse,
    IsarCoverageEligibilityResponse,
    QOperations> {
  _IsarCoverageEligibilityResponseQueryUpdate get updateFirst =>
      _IsarCoverageEligibilityResponseQueryBuilderUpdateImpl(this, limit: 1);

  _IsarCoverageEligibilityResponseQueryUpdate get updateAll =>
      _IsarCoverageEligibilityResponseQueryBuilderUpdateImpl(this);
}

extension IsarCoverageEligibilityResponseQueryFilter on QueryBuilder<
    IsarCoverageEligibilityResponse,
    IsarCoverageEligibilityResponse,
    QFilterCondition> {
  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarCoverageEligibilityResponseQueryObject on QueryBuilder<
    IsarCoverageEligibilityResponse,
    IsarCoverageEligibilityResponse,
    QFilterCondition> {}

extension IsarCoverageEligibilityResponseQuerySortBy on QueryBuilder<
    IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse, QSortBy> {
  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCoverageEligibilityResponseQuerySortThenBy on QueryBuilder<
    IsarCoverageEligibilityResponse,
    IsarCoverageEligibilityResponse,
    QSortThenBy> {
  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarCoverageEligibilityResponseQueryWhereDistinct on QueryBuilder<
    IsarCoverageEligibilityResponse,
    IsarCoverageEligibilityResponse,
    QDistinct> {
  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarCoverageEligibilityResponseQueryProperty1 on QueryBuilder<
    IsarCoverageEligibilityResponse,
    IsarCoverageEligibilityResponse,
    QProperty> {
  QueryBuilder<IsarCoverageEligibilityResponse, int, QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, Map<String, dynamic>,
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCoverageEligibilityResponseQueryProperty2<R>
    on QueryBuilder<IsarCoverageEligibilityResponse, R, QAfterProperty> {
  QueryBuilder<IsarCoverageEligibilityResponse, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarCoverageEligibilityResponseQueryProperty3<R1, R2>
    on QueryBuilder<IsarCoverageEligibilityResponse, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCoverageEligibilityResponse, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarDetectedIssueCollection on Isar {
  IsarCollection<int, IsarDetectedIssue> get isarDetectedIssues =>
      this.collection();
}

const IsarDetectedIssueSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarDetectedIssue',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarDetectedIssue>(
    serialize: serializeIsarDetectedIssue,
    deserialize: deserializeIsarDetectedIssue,
    deserializeProperty: deserializeIsarDetectedIssueProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarDetectedIssue(IsarWriter writer, IsarDetectedIssue object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarDetectedIssue deserializeIsarDetectedIssue(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarDetectedIssue(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarDetectedIssueProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarDetectedIssueUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarDetectedIssueUpdateImpl implements _IsarDetectedIssueUpdate {
  const _IsarDetectedIssueUpdateImpl(this.collection);

  final IsarCollection<int, IsarDetectedIssue> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarDetectedIssueUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarDetectedIssueUpdateAllImpl implements _IsarDetectedIssueUpdateAll {
  const _IsarDetectedIssueUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarDetectedIssue> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarDetectedIssueUpdate on IsarCollection<int, IsarDetectedIssue> {
  _IsarDetectedIssueUpdate get update => _IsarDetectedIssueUpdateImpl(this);

  _IsarDetectedIssueUpdateAll get updateAll =>
      _IsarDetectedIssueUpdateAllImpl(this);
}

sealed class _IsarDetectedIssueQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarDetectedIssueQueryUpdateImpl
    implements _IsarDetectedIssueQueryUpdate {
  const _IsarDetectedIssueQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarDetectedIssue> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarDetectedIssueQueryUpdate on IsarQuery<IsarDetectedIssue> {
  _IsarDetectedIssueQueryUpdate get updateFirst =>
      _IsarDetectedIssueQueryUpdateImpl(this, limit: 1);

  _IsarDetectedIssueQueryUpdate get updateAll =>
      _IsarDetectedIssueQueryUpdateImpl(this);
}

class _IsarDetectedIssueQueryBuilderUpdateImpl
    implements _IsarDetectedIssueQueryUpdate {
  const _IsarDetectedIssueQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarDetectedIssueQueryBuilderUpdate
    on QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QOperations> {
  _IsarDetectedIssueQueryUpdate get updateFirst =>
      _IsarDetectedIssueQueryBuilderUpdateImpl(this, limit: 1);

  _IsarDetectedIssueQueryUpdate get updateAll =>
      _IsarDetectedIssueQueryBuilderUpdateImpl(this);
}

extension IsarDetectedIssueQueryFilter
    on QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QFilterCondition> {
  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarDetectedIssueQueryObject
    on QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QFilterCondition> {}

extension IsarDetectedIssueQuerySortBy
    on QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QSortBy> {
  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarDetectedIssueQuerySortThenBy
    on QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QSortThenBy> {
  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarDetectedIssueQueryWhereDistinct
    on QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QDistinct> {
  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarDetectedIssueQueryProperty1
    on QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QProperty> {
  QueryBuilder<IsarDetectedIssue, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDetectedIssue, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDetectedIssue, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarDetectedIssueQueryProperty2<R>
    on QueryBuilder<IsarDetectedIssue, R, QAfterProperty> {
  QueryBuilder<IsarDetectedIssue, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDetectedIssue, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDetectedIssue, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarDetectedIssueQueryProperty3<R1, R2>
    on QueryBuilder<IsarDetectedIssue, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarDetectedIssue, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDetectedIssue, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDetectedIssue, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarDeviceCollection on Isar {
  IsarCollection<int, IsarDevice> get isarDevices => this.collection();
}

const IsarDeviceSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarDevice',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarDevice>(
    serialize: serializeIsarDevice,
    deserialize: deserializeIsarDevice,
    deserializeProperty: deserializeIsarDeviceProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarDevice(IsarWriter writer, IsarDevice object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarDevice deserializeIsarDevice(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarDevice(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarDeviceProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarDeviceUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarDeviceUpdateImpl implements _IsarDeviceUpdate {
  const _IsarDeviceUpdateImpl(this.collection);

  final IsarCollection<int, IsarDevice> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarDeviceUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarDeviceUpdateAllImpl implements _IsarDeviceUpdateAll {
  const _IsarDeviceUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarDevice> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarDeviceUpdate on IsarCollection<int, IsarDevice> {
  _IsarDeviceUpdate get update => _IsarDeviceUpdateImpl(this);

  _IsarDeviceUpdateAll get updateAll => _IsarDeviceUpdateAllImpl(this);
}

sealed class _IsarDeviceQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarDeviceQueryUpdateImpl implements _IsarDeviceQueryUpdate {
  const _IsarDeviceQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarDevice> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarDeviceQueryUpdate on IsarQuery<IsarDevice> {
  _IsarDeviceQueryUpdate get updateFirst =>
      _IsarDeviceQueryUpdateImpl(this, limit: 1);

  _IsarDeviceQueryUpdate get updateAll => _IsarDeviceQueryUpdateImpl(this);
}

class _IsarDeviceQueryBuilderUpdateImpl implements _IsarDeviceQueryUpdate {
  const _IsarDeviceQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarDevice, IsarDevice, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarDeviceQueryBuilderUpdate
    on QueryBuilder<IsarDevice, IsarDevice, QOperations> {
  _IsarDeviceQueryUpdate get updateFirst =>
      _IsarDeviceQueryBuilderUpdateImpl(this, limit: 1);

  _IsarDeviceQueryUpdate get updateAll =>
      _IsarDeviceQueryBuilderUpdateImpl(this);
}

extension IsarDeviceQueryFilter
    on QueryBuilder<IsarDevice, IsarDevice, QFilterCondition> {
  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarDeviceQueryObject
    on QueryBuilder<IsarDevice, IsarDevice, QFilterCondition> {}

extension IsarDeviceQuerySortBy
    on QueryBuilder<IsarDevice, IsarDevice, QSortBy> {
  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarDeviceQuerySortThenBy
    on QueryBuilder<IsarDevice, IsarDevice, QSortThenBy> {
  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarDeviceQueryWhereDistinct
    on QueryBuilder<IsarDevice, IsarDevice, QDistinct> {
  QueryBuilder<IsarDevice, IsarDevice, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarDeviceQueryProperty1
    on QueryBuilder<IsarDevice, IsarDevice, QProperty> {
  QueryBuilder<IsarDevice, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDevice, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDevice, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarDeviceQueryProperty2<R>
    on QueryBuilder<IsarDevice, R, QAfterProperty> {
  QueryBuilder<IsarDevice, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDevice, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDevice, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarDeviceQueryProperty3<R1, R2>
    on QueryBuilder<IsarDevice, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarDevice, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDevice, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDevice, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarDeviceDefinitionCollection on Isar {
  IsarCollection<int, IsarDeviceDefinition> get isarDeviceDefinitions =>
      this.collection();
}

const IsarDeviceDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarDeviceDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarDeviceDefinition>(
    serialize: serializeIsarDeviceDefinition,
    deserialize: deserializeIsarDeviceDefinition,
    deserializeProperty: deserializeIsarDeviceDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarDeviceDefinition(
    IsarWriter writer, IsarDeviceDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarDeviceDefinition deserializeIsarDeviceDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarDeviceDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarDeviceDefinitionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarDeviceDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarDeviceDefinitionUpdateImpl implements _IsarDeviceDefinitionUpdate {
  const _IsarDeviceDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarDeviceDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarDeviceDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarDeviceDefinitionUpdateAllImpl
    implements _IsarDeviceDefinitionUpdateAll {
  const _IsarDeviceDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarDeviceDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarDeviceDefinitionUpdate
    on IsarCollection<int, IsarDeviceDefinition> {
  _IsarDeviceDefinitionUpdate get update =>
      _IsarDeviceDefinitionUpdateImpl(this);

  _IsarDeviceDefinitionUpdateAll get updateAll =>
      _IsarDeviceDefinitionUpdateAllImpl(this);
}

sealed class _IsarDeviceDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarDeviceDefinitionQueryUpdateImpl
    implements _IsarDeviceDefinitionQueryUpdate {
  const _IsarDeviceDefinitionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarDeviceDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarDeviceDefinitionQueryUpdate on IsarQuery<IsarDeviceDefinition> {
  _IsarDeviceDefinitionQueryUpdate get updateFirst =>
      _IsarDeviceDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarDeviceDefinitionQueryUpdate get updateAll =>
      _IsarDeviceDefinitionQueryUpdateImpl(this);
}

class _IsarDeviceDefinitionQueryBuilderUpdateImpl
    implements _IsarDeviceDefinitionQueryUpdate {
  const _IsarDeviceDefinitionQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarDeviceDefinitionQueryBuilderUpdate
    on QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QOperations> {
  _IsarDeviceDefinitionQueryUpdate get updateFirst =>
      _IsarDeviceDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarDeviceDefinitionQueryUpdate get updateAll =>
      _IsarDeviceDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarDeviceDefinitionQueryFilter on QueryBuilder<IsarDeviceDefinition,
    IsarDeviceDefinition, QFilterCondition> {
  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarDeviceDefinitionQueryObject on QueryBuilder<IsarDeviceDefinition,
    IsarDeviceDefinition, QFilterCondition> {}

extension IsarDeviceDefinitionQuerySortBy
    on QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QSortBy> {
  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarDeviceDefinitionQuerySortThenBy
    on QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QSortThenBy> {
  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarDeviceDefinitionQueryWhereDistinct
    on QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QDistinct> {
  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarDeviceDefinitionQueryProperty1
    on QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QProperty> {
  QueryBuilder<IsarDeviceDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceDefinition, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDeviceDefinition, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarDeviceDefinitionQueryProperty2<R>
    on QueryBuilder<IsarDeviceDefinition, R, QAfterProperty> {
  QueryBuilder<IsarDeviceDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDeviceDefinition, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarDeviceDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarDeviceDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarDeviceDefinition, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceDefinition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDeviceDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarDeviceMetricCollection on Isar {
  IsarCollection<int, IsarDeviceMetric> get isarDeviceMetrics =>
      this.collection();
}

const IsarDeviceMetricSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarDeviceMetric',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarDeviceMetric>(
    serialize: serializeIsarDeviceMetric,
    deserialize: deserializeIsarDeviceMetric,
    deserializeProperty: deserializeIsarDeviceMetricProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarDeviceMetric(IsarWriter writer, IsarDeviceMetric object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarDeviceMetric deserializeIsarDeviceMetric(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarDeviceMetric(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarDeviceMetricProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarDeviceMetricUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarDeviceMetricUpdateImpl implements _IsarDeviceMetricUpdate {
  const _IsarDeviceMetricUpdateImpl(this.collection);

  final IsarCollection<int, IsarDeviceMetric> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarDeviceMetricUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarDeviceMetricUpdateAllImpl implements _IsarDeviceMetricUpdateAll {
  const _IsarDeviceMetricUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarDeviceMetric> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarDeviceMetricUpdate on IsarCollection<int, IsarDeviceMetric> {
  _IsarDeviceMetricUpdate get update => _IsarDeviceMetricUpdateImpl(this);

  _IsarDeviceMetricUpdateAll get updateAll =>
      _IsarDeviceMetricUpdateAllImpl(this);
}

sealed class _IsarDeviceMetricQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarDeviceMetricQueryUpdateImpl implements _IsarDeviceMetricQueryUpdate {
  const _IsarDeviceMetricQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarDeviceMetric> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarDeviceMetricQueryUpdate on IsarQuery<IsarDeviceMetric> {
  _IsarDeviceMetricQueryUpdate get updateFirst =>
      _IsarDeviceMetricQueryUpdateImpl(this, limit: 1);

  _IsarDeviceMetricQueryUpdate get updateAll =>
      _IsarDeviceMetricQueryUpdateImpl(this);
}

class _IsarDeviceMetricQueryBuilderUpdateImpl
    implements _IsarDeviceMetricQueryUpdate {
  const _IsarDeviceMetricQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarDeviceMetricQueryBuilderUpdate
    on QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QOperations> {
  _IsarDeviceMetricQueryUpdate get updateFirst =>
      _IsarDeviceMetricQueryBuilderUpdateImpl(this, limit: 1);

  _IsarDeviceMetricQueryUpdate get updateAll =>
      _IsarDeviceMetricQueryBuilderUpdateImpl(this);
}

extension IsarDeviceMetricQueryFilter
    on QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QFilterCondition> {
  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarDeviceMetricQueryObject
    on QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QFilterCondition> {}

extension IsarDeviceMetricQuerySortBy
    on QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QSortBy> {
  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarDeviceMetricQuerySortThenBy
    on QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QSortThenBy> {
  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarDeviceMetricQueryWhereDistinct
    on QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QDistinct> {
  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarDeviceMetricQueryProperty1
    on QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QProperty> {
  QueryBuilder<IsarDeviceMetric, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceMetric, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDeviceMetric, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarDeviceMetricQueryProperty2<R>
    on QueryBuilder<IsarDeviceMetric, R, QAfterProperty> {
  QueryBuilder<IsarDeviceMetric, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceMetric, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDeviceMetric, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarDeviceMetricQueryProperty3<R1, R2>
    on QueryBuilder<IsarDeviceMetric, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarDeviceMetric, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceMetric, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDeviceMetric, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarDeviceRequestCollection on Isar {
  IsarCollection<int, IsarDeviceRequest> get isarDeviceRequests =>
      this.collection();
}

const IsarDeviceRequestSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarDeviceRequest',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarDeviceRequest>(
    serialize: serializeIsarDeviceRequest,
    deserialize: deserializeIsarDeviceRequest,
    deserializeProperty: deserializeIsarDeviceRequestProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarDeviceRequest(IsarWriter writer, IsarDeviceRequest object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarDeviceRequest deserializeIsarDeviceRequest(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarDeviceRequest(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarDeviceRequestProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarDeviceRequestUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarDeviceRequestUpdateImpl implements _IsarDeviceRequestUpdate {
  const _IsarDeviceRequestUpdateImpl(this.collection);

  final IsarCollection<int, IsarDeviceRequest> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarDeviceRequestUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarDeviceRequestUpdateAllImpl implements _IsarDeviceRequestUpdateAll {
  const _IsarDeviceRequestUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarDeviceRequest> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarDeviceRequestUpdate on IsarCollection<int, IsarDeviceRequest> {
  _IsarDeviceRequestUpdate get update => _IsarDeviceRequestUpdateImpl(this);

  _IsarDeviceRequestUpdateAll get updateAll =>
      _IsarDeviceRequestUpdateAllImpl(this);
}

sealed class _IsarDeviceRequestQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarDeviceRequestQueryUpdateImpl
    implements _IsarDeviceRequestQueryUpdate {
  const _IsarDeviceRequestQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarDeviceRequest> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarDeviceRequestQueryUpdate on IsarQuery<IsarDeviceRequest> {
  _IsarDeviceRequestQueryUpdate get updateFirst =>
      _IsarDeviceRequestQueryUpdateImpl(this, limit: 1);

  _IsarDeviceRequestQueryUpdate get updateAll =>
      _IsarDeviceRequestQueryUpdateImpl(this);
}

class _IsarDeviceRequestQueryBuilderUpdateImpl
    implements _IsarDeviceRequestQueryUpdate {
  const _IsarDeviceRequestQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarDeviceRequestQueryBuilderUpdate
    on QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QOperations> {
  _IsarDeviceRequestQueryUpdate get updateFirst =>
      _IsarDeviceRequestQueryBuilderUpdateImpl(this, limit: 1);

  _IsarDeviceRequestQueryUpdate get updateAll =>
      _IsarDeviceRequestQueryBuilderUpdateImpl(this);
}

extension IsarDeviceRequestQueryFilter
    on QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QFilterCondition> {
  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarDeviceRequestQueryObject
    on QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QFilterCondition> {}

extension IsarDeviceRequestQuerySortBy
    on QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QSortBy> {
  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarDeviceRequestQuerySortThenBy
    on QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QSortThenBy> {
  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarDeviceRequestQueryWhereDistinct
    on QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QDistinct> {
  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarDeviceRequestQueryProperty1
    on QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QProperty> {
  QueryBuilder<IsarDeviceRequest, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceRequest, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDeviceRequest, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarDeviceRequestQueryProperty2<R>
    on QueryBuilder<IsarDeviceRequest, R, QAfterProperty> {
  QueryBuilder<IsarDeviceRequest, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceRequest, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDeviceRequest, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarDeviceRequestQueryProperty3<R1, R2>
    on QueryBuilder<IsarDeviceRequest, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarDeviceRequest, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceRequest, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDeviceRequest, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarDeviceUseStatementCollection on Isar {
  IsarCollection<int, IsarDeviceUseStatement> get isarDeviceUseStatements =>
      this.collection();
}

const IsarDeviceUseStatementSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarDeviceUseStatement',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarDeviceUseStatement>(
    serialize: serializeIsarDeviceUseStatement,
    deserialize: deserializeIsarDeviceUseStatement,
    deserializeProperty: deserializeIsarDeviceUseStatementProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarDeviceUseStatement(
    IsarWriter writer, IsarDeviceUseStatement object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarDeviceUseStatement deserializeIsarDeviceUseStatement(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarDeviceUseStatement(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarDeviceUseStatementProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarDeviceUseStatementUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarDeviceUseStatementUpdateImpl
    implements _IsarDeviceUseStatementUpdate {
  const _IsarDeviceUseStatementUpdateImpl(this.collection);

  final IsarCollection<int, IsarDeviceUseStatement> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarDeviceUseStatementUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarDeviceUseStatementUpdateAllImpl
    implements _IsarDeviceUseStatementUpdateAll {
  const _IsarDeviceUseStatementUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarDeviceUseStatement> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarDeviceUseStatementUpdate
    on IsarCollection<int, IsarDeviceUseStatement> {
  _IsarDeviceUseStatementUpdate get update =>
      _IsarDeviceUseStatementUpdateImpl(this);

  _IsarDeviceUseStatementUpdateAll get updateAll =>
      _IsarDeviceUseStatementUpdateAllImpl(this);
}

sealed class _IsarDeviceUseStatementQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarDeviceUseStatementQueryUpdateImpl
    implements _IsarDeviceUseStatementQueryUpdate {
  const _IsarDeviceUseStatementQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarDeviceUseStatement> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarDeviceUseStatementQueryUpdate
    on IsarQuery<IsarDeviceUseStatement> {
  _IsarDeviceUseStatementQueryUpdate get updateFirst =>
      _IsarDeviceUseStatementQueryUpdateImpl(this, limit: 1);

  _IsarDeviceUseStatementQueryUpdate get updateAll =>
      _IsarDeviceUseStatementQueryUpdateImpl(this);
}

class _IsarDeviceUseStatementQueryBuilderUpdateImpl
    implements _IsarDeviceUseStatementQueryUpdate {
  const _IsarDeviceUseStatementQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarDeviceUseStatementQueryBuilderUpdate on QueryBuilder<
    IsarDeviceUseStatement, IsarDeviceUseStatement, QOperations> {
  _IsarDeviceUseStatementQueryUpdate get updateFirst =>
      _IsarDeviceUseStatementQueryBuilderUpdateImpl(this, limit: 1);

  _IsarDeviceUseStatementQueryUpdate get updateAll =>
      _IsarDeviceUseStatementQueryBuilderUpdateImpl(this);
}

extension IsarDeviceUseStatementQueryFilter on QueryBuilder<
    IsarDeviceUseStatement, IsarDeviceUseStatement, QFilterCondition> {
  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarDeviceUseStatementQueryObject on QueryBuilder<
    IsarDeviceUseStatement, IsarDeviceUseStatement, QFilterCondition> {}

extension IsarDeviceUseStatementQuerySortBy
    on QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QSortBy> {
  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarDeviceUseStatementQuerySortThenBy on QueryBuilder<
    IsarDeviceUseStatement, IsarDeviceUseStatement, QSortThenBy> {
  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarDeviceUseStatementQueryWhereDistinct
    on QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QDistinct> {
  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarDeviceUseStatementQueryProperty1
    on QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QProperty> {
  QueryBuilder<IsarDeviceUseStatement, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarDeviceUseStatementQueryProperty2<R>
    on QueryBuilder<IsarDeviceUseStatement, R, QAfterProperty> {
  QueryBuilder<IsarDeviceUseStatement, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarDeviceUseStatementQueryProperty3<R1, R2>
    on QueryBuilder<IsarDeviceUseStatement, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarDeviceUseStatement, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarDiagnosticReportCollection on Isar {
  IsarCollection<int, IsarDiagnosticReport> get isarDiagnosticReports =>
      this.collection();
}

const IsarDiagnosticReportSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarDiagnosticReport',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarDiagnosticReport>(
    serialize: serializeIsarDiagnosticReport,
    deserialize: deserializeIsarDiagnosticReport,
    deserializeProperty: deserializeIsarDiagnosticReportProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarDiagnosticReport(
    IsarWriter writer, IsarDiagnosticReport object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarDiagnosticReport deserializeIsarDiagnosticReport(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarDiagnosticReport(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarDiagnosticReportProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarDiagnosticReportUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarDiagnosticReportUpdateImpl implements _IsarDiagnosticReportUpdate {
  const _IsarDiagnosticReportUpdateImpl(this.collection);

  final IsarCollection<int, IsarDiagnosticReport> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarDiagnosticReportUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarDiagnosticReportUpdateAllImpl
    implements _IsarDiagnosticReportUpdateAll {
  const _IsarDiagnosticReportUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarDiagnosticReport> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarDiagnosticReportUpdate
    on IsarCollection<int, IsarDiagnosticReport> {
  _IsarDiagnosticReportUpdate get update =>
      _IsarDiagnosticReportUpdateImpl(this);

  _IsarDiagnosticReportUpdateAll get updateAll =>
      _IsarDiagnosticReportUpdateAllImpl(this);
}

sealed class _IsarDiagnosticReportQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarDiagnosticReportQueryUpdateImpl
    implements _IsarDiagnosticReportQueryUpdate {
  const _IsarDiagnosticReportQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarDiagnosticReport> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarDiagnosticReportQueryUpdate on IsarQuery<IsarDiagnosticReport> {
  _IsarDiagnosticReportQueryUpdate get updateFirst =>
      _IsarDiagnosticReportQueryUpdateImpl(this, limit: 1);

  _IsarDiagnosticReportQueryUpdate get updateAll =>
      _IsarDiagnosticReportQueryUpdateImpl(this);
}

class _IsarDiagnosticReportQueryBuilderUpdateImpl
    implements _IsarDiagnosticReportQueryUpdate {
  const _IsarDiagnosticReportQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarDiagnosticReportQueryBuilderUpdate
    on QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QOperations> {
  _IsarDiagnosticReportQueryUpdate get updateFirst =>
      _IsarDiagnosticReportQueryBuilderUpdateImpl(this, limit: 1);

  _IsarDiagnosticReportQueryUpdate get updateAll =>
      _IsarDiagnosticReportQueryBuilderUpdateImpl(this);
}

extension IsarDiagnosticReportQueryFilter on QueryBuilder<IsarDiagnosticReport,
    IsarDiagnosticReport, QFilterCondition> {
  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarDiagnosticReportQueryObject on QueryBuilder<IsarDiagnosticReport,
    IsarDiagnosticReport, QFilterCondition> {}

extension IsarDiagnosticReportQuerySortBy
    on QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QSortBy> {
  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarDiagnosticReportQuerySortThenBy
    on QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QSortThenBy> {
  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarDiagnosticReportQueryWhereDistinct
    on QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QDistinct> {
  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarDiagnosticReportQueryProperty1
    on QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QProperty> {
  QueryBuilder<IsarDiagnosticReport, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDiagnosticReport, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDiagnosticReport, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarDiagnosticReportQueryProperty2<R>
    on QueryBuilder<IsarDiagnosticReport, R, QAfterProperty> {
  QueryBuilder<IsarDiagnosticReport, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDiagnosticReport, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDiagnosticReport, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarDiagnosticReportQueryProperty3<R1, R2>
    on QueryBuilder<IsarDiagnosticReport, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarDiagnosticReport, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDiagnosticReport, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDiagnosticReport, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarDocumentManifestCollection on Isar {
  IsarCollection<int, IsarDocumentManifest> get isarDocumentManifests =>
      this.collection();
}

const IsarDocumentManifestSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarDocumentManifest',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarDocumentManifest>(
    serialize: serializeIsarDocumentManifest,
    deserialize: deserializeIsarDocumentManifest,
    deserializeProperty: deserializeIsarDocumentManifestProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarDocumentManifest(
    IsarWriter writer, IsarDocumentManifest object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarDocumentManifest deserializeIsarDocumentManifest(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarDocumentManifest(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarDocumentManifestProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarDocumentManifestUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarDocumentManifestUpdateImpl implements _IsarDocumentManifestUpdate {
  const _IsarDocumentManifestUpdateImpl(this.collection);

  final IsarCollection<int, IsarDocumentManifest> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarDocumentManifestUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarDocumentManifestUpdateAllImpl
    implements _IsarDocumentManifestUpdateAll {
  const _IsarDocumentManifestUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarDocumentManifest> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarDocumentManifestUpdate
    on IsarCollection<int, IsarDocumentManifest> {
  _IsarDocumentManifestUpdate get update =>
      _IsarDocumentManifestUpdateImpl(this);

  _IsarDocumentManifestUpdateAll get updateAll =>
      _IsarDocumentManifestUpdateAllImpl(this);
}

sealed class _IsarDocumentManifestQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarDocumentManifestQueryUpdateImpl
    implements _IsarDocumentManifestQueryUpdate {
  const _IsarDocumentManifestQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarDocumentManifest> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarDocumentManifestQueryUpdate on IsarQuery<IsarDocumentManifest> {
  _IsarDocumentManifestQueryUpdate get updateFirst =>
      _IsarDocumentManifestQueryUpdateImpl(this, limit: 1);

  _IsarDocumentManifestQueryUpdate get updateAll =>
      _IsarDocumentManifestQueryUpdateImpl(this);
}

class _IsarDocumentManifestQueryBuilderUpdateImpl
    implements _IsarDocumentManifestQueryUpdate {
  const _IsarDocumentManifestQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarDocumentManifestQueryBuilderUpdate
    on QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QOperations> {
  _IsarDocumentManifestQueryUpdate get updateFirst =>
      _IsarDocumentManifestQueryBuilderUpdateImpl(this, limit: 1);

  _IsarDocumentManifestQueryUpdate get updateAll =>
      _IsarDocumentManifestQueryBuilderUpdateImpl(this);
}

extension IsarDocumentManifestQueryFilter on QueryBuilder<IsarDocumentManifest,
    IsarDocumentManifest, QFilterCondition> {
  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarDocumentManifestQueryObject on QueryBuilder<IsarDocumentManifest,
    IsarDocumentManifest, QFilterCondition> {}

extension IsarDocumentManifestQuerySortBy
    on QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QSortBy> {
  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarDocumentManifestQuerySortThenBy
    on QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QSortThenBy> {
  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarDocumentManifestQueryWhereDistinct
    on QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QDistinct> {
  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarDocumentManifestQueryProperty1
    on QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QProperty> {
  QueryBuilder<IsarDocumentManifest, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDocumentManifest, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDocumentManifest, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarDocumentManifestQueryProperty2<R>
    on QueryBuilder<IsarDocumentManifest, R, QAfterProperty> {
  QueryBuilder<IsarDocumentManifest, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDocumentManifest, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDocumentManifest, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarDocumentManifestQueryProperty3<R1, R2>
    on QueryBuilder<IsarDocumentManifest, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarDocumentManifest, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDocumentManifest, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDocumentManifest, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarDocumentReferenceCollection on Isar {
  IsarCollection<int, IsarDocumentReference> get isarDocumentReferences =>
      this.collection();
}

const IsarDocumentReferenceSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarDocumentReference',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarDocumentReference>(
    serialize: serializeIsarDocumentReference,
    deserialize: deserializeIsarDocumentReference,
    deserializeProperty: deserializeIsarDocumentReferenceProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarDocumentReference(
    IsarWriter writer, IsarDocumentReference object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarDocumentReference deserializeIsarDocumentReference(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarDocumentReference(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarDocumentReferenceProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarDocumentReferenceUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarDocumentReferenceUpdateImpl implements _IsarDocumentReferenceUpdate {
  const _IsarDocumentReferenceUpdateImpl(this.collection);

  final IsarCollection<int, IsarDocumentReference> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarDocumentReferenceUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarDocumentReferenceUpdateAllImpl
    implements _IsarDocumentReferenceUpdateAll {
  const _IsarDocumentReferenceUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarDocumentReference> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarDocumentReferenceUpdate
    on IsarCollection<int, IsarDocumentReference> {
  _IsarDocumentReferenceUpdate get update =>
      _IsarDocumentReferenceUpdateImpl(this);

  _IsarDocumentReferenceUpdateAll get updateAll =>
      _IsarDocumentReferenceUpdateAllImpl(this);
}

sealed class _IsarDocumentReferenceQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarDocumentReferenceQueryUpdateImpl
    implements _IsarDocumentReferenceQueryUpdate {
  const _IsarDocumentReferenceQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarDocumentReference> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarDocumentReferenceQueryUpdate on IsarQuery<IsarDocumentReference> {
  _IsarDocumentReferenceQueryUpdate get updateFirst =>
      _IsarDocumentReferenceQueryUpdateImpl(this, limit: 1);

  _IsarDocumentReferenceQueryUpdate get updateAll =>
      _IsarDocumentReferenceQueryUpdateImpl(this);
}

class _IsarDocumentReferenceQueryBuilderUpdateImpl
    implements _IsarDocumentReferenceQueryUpdate {
  const _IsarDocumentReferenceQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarDocumentReference, IsarDocumentReference, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarDocumentReferenceQueryBuilderUpdate
    on QueryBuilder<IsarDocumentReference, IsarDocumentReference, QOperations> {
  _IsarDocumentReferenceQueryUpdate get updateFirst =>
      _IsarDocumentReferenceQueryBuilderUpdateImpl(this, limit: 1);

  _IsarDocumentReferenceQueryUpdate get updateAll =>
      _IsarDocumentReferenceQueryBuilderUpdateImpl(this);
}

extension IsarDocumentReferenceQueryFilter on QueryBuilder<
    IsarDocumentReference, IsarDocumentReference, QFilterCondition> {
  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarDocumentReferenceQueryObject on QueryBuilder<
    IsarDocumentReference, IsarDocumentReference, QFilterCondition> {}

extension IsarDocumentReferenceQuerySortBy
    on QueryBuilder<IsarDocumentReference, IsarDocumentReference, QSortBy> {
  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarDocumentReferenceQuerySortThenBy
    on QueryBuilder<IsarDocumentReference, IsarDocumentReference, QSortThenBy> {
  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarDocumentReferenceQueryWhereDistinct
    on QueryBuilder<IsarDocumentReference, IsarDocumentReference, QDistinct> {
  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarDocumentReferenceQueryProperty1
    on QueryBuilder<IsarDocumentReference, IsarDocumentReference, QProperty> {
  QueryBuilder<IsarDocumentReference, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDocumentReference, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDocumentReference, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarDocumentReferenceQueryProperty2<R>
    on QueryBuilder<IsarDocumentReference, R, QAfterProperty> {
  QueryBuilder<IsarDocumentReference, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDocumentReference, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDocumentReference, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarDocumentReferenceQueryProperty3<R1, R2>
    on QueryBuilder<IsarDocumentReference, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarDocumentReference, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDocumentReference, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarDocumentReference, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarEncounterCollection on Isar {
  IsarCollection<int, IsarEncounter> get isarEncounters => this.collection();
}

const IsarEncounterSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarEncounter',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarEncounter>(
    serialize: serializeIsarEncounter,
    deserialize: deserializeIsarEncounter,
    deserializeProperty: deserializeIsarEncounterProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarEncounter(IsarWriter writer, IsarEncounter object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarEncounter deserializeIsarEncounter(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarEncounter(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarEncounterProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarEncounterUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarEncounterUpdateImpl implements _IsarEncounterUpdate {
  const _IsarEncounterUpdateImpl(this.collection);

  final IsarCollection<int, IsarEncounter> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarEncounterUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarEncounterUpdateAllImpl implements _IsarEncounterUpdateAll {
  const _IsarEncounterUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarEncounter> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarEncounterUpdate on IsarCollection<int, IsarEncounter> {
  _IsarEncounterUpdate get update => _IsarEncounterUpdateImpl(this);

  _IsarEncounterUpdateAll get updateAll => _IsarEncounterUpdateAllImpl(this);
}

sealed class _IsarEncounterQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarEncounterQueryUpdateImpl implements _IsarEncounterQueryUpdate {
  const _IsarEncounterQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarEncounter> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarEncounterQueryUpdate on IsarQuery<IsarEncounter> {
  _IsarEncounterQueryUpdate get updateFirst =>
      _IsarEncounterQueryUpdateImpl(this, limit: 1);

  _IsarEncounterQueryUpdate get updateAll =>
      _IsarEncounterQueryUpdateImpl(this);
}

class _IsarEncounterQueryBuilderUpdateImpl
    implements _IsarEncounterQueryUpdate {
  const _IsarEncounterQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarEncounter, IsarEncounter, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarEncounterQueryBuilderUpdate
    on QueryBuilder<IsarEncounter, IsarEncounter, QOperations> {
  _IsarEncounterQueryUpdate get updateFirst =>
      _IsarEncounterQueryBuilderUpdateImpl(this, limit: 1);

  _IsarEncounterQueryUpdate get updateAll =>
      _IsarEncounterQueryBuilderUpdateImpl(this);
}

extension IsarEncounterQueryFilter
    on QueryBuilder<IsarEncounter, IsarEncounter, QFilterCondition> {
  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarEncounterQueryObject
    on QueryBuilder<IsarEncounter, IsarEncounter, QFilterCondition> {}

extension IsarEncounterQuerySortBy
    on QueryBuilder<IsarEncounter, IsarEncounter, QSortBy> {
  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarEncounterQuerySortThenBy
    on QueryBuilder<IsarEncounter, IsarEncounter, QSortThenBy> {
  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarEncounterQueryWhereDistinct
    on QueryBuilder<IsarEncounter, IsarEncounter, QDistinct> {
  QueryBuilder<IsarEncounter, IsarEncounter, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarEncounterQueryProperty1
    on QueryBuilder<IsarEncounter, IsarEncounter, QProperty> {
  QueryBuilder<IsarEncounter, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEncounter, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEncounter, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarEncounterQueryProperty2<R>
    on QueryBuilder<IsarEncounter, R, QAfterProperty> {
  QueryBuilder<IsarEncounter, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEncounter, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEncounter, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarEncounterQueryProperty3<R1, R2>
    on QueryBuilder<IsarEncounter, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarEncounter, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEncounter, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEncounter, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarEndpointCollection on Isar {
  IsarCollection<int, IsarEndpoint> get isarEndpoints => this.collection();
}

const IsarEndpointSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarEndpoint',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarEndpoint>(
    serialize: serializeIsarEndpoint,
    deserialize: deserializeIsarEndpoint,
    deserializeProperty: deserializeIsarEndpointProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarEndpoint(IsarWriter writer, IsarEndpoint object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarEndpoint deserializeIsarEndpoint(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarEndpoint(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarEndpointProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarEndpointUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarEndpointUpdateImpl implements _IsarEndpointUpdate {
  const _IsarEndpointUpdateImpl(this.collection);

  final IsarCollection<int, IsarEndpoint> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarEndpointUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarEndpointUpdateAllImpl implements _IsarEndpointUpdateAll {
  const _IsarEndpointUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarEndpoint> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarEndpointUpdate on IsarCollection<int, IsarEndpoint> {
  _IsarEndpointUpdate get update => _IsarEndpointUpdateImpl(this);

  _IsarEndpointUpdateAll get updateAll => _IsarEndpointUpdateAllImpl(this);
}

sealed class _IsarEndpointQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarEndpointQueryUpdateImpl implements _IsarEndpointQueryUpdate {
  const _IsarEndpointQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarEndpoint> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarEndpointQueryUpdate on IsarQuery<IsarEndpoint> {
  _IsarEndpointQueryUpdate get updateFirst =>
      _IsarEndpointQueryUpdateImpl(this, limit: 1);

  _IsarEndpointQueryUpdate get updateAll => _IsarEndpointQueryUpdateImpl(this);
}

class _IsarEndpointQueryBuilderUpdateImpl implements _IsarEndpointQueryUpdate {
  const _IsarEndpointQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarEndpoint, IsarEndpoint, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarEndpointQueryBuilderUpdate
    on QueryBuilder<IsarEndpoint, IsarEndpoint, QOperations> {
  _IsarEndpointQueryUpdate get updateFirst =>
      _IsarEndpointQueryBuilderUpdateImpl(this, limit: 1);

  _IsarEndpointQueryUpdate get updateAll =>
      _IsarEndpointQueryBuilderUpdateImpl(this);
}

extension IsarEndpointQueryFilter
    on QueryBuilder<IsarEndpoint, IsarEndpoint, QFilterCondition> {
  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarEndpointQueryObject
    on QueryBuilder<IsarEndpoint, IsarEndpoint, QFilterCondition> {}

extension IsarEndpointQuerySortBy
    on QueryBuilder<IsarEndpoint, IsarEndpoint, QSortBy> {
  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarEndpointQuerySortThenBy
    on QueryBuilder<IsarEndpoint, IsarEndpoint, QSortThenBy> {
  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarEndpointQueryWhereDistinct
    on QueryBuilder<IsarEndpoint, IsarEndpoint, QDistinct> {
  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarEndpointQueryProperty1
    on QueryBuilder<IsarEndpoint, IsarEndpoint, QProperty> {
  QueryBuilder<IsarEndpoint, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEndpoint, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEndpoint, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarEndpointQueryProperty2<R>
    on QueryBuilder<IsarEndpoint, R, QAfterProperty> {
  QueryBuilder<IsarEndpoint, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEndpoint, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEndpoint, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarEndpointQueryProperty3<R1, R2>
    on QueryBuilder<IsarEndpoint, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarEndpoint, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEndpoint, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEndpoint, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarEnrollmentRequestCollection on Isar {
  IsarCollection<int, IsarEnrollmentRequest> get isarEnrollmentRequests =>
      this.collection();
}

const IsarEnrollmentRequestSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarEnrollmentRequest',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarEnrollmentRequest>(
    serialize: serializeIsarEnrollmentRequest,
    deserialize: deserializeIsarEnrollmentRequest,
    deserializeProperty: deserializeIsarEnrollmentRequestProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarEnrollmentRequest(
    IsarWriter writer, IsarEnrollmentRequest object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarEnrollmentRequest deserializeIsarEnrollmentRequest(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarEnrollmentRequest(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarEnrollmentRequestProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarEnrollmentRequestUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarEnrollmentRequestUpdateImpl implements _IsarEnrollmentRequestUpdate {
  const _IsarEnrollmentRequestUpdateImpl(this.collection);

  final IsarCollection<int, IsarEnrollmentRequest> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarEnrollmentRequestUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarEnrollmentRequestUpdateAllImpl
    implements _IsarEnrollmentRequestUpdateAll {
  const _IsarEnrollmentRequestUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarEnrollmentRequest> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarEnrollmentRequestUpdate
    on IsarCollection<int, IsarEnrollmentRequest> {
  _IsarEnrollmentRequestUpdate get update =>
      _IsarEnrollmentRequestUpdateImpl(this);

  _IsarEnrollmentRequestUpdateAll get updateAll =>
      _IsarEnrollmentRequestUpdateAllImpl(this);
}

sealed class _IsarEnrollmentRequestQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarEnrollmentRequestQueryUpdateImpl
    implements _IsarEnrollmentRequestQueryUpdate {
  const _IsarEnrollmentRequestQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarEnrollmentRequest> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarEnrollmentRequestQueryUpdate on IsarQuery<IsarEnrollmentRequest> {
  _IsarEnrollmentRequestQueryUpdate get updateFirst =>
      _IsarEnrollmentRequestQueryUpdateImpl(this, limit: 1);

  _IsarEnrollmentRequestQueryUpdate get updateAll =>
      _IsarEnrollmentRequestQueryUpdateImpl(this);
}

class _IsarEnrollmentRequestQueryBuilderUpdateImpl
    implements _IsarEnrollmentRequestQueryUpdate {
  const _IsarEnrollmentRequestQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarEnrollmentRequestQueryBuilderUpdate
    on QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QOperations> {
  _IsarEnrollmentRequestQueryUpdate get updateFirst =>
      _IsarEnrollmentRequestQueryBuilderUpdateImpl(this, limit: 1);

  _IsarEnrollmentRequestQueryUpdate get updateAll =>
      _IsarEnrollmentRequestQueryBuilderUpdateImpl(this);
}

extension IsarEnrollmentRequestQueryFilter on QueryBuilder<
    IsarEnrollmentRequest, IsarEnrollmentRequest, QFilterCondition> {
  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarEnrollmentRequestQueryObject on QueryBuilder<
    IsarEnrollmentRequest, IsarEnrollmentRequest, QFilterCondition> {}

extension IsarEnrollmentRequestQuerySortBy
    on QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QSortBy> {
  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarEnrollmentRequestQuerySortThenBy
    on QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QSortThenBy> {
  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarEnrollmentRequestQueryWhereDistinct
    on QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QDistinct> {
  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarEnrollmentRequestQueryProperty1
    on QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QProperty> {
  QueryBuilder<IsarEnrollmentRequest, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarEnrollmentRequestQueryProperty2<R>
    on QueryBuilder<IsarEnrollmentRequest, R, QAfterProperty> {
  QueryBuilder<IsarEnrollmentRequest, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarEnrollmentRequestQueryProperty3<R1, R2>
    on QueryBuilder<IsarEnrollmentRequest, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarEnrollmentRequest, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarEnrollmentResponseCollection on Isar {
  IsarCollection<int, IsarEnrollmentResponse> get isarEnrollmentResponses =>
      this.collection();
}

const IsarEnrollmentResponseSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarEnrollmentResponse',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarEnrollmentResponse>(
    serialize: serializeIsarEnrollmentResponse,
    deserialize: deserializeIsarEnrollmentResponse,
    deserializeProperty: deserializeIsarEnrollmentResponseProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarEnrollmentResponse(
    IsarWriter writer, IsarEnrollmentResponse object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarEnrollmentResponse deserializeIsarEnrollmentResponse(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarEnrollmentResponse(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarEnrollmentResponseProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarEnrollmentResponseUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarEnrollmentResponseUpdateImpl
    implements _IsarEnrollmentResponseUpdate {
  const _IsarEnrollmentResponseUpdateImpl(this.collection);

  final IsarCollection<int, IsarEnrollmentResponse> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarEnrollmentResponseUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarEnrollmentResponseUpdateAllImpl
    implements _IsarEnrollmentResponseUpdateAll {
  const _IsarEnrollmentResponseUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarEnrollmentResponse> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarEnrollmentResponseUpdate
    on IsarCollection<int, IsarEnrollmentResponse> {
  _IsarEnrollmentResponseUpdate get update =>
      _IsarEnrollmentResponseUpdateImpl(this);

  _IsarEnrollmentResponseUpdateAll get updateAll =>
      _IsarEnrollmentResponseUpdateAllImpl(this);
}

sealed class _IsarEnrollmentResponseQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarEnrollmentResponseQueryUpdateImpl
    implements _IsarEnrollmentResponseQueryUpdate {
  const _IsarEnrollmentResponseQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarEnrollmentResponse> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarEnrollmentResponseQueryUpdate
    on IsarQuery<IsarEnrollmentResponse> {
  _IsarEnrollmentResponseQueryUpdate get updateFirst =>
      _IsarEnrollmentResponseQueryUpdateImpl(this, limit: 1);

  _IsarEnrollmentResponseQueryUpdate get updateAll =>
      _IsarEnrollmentResponseQueryUpdateImpl(this);
}

class _IsarEnrollmentResponseQueryBuilderUpdateImpl
    implements _IsarEnrollmentResponseQueryUpdate {
  const _IsarEnrollmentResponseQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarEnrollmentResponseQueryBuilderUpdate on QueryBuilder<
    IsarEnrollmentResponse, IsarEnrollmentResponse, QOperations> {
  _IsarEnrollmentResponseQueryUpdate get updateFirst =>
      _IsarEnrollmentResponseQueryBuilderUpdateImpl(this, limit: 1);

  _IsarEnrollmentResponseQueryUpdate get updateAll =>
      _IsarEnrollmentResponseQueryBuilderUpdateImpl(this);
}

extension IsarEnrollmentResponseQueryFilter on QueryBuilder<
    IsarEnrollmentResponse, IsarEnrollmentResponse, QFilterCondition> {
  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarEnrollmentResponseQueryObject on QueryBuilder<
    IsarEnrollmentResponse, IsarEnrollmentResponse, QFilterCondition> {}

extension IsarEnrollmentResponseQuerySortBy
    on QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QSortBy> {
  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarEnrollmentResponseQuerySortThenBy on QueryBuilder<
    IsarEnrollmentResponse, IsarEnrollmentResponse, QSortThenBy> {
  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarEnrollmentResponseQueryWhereDistinct
    on QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QDistinct> {
  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarEnrollmentResponseQueryProperty1
    on QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QProperty> {
  QueryBuilder<IsarEnrollmentResponse, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarEnrollmentResponseQueryProperty2<R>
    on QueryBuilder<IsarEnrollmentResponse, R, QAfterProperty> {
  QueryBuilder<IsarEnrollmentResponse, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarEnrollmentResponseQueryProperty3<R1, R2>
    on QueryBuilder<IsarEnrollmentResponse, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarEnrollmentResponse, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarEpisodeOfCareCollection on Isar {
  IsarCollection<int, IsarEpisodeOfCare> get isarEpisodeOfCares =>
      this.collection();
}

const IsarEpisodeOfCareSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarEpisodeOfCare',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarEpisodeOfCare>(
    serialize: serializeIsarEpisodeOfCare,
    deserialize: deserializeIsarEpisodeOfCare,
    deserializeProperty: deserializeIsarEpisodeOfCareProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarEpisodeOfCare(IsarWriter writer, IsarEpisodeOfCare object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarEpisodeOfCare deserializeIsarEpisodeOfCare(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarEpisodeOfCare(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarEpisodeOfCareProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarEpisodeOfCareUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarEpisodeOfCareUpdateImpl implements _IsarEpisodeOfCareUpdate {
  const _IsarEpisodeOfCareUpdateImpl(this.collection);

  final IsarCollection<int, IsarEpisodeOfCare> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarEpisodeOfCareUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarEpisodeOfCareUpdateAllImpl implements _IsarEpisodeOfCareUpdateAll {
  const _IsarEpisodeOfCareUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarEpisodeOfCare> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarEpisodeOfCareUpdate on IsarCollection<int, IsarEpisodeOfCare> {
  _IsarEpisodeOfCareUpdate get update => _IsarEpisodeOfCareUpdateImpl(this);

  _IsarEpisodeOfCareUpdateAll get updateAll =>
      _IsarEpisodeOfCareUpdateAllImpl(this);
}

sealed class _IsarEpisodeOfCareQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarEpisodeOfCareQueryUpdateImpl
    implements _IsarEpisodeOfCareQueryUpdate {
  const _IsarEpisodeOfCareQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarEpisodeOfCare> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarEpisodeOfCareQueryUpdate on IsarQuery<IsarEpisodeOfCare> {
  _IsarEpisodeOfCareQueryUpdate get updateFirst =>
      _IsarEpisodeOfCareQueryUpdateImpl(this, limit: 1);

  _IsarEpisodeOfCareQueryUpdate get updateAll =>
      _IsarEpisodeOfCareQueryUpdateImpl(this);
}

class _IsarEpisodeOfCareQueryBuilderUpdateImpl
    implements _IsarEpisodeOfCareQueryUpdate {
  const _IsarEpisodeOfCareQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarEpisodeOfCareQueryBuilderUpdate
    on QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QOperations> {
  _IsarEpisodeOfCareQueryUpdate get updateFirst =>
      _IsarEpisodeOfCareQueryBuilderUpdateImpl(this, limit: 1);

  _IsarEpisodeOfCareQueryUpdate get updateAll =>
      _IsarEpisodeOfCareQueryBuilderUpdateImpl(this);
}

extension IsarEpisodeOfCareQueryFilter
    on QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QFilterCondition> {
  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarEpisodeOfCareQueryObject
    on QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QFilterCondition> {}

extension IsarEpisodeOfCareQuerySortBy
    on QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QSortBy> {
  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarEpisodeOfCareQuerySortThenBy
    on QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QSortThenBy> {
  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarEpisodeOfCareQueryWhereDistinct
    on QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QDistinct> {
  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarEpisodeOfCareQueryProperty1
    on QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QProperty> {
  QueryBuilder<IsarEpisodeOfCare, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarEpisodeOfCareQueryProperty2<R>
    on QueryBuilder<IsarEpisodeOfCare, R, QAfterProperty> {
  QueryBuilder<IsarEpisodeOfCare, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarEpisodeOfCareQueryProperty3<R1, R2>
    on QueryBuilder<IsarEpisodeOfCare, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarEpisodeOfCare, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarEventDefinitionCollection on Isar {
  IsarCollection<int, IsarEventDefinition> get isarEventDefinitions =>
      this.collection();
}

const IsarEventDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarEventDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarEventDefinition>(
    serialize: serializeIsarEventDefinition,
    deserialize: deserializeIsarEventDefinition,
    deserializeProperty: deserializeIsarEventDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarEventDefinition(
    IsarWriter writer, IsarEventDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarEventDefinition deserializeIsarEventDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarEventDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarEventDefinitionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarEventDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarEventDefinitionUpdateImpl implements _IsarEventDefinitionUpdate {
  const _IsarEventDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarEventDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarEventDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarEventDefinitionUpdateAllImpl
    implements _IsarEventDefinitionUpdateAll {
  const _IsarEventDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarEventDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarEventDefinitionUpdate
    on IsarCollection<int, IsarEventDefinition> {
  _IsarEventDefinitionUpdate get update => _IsarEventDefinitionUpdateImpl(this);

  _IsarEventDefinitionUpdateAll get updateAll =>
      _IsarEventDefinitionUpdateAllImpl(this);
}

sealed class _IsarEventDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarEventDefinitionQueryUpdateImpl
    implements _IsarEventDefinitionQueryUpdate {
  const _IsarEventDefinitionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarEventDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarEventDefinitionQueryUpdate on IsarQuery<IsarEventDefinition> {
  _IsarEventDefinitionQueryUpdate get updateFirst =>
      _IsarEventDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarEventDefinitionQueryUpdate get updateAll =>
      _IsarEventDefinitionQueryUpdateImpl(this);
}

class _IsarEventDefinitionQueryBuilderUpdateImpl
    implements _IsarEventDefinitionQueryUpdate {
  const _IsarEventDefinitionQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarEventDefinition, IsarEventDefinition, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarEventDefinitionQueryBuilderUpdate
    on QueryBuilder<IsarEventDefinition, IsarEventDefinition, QOperations> {
  _IsarEventDefinitionQueryUpdate get updateFirst =>
      _IsarEventDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarEventDefinitionQueryUpdate get updateAll =>
      _IsarEventDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarEventDefinitionQueryFilter on QueryBuilder<IsarEventDefinition,
    IsarEventDefinition, QFilterCondition> {
  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarEventDefinitionQueryObject on QueryBuilder<IsarEventDefinition,
    IsarEventDefinition, QFilterCondition> {}

extension IsarEventDefinitionQuerySortBy
    on QueryBuilder<IsarEventDefinition, IsarEventDefinition, QSortBy> {
  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarEventDefinitionQuerySortThenBy
    on QueryBuilder<IsarEventDefinition, IsarEventDefinition, QSortThenBy> {
  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarEventDefinitionQueryWhereDistinct
    on QueryBuilder<IsarEventDefinition, IsarEventDefinition, QDistinct> {
  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarEventDefinitionQueryProperty1
    on QueryBuilder<IsarEventDefinition, IsarEventDefinition, QProperty> {
  QueryBuilder<IsarEventDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEventDefinition, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEventDefinition, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarEventDefinitionQueryProperty2<R>
    on QueryBuilder<IsarEventDefinition, R, QAfterProperty> {
  QueryBuilder<IsarEventDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEventDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEventDefinition, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarEventDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarEventDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarEventDefinition, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEventDefinition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEventDefinition, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarEvidenceCollection on Isar {
  IsarCollection<int, IsarEvidence> get isarEvidences => this.collection();
}

const IsarEvidenceSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarEvidence',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarEvidence>(
    serialize: serializeIsarEvidence,
    deserialize: deserializeIsarEvidence,
    deserializeProperty: deserializeIsarEvidenceProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarEvidence(IsarWriter writer, IsarEvidence object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarEvidence deserializeIsarEvidence(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarEvidence(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarEvidenceProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarEvidenceUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarEvidenceUpdateImpl implements _IsarEvidenceUpdate {
  const _IsarEvidenceUpdateImpl(this.collection);

  final IsarCollection<int, IsarEvidence> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarEvidenceUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarEvidenceUpdateAllImpl implements _IsarEvidenceUpdateAll {
  const _IsarEvidenceUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarEvidence> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarEvidenceUpdate on IsarCollection<int, IsarEvidence> {
  _IsarEvidenceUpdate get update => _IsarEvidenceUpdateImpl(this);

  _IsarEvidenceUpdateAll get updateAll => _IsarEvidenceUpdateAllImpl(this);
}

sealed class _IsarEvidenceQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarEvidenceQueryUpdateImpl implements _IsarEvidenceQueryUpdate {
  const _IsarEvidenceQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarEvidence> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarEvidenceQueryUpdate on IsarQuery<IsarEvidence> {
  _IsarEvidenceQueryUpdate get updateFirst =>
      _IsarEvidenceQueryUpdateImpl(this, limit: 1);

  _IsarEvidenceQueryUpdate get updateAll => _IsarEvidenceQueryUpdateImpl(this);
}

class _IsarEvidenceQueryBuilderUpdateImpl implements _IsarEvidenceQueryUpdate {
  const _IsarEvidenceQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarEvidence, IsarEvidence, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarEvidenceQueryBuilderUpdate
    on QueryBuilder<IsarEvidence, IsarEvidence, QOperations> {
  _IsarEvidenceQueryUpdate get updateFirst =>
      _IsarEvidenceQueryBuilderUpdateImpl(this, limit: 1);

  _IsarEvidenceQueryUpdate get updateAll =>
      _IsarEvidenceQueryBuilderUpdateImpl(this);
}

extension IsarEvidenceQueryFilter
    on QueryBuilder<IsarEvidence, IsarEvidence, QFilterCondition> {
  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarEvidenceQueryObject
    on QueryBuilder<IsarEvidence, IsarEvidence, QFilterCondition> {}

extension IsarEvidenceQuerySortBy
    on QueryBuilder<IsarEvidence, IsarEvidence, QSortBy> {
  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarEvidenceQuerySortThenBy
    on QueryBuilder<IsarEvidence, IsarEvidence, QSortThenBy> {
  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarEvidenceQueryWhereDistinct
    on QueryBuilder<IsarEvidence, IsarEvidence, QDistinct> {
  QueryBuilder<IsarEvidence, IsarEvidence, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarEvidenceQueryProperty1
    on QueryBuilder<IsarEvidence, IsarEvidence, QProperty> {
  QueryBuilder<IsarEvidence, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEvidence, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEvidence, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarEvidenceQueryProperty2<R>
    on QueryBuilder<IsarEvidence, R, QAfterProperty> {
  QueryBuilder<IsarEvidence, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEvidence, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEvidence, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarEvidenceQueryProperty3<R1, R2>
    on QueryBuilder<IsarEvidence, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarEvidence, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEvidence, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEvidence, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarEvidenceReportCollection on Isar {
  IsarCollection<int, IsarEvidenceReport> get isarEvidenceReports =>
      this.collection();
}

const IsarEvidenceReportSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarEvidenceReport',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarEvidenceReport>(
    serialize: serializeIsarEvidenceReport,
    deserialize: deserializeIsarEvidenceReport,
    deserializeProperty: deserializeIsarEvidenceReportProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarEvidenceReport(IsarWriter writer, IsarEvidenceReport object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarEvidenceReport deserializeIsarEvidenceReport(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarEvidenceReport(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarEvidenceReportProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarEvidenceReportUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarEvidenceReportUpdateImpl implements _IsarEvidenceReportUpdate {
  const _IsarEvidenceReportUpdateImpl(this.collection);

  final IsarCollection<int, IsarEvidenceReport> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarEvidenceReportUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarEvidenceReportUpdateAllImpl implements _IsarEvidenceReportUpdateAll {
  const _IsarEvidenceReportUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarEvidenceReport> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarEvidenceReportUpdate on IsarCollection<int, IsarEvidenceReport> {
  _IsarEvidenceReportUpdate get update => _IsarEvidenceReportUpdateImpl(this);

  _IsarEvidenceReportUpdateAll get updateAll =>
      _IsarEvidenceReportUpdateAllImpl(this);
}

sealed class _IsarEvidenceReportQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarEvidenceReportQueryUpdateImpl
    implements _IsarEvidenceReportQueryUpdate {
  const _IsarEvidenceReportQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarEvidenceReport> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarEvidenceReportQueryUpdate on IsarQuery<IsarEvidenceReport> {
  _IsarEvidenceReportQueryUpdate get updateFirst =>
      _IsarEvidenceReportQueryUpdateImpl(this, limit: 1);

  _IsarEvidenceReportQueryUpdate get updateAll =>
      _IsarEvidenceReportQueryUpdateImpl(this);
}

class _IsarEvidenceReportQueryBuilderUpdateImpl
    implements _IsarEvidenceReportQueryUpdate {
  const _IsarEvidenceReportQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarEvidenceReportQueryBuilderUpdate
    on QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QOperations> {
  _IsarEvidenceReportQueryUpdate get updateFirst =>
      _IsarEvidenceReportQueryBuilderUpdateImpl(this, limit: 1);

  _IsarEvidenceReportQueryUpdate get updateAll =>
      _IsarEvidenceReportQueryBuilderUpdateImpl(this);
}

extension IsarEvidenceReportQueryFilter
    on QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QFilterCondition> {
  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarEvidenceReportQueryObject
    on QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QFilterCondition> {}

extension IsarEvidenceReportQuerySortBy
    on QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QSortBy> {
  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarEvidenceReportQuerySortThenBy
    on QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QSortThenBy> {
  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarEvidenceReportQueryWhereDistinct
    on QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QDistinct> {
  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarEvidenceReportQueryProperty1
    on QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QProperty> {
  QueryBuilder<IsarEvidenceReport, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEvidenceReport, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEvidenceReport, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarEvidenceReportQueryProperty2<R>
    on QueryBuilder<IsarEvidenceReport, R, QAfterProperty> {
  QueryBuilder<IsarEvidenceReport, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEvidenceReport, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEvidenceReport, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarEvidenceReportQueryProperty3<R1, R2>
    on QueryBuilder<IsarEvidenceReport, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarEvidenceReport, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEvidenceReport, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEvidenceReport, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarEvidenceVariableCollection on Isar {
  IsarCollection<int, IsarEvidenceVariable> get isarEvidenceVariables =>
      this.collection();
}

const IsarEvidenceVariableSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarEvidenceVariable',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarEvidenceVariable>(
    serialize: serializeIsarEvidenceVariable,
    deserialize: deserializeIsarEvidenceVariable,
    deserializeProperty: deserializeIsarEvidenceVariableProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarEvidenceVariable(
    IsarWriter writer, IsarEvidenceVariable object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarEvidenceVariable deserializeIsarEvidenceVariable(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarEvidenceVariable(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarEvidenceVariableProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarEvidenceVariableUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarEvidenceVariableUpdateImpl implements _IsarEvidenceVariableUpdate {
  const _IsarEvidenceVariableUpdateImpl(this.collection);

  final IsarCollection<int, IsarEvidenceVariable> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarEvidenceVariableUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarEvidenceVariableUpdateAllImpl
    implements _IsarEvidenceVariableUpdateAll {
  const _IsarEvidenceVariableUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarEvidenceVariable> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarEvidenceVariableUpdate
    on IsarCollection<int, IsarEvidenceVariable> {
  _IsarEvidenceVariableUpdate get update =>
      _IsarEvidenceVariableUpdateImpl(this);

  _IsarEvidenceVariableUpdateAll get updateAll =>
      _IsarEvidenceVariableUpdateAllImpl(this);
}

sealed class _IsarEvidenceVariableQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarEvidenceVariableQueryUpdateImpl
    implements _IsarEvidenceVariableQueryUpdate {
  const _IsarEvidenceVariableQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarEvidenceVariable> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarEvidenceVariableQueryUpdate on IsarQuery<IsarEvidenceVariable> {
  _IsarEvidenceVariableQueryUpdate get updateFirst =>
      _IsarEvidenceVariableQueryUpdateImpl(this, limit: 1);

  _IsarEvidenceVariableQueryUpdate get updateAll =>
      _IsarEvidenceVariableQueryUpdateImpl(this);
}

class _IsarEvidenceVariableQueryBuilderUpdateImpl
    implements _IsarEvidenceVariableQueryUpdate {
  const _IsarEvidenceVariableQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarEvidenceVariableQueryBuilderUpdate
    on QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QOperations> {
  _IsarEvidenceVariableQueryUpdate get updateFirst =>
      _IsarEvidenceVariableQueryBuilderUpdateImpl(this, limit: 1);

  _IsarEvidenceVariableQueryUpdate get updateAll =>
      _IsarEvidenceVariableQueryBuilderUpdateImpl(this);
}

extension IsarEvidenceVariableQueryFilter on QueryBuilder<IsarEvidenceVariable,
    IsarEvidenceVariable, QFilterCondition> {
  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarEvidenceVariableQueryObject on QueryBuilder<IsarEvidenceVariable,
    IsarEvidenceVariable, QFilterCondition> {}

extension IsarEvidenceVariableQuerySortBy
    on QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QSortBy> {
  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarEvidenceVariableQuerySortThenBy
    on QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QSortThenBy> {
  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarEvidenceVariableQueryWhereDistinct
    on QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QDistinct> {
  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarEvidenceVariableQueryProperty1
    on QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QProperty> {
  QueryBuilder<IsarEvidenceVariable, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEvidenceVariable, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEvidenceVariable, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarEvidenceVariableQueryProperty2<R>
    on QueryBuilder<IsarEvidenceVariable, R, QAfterProperty> {
  QueryBuilder<IsarEvidenceVariable, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEvidenceVariable, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEvidenceVariable, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarEvidenceVariableQueryProperty3<R1, R2>
    on QueryBuilder<IsarEvidenceVariable, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarEvidenceVariable, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEvidenceVariable, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarEvidenceVariable, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarExampleScenarioCollection on Isar {
  IsarCollection<int, IsarExampleScenario> get isarExampleScenarios =>
      this.collection();
}

const IsarExampleScenarioSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarExampleScenario',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarExampleScenario>(
    serialize: serializeIsarExampleScenario,
    deserialize: deserializeIsarExampleScenario,
    deserializeProperty: deserializeIsarExampleScenarioProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarExampleScenario(
    IsarWriter writer, IsarExampleScenario object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarExampleScenario deserializeIsarExampleScenario(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarExampleScenario(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarExampleScenarioProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarExampleScenarioUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarExampleScenarioUpdateImpl implements _IsarExampleScenarioUpdate {
  const _IsarExampleScenarioUpdateImpl(this.collection);

  final IsarCollection<int, IsarExampleScenario> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarExampleScenarioUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarExampleScenarioUpdateAllImpl
    implements _IsarExampleScenarioUpdateAll {
  const _IsarExampleScenarioUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarExampleScenario> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarExampleScenarioUpdate
    on IsarCollection<int, IsarExampleScenario> {
  _IsarExampleScenarioUpdate get update => _IsarExampleScenarioUpdateImpl(this);

  _IsarExampleScenarioUpdateAll get updateAll =>
      _IsarExampleScenarioUpdateAllImpl(this);
}

sealed class _IsarExampleScenarioQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarExampleScenarioQueryUpdateImpl
    implements _IsarExampleScenarioQueryUpdate {
  const _IsarExampleScenarioQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarExampleScenario> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarExampleScenarioQueryUpdate on IsarQuery<IsarExampleScenario> {
  _IsarExampleScenarioQueryUpdate get updateFirst =>
      _IsarExampleScenarioQueryUpdateImpl(this, limit: 1);

  _IsarExampleScenarioQueryUpdate get updateAll =>
      _IsarExampleScenarioQueryUpdateImpl(this);
}

class _IsarExampleScenarioQueryBuilderUpdateImpl
    implements _IsarExampleScenarioQueryUpdate {
  const _IsarExampleScenarioQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarExampleScenario, IsarExampleScenario, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarExampleScenarioQueryBuilderUpdate
    on QueryBuilder<IsarExampleScenario, IsarExampleScenario, QOperations> {
  _IsarExampleScenarioQueryUpdate get updateFirst =>
      _IsarExampleScenarioQueryBuilderUpdateImpl(this, limit: 1);

  _IsarExampleScenarioQueryUpdate get updateAll =>
      _IsarExampleScenarioQueryBuilderUpdateImpl(this);
}

extension IsarExampleScenarioQueryFilter on QueryBuilder<IsarExampleScenario,
    IsarExampleScenario, QFilterCondition> {
  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarExampleScenarioQueryObject on QueryBuilder<IsarExampleScenario,
    IsarExampleScenario, QFilterCondition> {}

extension IsarExampleScenarioQuerySortBy
    on QueryBuilder<IsarExampleScenario, IsarExampleScenario, QSortBy> {
  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarExampleScenarioQuerySortThenBy
    on QueryBuilder<IsarExampleScenario, IsarExampleScenario, QSortThenBy> {
  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarExampleScenarioQueryWhereDistinct
    on QueryBuilder<IsarExampleScenario, IsarExampleScenario, QDistinct> {
  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarExampleScenarioQueryProperty1
    on QueryBuilder<IsarExampleScenario, IsarExampleScenario, QProperty> {
  QueryBuilder<IsarExampleScenario, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarExampleScenario, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarExampleScenario, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarExampleScenarioQueryProperty2<R>
    on QueryBuilder<IsarExampleScenario, R, QAfterProperty> {
  QueryBuilder<IsarExampleScenario, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarExampleScenario, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarExampleScenario, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarExampleScenarioQueryProperty3<R1, R2>
    on QueryBuilder<IsarExampleScenario, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarExampleScenario, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarExampleScenario, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarExampleScenario, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarExplanationOfBenefitCollection on Isar {
  IsarCollection<int, IsarExplanationOfBenefit> get isarExplanationOfBenefits =>
      this.collection();
}

const IsarExplanationOfBenefitSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarExplanationOfBenefit',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarExplanationOfBenefit>(
    serialize: serializeIsarExplanationOfBenefit,
    deserialize: deserializeIsarExplanationOfBenefit,
    deserializeProperty: deserializeIsarExplanationOfBenefitProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarExplanationOfBenefit(
    IsarWriter writer, IsarExplanationOfBenefit object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarExplanationOfBenefit deserializeIsarExplanationOfBenefit(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarExplanationOfBenefit(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarExplanationOfBenefitProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarExplanationOfBenefitUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarExplanationOfBenefitUpdateImpl
    implements _IsarExplanationOfBenefitUpdate {
  const _IsarExplanationOfBenefitUpdateImpl(this.collection);

  final IsarCollection<int, IsarExplanationOfBenefit> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarExplanationOfBenefitUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarExplanationOfBenefitUpdateAllImpl
    implements _IsarExplanationOfBenefitUpdateAll {
  const _IsarExplanationOfBenefitUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarExplanationOfBenefit> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarExplanationOfBenefitUpdate
    on IsarCollection<int, IsarExplanationOfBenefit> {
  _IsarExplanationOfBenefitUpdate get update =>
      _IsarExplanationOfBenefitUpdateImpl(this);

  _IsarExplanationOfBenefitUpdateAll get updateAll =>
      _IsarExplanationOfBenefitUpdateAllImpl(this);
}

sealed class _IsarExplanationOfBenefitQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarExplanationOfBenefitQueryUpdateImpl
    implements _IsarExplanationOfBenefitQueryUpdate {
  const _IsarExplanationOfBenefitQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarExplanationOfBenefit> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarExplanationOfBenefitQueryUpdate
    on IsarQuery<IsarExplanationOfBenefit> {
  _IsarExplanationOfBenefitQueryUpdate get updateFirst =>
      _IsarExplanationOfBenefitQueryUpdateImpl(this, limit: 1);

  _IsarExplanationOfBenefitQueryUpdate get updateAll =>
      _IsarExplanationOfBenefitQueryUpdateImpl(this);
}

class _IsarExplanationOfBenefitQueryBuilderUpdateImpl
    implements _IsarExplanationOfBenefitQueryUpdate {
  const _IsarExplanationOfBenefitQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarExplanationOfBenefitQueryBuilderUpdate on QueryBuilder<
    IsarExplanationOfBenefit, IsarExplanationOfBenefit, QOperations> {
  _IsarExplanationOfBenefitQueryUpdate get updateFirst =>
      _IsarExplanationOfBenefitQueryBuilderUpdateImpl(this, limit: 1);

  _IsarExplanationOfBenefitQueryUpdate get updateAll =>
      _IsarExplanationOfBenefitQueryBuilderUpdateImpl(this);
}

extension IsarExplanationOfBenefitQueryFilter on QueryBuilder<
    IsarExplanationOfBenefit, IsarExplanationOfBenefit, QFilterCondition> {
  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarExplanationOfBenefitQueryObject on QueryBuilder<
    IsarExplanationOfBenefit, IsarExplanationOfBenefit, QFilterCondition> {}

extension IsarExplanationOfBenefitQuerySortBy on QueryBuilder<
    IsarExplanationOfBenefit, IsarExplanationOfBenefit, QSortBy> {
  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarExplanationOfBenefitQuerySortThenBy on QueryBuilder<
    IsarExplanationOfBenefit, IsarExplanationOfBenefit, QSortThenBy> {
  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarExplanationOfBenefitQueryWhereDistinct on QueryBuilder<
    IsarExplanationOfBenefit, IsarExplanationOfBenefit, QDistinct> {
  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarExplanationOfBenefitQueryProperty1 on QueryBuilder<
    IsarExplanationOfBenefit, IsarExplanationOfBenefit, QProperty> {
  QueryBuilder<IsarExplanationOfBenefit, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarExplanationOfBenefitQueryProperty2<R>
    on QueryBuilder<IsarExplanationOfBenefit, R, QAfterProperty> {
  QueryBuilder<IsarExplanationOfBenefit, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarExplanationOfBenefitQueryProperty3<R1, R2>
    on QueryBuilder<IsarExplanationOfBenefit, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarExplanationOfBenefit, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarFamilyMemberHistoryCollection on Isar {
  IsarCollection<int, IsarFamilyMemberHistory> get isarFamilyMemberHistorys =>
      this.collection();
}

const IsarFamilyMemberHistorySchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarFamilyMemberHistory',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarFamilyMemberHistory>(
    serialize: serializeIsarFamilyMemberHistory,
    deserialize: deserializeIsarFamilyMemberHistory,
    deserializeProperty: deserializeIsarFamilyMemberHistoryProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarFamilyMemberHistory(
    IsarWriter writer, IsarFamilyMemberHistory object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarFamilyMemberHistory deserializeIsarFamilyMemberHistory(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarFamilyMemberHistory(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarFamilyMemberHistoryProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarFamilyMemberHistoryUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarFamilyMemberHistoryUpdateImpl
    implements _IsarFamilyMemberHistoryUpdate {
  const _IsarFamilyMemberHistoryUpdateImpl(this.collection);

  final IsarCollection<int, IsarFamilyMemberHistory> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarFamilyMemberHistoryUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarFamilyMemberHistoryUpdateAllImpl
    implements _IsarFamilyMemberHistoryUpdateAll {
  const _IsarFamilyMemberHistoryUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarFamilyMemberHistory> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarFamilyMemberHistoryUpdate
    on IsarCollection<int, IsarFamilyMemberHistory> {
  _IsarFamilyMemberHistoryUpdate get update =>
      _IsarFamilyMemberHistoryUpdateImpl(this);

  _IsarFamilyMemberHistoryUpdateAll get updateAll =>
      _IsarFamilyMemberHistoryUpdateAllImpl(this);
}

sealed class _IsarFamilyMemberHistoryQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarFamilyMemberHistoryQueryUpdateImpl
    implements _IsarFamilyMemberHistoryQueryUpdate {
  const _IsarFamilyMemberHistoryQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarFamilyMemberHistory> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarFamilyMemberHistoryQueryUpdate
    on IsarQuery<IsarFamilyMemberHistory> {
  _IsarFamilyMemberHistoryQueryUpdate get updateFirst =>
      _IsarFamilyMemberHistoryQueryUpdateImpl(this, limit: 1);

  _IsarFamilyMemberHistoryQueryUpdate get updateAll =>
      _IsarFamilyMemberHistoryQueryUpdateImpl(this);
}

class _IsarFamilyMemberHistoryQueryBuilderUpdateImpl
    implements _IsarFamilyMemberHistoryQueryUpdate {
  const _IsarFamilyMemberHistoryQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarFamilyMemberHistoryQueryBuilderUpdate on QueryBuilder<
    IsarFamilyMemberHistory, IsarFamilyMemberHistory, QOperations> {
  _IsarFamilyMemberHistoryQueryUpdate get updateFirst =>
      _IsarFamilyMemberHistoryQueryBuilderUpdateImpl(this, limit: 1);

  _IsarFamilyMemberHistoryQueryUpdate get updateAll =>
      _IsarFamilyMemberHistoryQueryBuilderUpdateImpl(this);
}

extension IsarFamilyMemberHistoryQueryFilter on QueryBuilder<
    IsarFamilyMemberHistory, IsarFamilyMemberHistory, QFilterCondition> {
  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarFamilyMemberHistoryQueryObject on QueryBuilder<
    IsarFamilyMemberHistory, IsarFamilyMemberHistory, QFilterCondition> {}

extension IsarFamilyMemberHistoryQuerySortBy
    on QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QSortBy> {
  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarFamilyMemberHistoryQuerySortThenBy on QueryBuilder<
    IsarFamilyMemberHistory, IsarFamilyMemberHistory, QSortThenBy> {
  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarFamilyMemberHistoryQueryWhereDistinct on QueryBuilder<
    IsarFamilyMemberHistory, IsarFamilyMemberHistory, QDistinct> {
  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarFamilyMemberHistoryQueryProperty1 on QueryBuilder<
    IsarFamilyMemberHistory, IsarFamilyMemberHistory, QProperty> {
  QueryBuilder<IsarFamilyMemberHistory, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarFamilyMemberHistoryQueryProperty2<R>
    on QueryBuilder<IsarFamilyMemberHistory, R, QAfterProperty> {
  QueryBuilder<IsarFamilyMemberHistory, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarFamilyMemberHistoryQueryProperty3<R1, R2>
    on QueryBuilder<IsarFamilyMemberHistory, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarFamilyMemberHistory, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarFlagCollection on Isar {
  IsarCollection<int, IsarFlag> get isarFlags => this.collection();
}

const IsarFlagSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarFlag',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarFlag>(
    serialize: serializeIsarFlag,
    deserialize: deserializeIsarFlag,
    deserializeProperty: deserializeIsarFlagProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarFlag(IsarWriter writer, IsarFlag object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarFlag deserializeIsarFlag(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarFlag(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarFlagProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarFlagUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarFlagUpdateImpl implements _IsarFlagUpdate {
  const _IsarFlagUpdateImpl(this.collection);

  final IsarCollection<int, IsarFlag> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarFlagUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarFlagUpdateAllImpl implements _IsarFlagUpdateAll {
  const _IsarFlagUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarFlag> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarFlagUpdate on IsarCollection<int, IsarFlag> {
  _IsarFlagUpdate get update => _IsarFlagUpdateImpl(this);

  _IsarFlagUpdateAll get updateAll => _IsarFlagUpdateAllImpl(this);
}

sealed class _IsarFlagQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarFlagQueryUpdateImpl implements _IsarFlagQueryUpdate {
  const _IsarFlagQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarFlag> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarFlagQueryUpdate on IsarQuery<IsarFlag> {
  _IsarFlagQueryUpdate get updateFirst =>
      _IsarFlagQueryUpdateImpl(this, limit: 1);

  _IsarFlagQueryUpdate get updateAll => _IsarFlagQueryUpdateImpl(this);
}

class _IsarFlagQueryBuilderUpdateImpl implements _IsarFlagQueryUpdate {
  const _IsarFlagQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarFlag, IsarFlag, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarFlagQueryBuilderUpdate
    on QueryBuilder<IsarFlag, IsarFlag, QOperations> {
  _IsarFlagQueryUpdate get updateFirst =>
      _IsarFlagQueryBuilderUpdateImpl(this, limit: 1);

  _IsarFlagQueryUpdate get updateAll => _IsarFlagQueryBuilderUpdateImpl(this);
}

extension IsarFlagQueryFilter
    on QueryBuilder<IsarFlag, IsarFlag, QFilterCondition> {
  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarFlagQueryObject
    on QueryBuilder<IsarFlag, IsarFlag, QFilterCondition> {}

extension IsarFlagQuerySortBy on QueryBuilder<IsarFlag, IsarFlag, QSortBy> {
  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarFlagQuerySortThenBy
    on QueryBuilder<IsarFlag, IsarFlag, QSortThenBy> {
  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarFlagQueryWhereDistinct
    on QueryBuilder<IsarFlag, IsarFlag, QDistinct> {
  QueryBuilder<IsarFlag, IsarFlag, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarFlagQueryProperty1
    on QueryBuilder<IsarFlag, IsarFlag, QProperty> {
  QueryBuilder<IsarFlag, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarFlag, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarFlag, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarFlagQueryProperty2<R>
    on QueryBuilder<IsarFlag, R, QAfterProperty> {
  QueryBuilder<IsarFlag, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarFlag, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarFlag, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarFlagQueryProperty3<R1, R2>
    on QueryBuilder<IsarFlag, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarFlag, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarFlag, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarFlag, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarGoalCollection on Isar {
  IsarCollection<int, IsarGoal> get isarGoals => this.collection();
}

const IsarGoalSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarGoal',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarGoal>(
    serialize: serializeIsarGoal,
    deserialize: deserializeIsarGoal,
    deserializeProperty: deserializeIsarGoalProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarGoal(IsarWriter writer, IsarGoal object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarGoal deserializeIsarGoal(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarGoal(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarGoalProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarGoalUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarGoalUpdateImpl implements _IsarGoalUpdate {
  const _IsarGoalUpdateImpl(this.collection);

  final IsarCollection<int, IsarGoal> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarGoalUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarGoalUpdateAllImpl implements _IsarGoalUpdateAll {
  const _IsarGoalUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarGoal> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarGoalUpdate on IsarCollection<int, IsarGoal> {
  _IsarGoalUpdate get update => _IsarGoalUpdateImpl(this);

  _IsarGoalUpdateAll get updateAll => _IsarGoalUpdateAllImpl(this);
}

sealed class _IsarGoalQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarGoalQueryUpdateImpl implements _IsarGoalQueryUpdate {
  const _IsarGoalQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarGoal> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarGoalQueryUpdate on IsarQuery<IsarGoal> {
  _IsarGoalQueryUpdate get updateFirst =>
      _IsarGoalQueryUpdateImpl(this, limit: 1);

  _IsarGoalQueryUpdate get updateAll => _IsarGoalQueryUpdateImpl(this);
}

class _IsarGoalQueryBuilderUpdateImpl implements _IsarGoalQueryUpdate {
  const _IsarGoalQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarGoal, IsarGoal, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarGoalQueryBuilderUpdate
    on QueryBuilder<IsarGoal, IsarGoal, QOperations> {
  _IsarGoalQueryUpdate get updateFirst =>
      _IsarGoalQueryBuilderUpdateImpl(this, limit: 1);

  _IsarGoalQueryUpdate get updateAll => _IsarGoalQueryBuilderUpdateImpl(this);
}

extension IsarGoalQueryFilter
    on QueryBuilder<IsarGoal, IsarGoal, QFilterCondition> {
  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarGoalQueryObject
    on QueryBuilder<IsarGoal, IsarGoal, QFilterCondition> {}

extension IsarGoalQuerySortBy on QueryBuilder<IsarGoal, IsarGoal, QSortBy> {
  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarGoalQuerySortThenBy
    on QueryBuilder<IsarGoal, IsarGoal, QSortThenBy> {
  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarGoalQueryWhereDistinct
    on QueryBuilder<IsarGoal, IsarGoal, QDistinct> {
  QueryBuilder<IsarGoal, IsarGoal, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarGoalQueryProperty1
    on QueryBuilder<IsarGoal, IsarGoal, QProperty> {
  QueryBuilder<IsarGoal, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGoal, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarGoal, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarGoalQueryProperty2<R>
    on QueryBuilder<IsarGoal, R, QAfterProperty> {
  QueryBuilder<IsarGoal, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGoal, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarGoal, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarGoalQueryProperty3<R1, R2>
    on QueryBuilder<IsarGoal, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarGoal, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGoal, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarGoal, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarGraphDefinitionCollection on Isar {
  IsarCollection<int, IsarGraphDefinition> get isarGraphDefinitions =>
      this.collection();
}

const IsarGraphDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarGraphDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarGraphDefinition>(
    serialize: serializeIsarGraphDefinition,
    deserialize: deserializeIsarGraphDefinition,
    deserializeProperty: deserializeIsarGraphDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarGraphDefinition(
    IsarWriter writer, IsarGraphDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarGraphDefinition deserializeIsarGraphDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarGraphDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarGraphDefinitionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarGraphDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarGraphDefinitionUpdateImpl implements _IsarGraphDefinitionUpdate {
  const _IsarGraphDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarGraphDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarGraphDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarGraphDefinitionUpdateAllImpl
    implements _IsarGraphDefinitionUpdateAll {
  const _IsarGraphDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarGraphDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarGraphDefinitionUpdate
    on IsarCollection<int, IsarGraphDefinition> {
  _IsarGraphDefinitionUpdate get update => _IsarGraphDefinitionUpdateImpl(this);

  _IsarGraphDefinitionUpdateAll get updateAll =>
      _IsarGraphDefinitionUpdateAllImpl(this);
}

sealed class _IsarGraphDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarGraphDefinitionQueryUpdateImpl
    implements _IsarGraphDefinitionQueryUpdate {
  const _IsarGraphDefinitionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarGraphDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarGraphDefinitionQueryUpdate on IsarQuery<IsarGraphDefinition> {
  _IsarGraphDefinitionQueryUpdate get updateFirst =>
      _IsarGraphDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarGraphDefinitionQueryUpdate get updateAll =>
      _IsarGraphDefinitionQueryUpdateImpl(this);
}

class _IsarGraphDefinitionQueryBuilderUpdateImpl
    implements _IsarGraphDefinitionQueryUpdate {
  const _IsarGraphDefinitionQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarGraphDefinitionQueryBuilderUpdate
    on QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QOperations> {
  _IsarGraphDefinitionQueryUpdate get updateFirst =>
      _IsarGraphDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarGraphDefinitionQueryUpdate get updateAll =>
      _IsarGraphDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarGraphDefinitionQueryFilter on QueryBuilder<IsarGraphDefinition,
    IsarGraphDefinition, QFilterCondition> {
  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarGraphDefinitionQueryObject on QueryBuilder<IsarGraphDefinition,
    IsarGraphDefinition, QFilterCondition> {}

extension IsarGraphDefinitionQuerySortBy
    on QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QSortBy> {
  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarGraphDefinitionQuerySortThenBy
    on QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QSortThenBy> {
  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarGraphDefinitionQueryWhereDistinct
    on QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QDistinct> {
  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarGraphDefinitionQueryProperty1
    on QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QProperty> {
  QueryBuilder<IsarGraphDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGraphDefinition, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarGraphDefinition, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarGraphDefinitionQueryProperty2<R>
    on QueryBuilder<IsarGraphDefinition, R, QAfterProperty> {
  QueryBuilder<IsarGraphDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGraphDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarGraphDefinition, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarGraphDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarGraphDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarGraphDefinition, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGraphDefinition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarGraphDefinition, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarGroupCollection on Isar {
  IsarCollection<int, IsarGroup> get isarGroups => this.collection();
}

const IsarGroupSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarGroup',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarGroup>(
    serialize: serializeIsarGroup,
    deserialize: deserializeIsarGroup,
    deserializeProperty: deserializeIsarGroupProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarGroup(IsarWriter writer, IsarGroup object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarGroup deserializeIsarGroup(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarGroup(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarGroupProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarGroupUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarGroupUpdateImpl implements _IsarGroupUpdate {
  const _IsarGroupUpdateImpl(this.collection);

  final IsarCollection<int, IsarGroup> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarGroupUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarGroupUpdateAllImpl implements _IsarGroupUpdateAll {
  const _IsarGroupUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarGroup> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarGroupUpdate on IsarCollection<int, IsarGroup> {
  _IsarGroupUpdate get update => _IsarGroupUpdateImpl(this);

  _IsarGroupUpdateAll get updateAll => _IsarGroupUpdateAllImpl(this);
}

sealed class _IsarGroupQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarGroupQueryUpdateImpl implements _IsarGroupQueryUpdate {
  const _IsarGroupQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarGroup> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarGroupQueryUpdate on IsarQuery<IsarGroup> {
  _IsarGroupQueryUpdate get updateFirst =>
      _IsarGroupQueryUpdateImpl(this, limit: 1);

  _IsarGroupQueryUpdate get updateAll => _IsarGroupQueryUpdateImpl(this);
}

class _IsarGroupQueryBuilderUpdateImpl implements _IsarGroupQueryUpdate {
  const _IsarGroupQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarGroup, IsarGroup, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarGroupQueryBuilderUpdate
    on QueryBuilder<IsarGroup, IsarGroup, QOperations> {
  _IsarGroupQueryUpdate get updateFirst =>
      _IsarGroupQueryBuilderUpdateImpl(this, limit: 1);

  _IsarGroupQueryUpdate get updateAll => _IsarGroupQueryBuilderUpdateImpl(this);
}

extension IsarGroupQueryFilter
    on QueryBuilder<IsarGroup, IsarGroup, QFilterCondition> {
  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarGroupQueryObject
    on QueryBuilder<IsarGroup, IsarGroup, QFilterCondition> {}

extension IsarGroupQuerySortBy on QueryBuilder<IsarGroup, IsarGroup, QSortBy> {
  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarGroupQuerySortThenBy
    on QueryBuilder<IsarGroup, IsarGroup, QSortThenBy> {
  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarGroupQueryWhereDistinct
    on QueryBuilder<IsarGroup, IsarGroup, QDistinct> {
  QueryBuilder<IsarGroup, IsarGroup, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarGroupQueryProperty1
    on QueryBuilder<IsarGroup, IsarGroup, QProperty> {
  QueryBuilder<IsarGroup, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGroup, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarGroup, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarGroupQueryProperty2<R>
    on QueryBuilder<IsarGroup, R, QAfterProperty> {
  QueryBuilder<IsarGroup, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGroup, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarGroup, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarGroupQueryProperty3<R1, R2>
    on QueryBuilder<IsarGroup, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarGroup, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGroup, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarGroup, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarGuidanceResponseCollection on Isar {
  IsarCollection<int, IsarGuidanceResponse> get isarGuidanceResponses =>
      this.collection();
}

const IsarGuidanceResponseSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarGuidanceResponse',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarGuidanceResponse>(
    serialize: serializeIsarGuidanceResponse,
    deserialize: deserializeIsarGuidanceResponse,
    deserializeProperty: deserializeIsarGuidanceResponseProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarGuidanceResponse(
    IsarWriter writer, IsarGuidanceResponse object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarGuidanceResponse deserializeIsarGuidanceResponse(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarGuidanceResponse(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarGuidanceResponseProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarGuidanceResponseUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarGuidanceResponseUpdateImpl implements _IsarGuidanceResponseUpdate {
  const _IsarGuidanceResponseUpdateImpl(this.collection);

  final IsarCollection<int, IsarGuidanceResponse> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarGuidanceResponseUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarGuidanceResponseUpdateAllImpl
    implements _IsarGuidanceResponseUpdateAll {
  const _IsarGuidanceResponseUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarGuidanceResponse> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarGuidanceResponseUpdate
    on IsarCollection<int, IsarGuidanceResponse> {
  _IsarGuidanceResponseUpdate get update =>
      _IsarGuidanceResponseUpdateImpl(this);

  _IsarGuidanceResponseUpdateAll get updateAll =>
      _IsarGuidanceResponseUpdateAllImpl(this);
}

sealed class _IsarGuidanceResponseQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarGuidanceResponseQueryUpdateImpl
    implements _IsarGuidanceResponseQueryUpdate {
  const _IsarGuidanceResponseQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarGuidanceResponse> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarGuidanceResponseQueryUpdate on IsarQuery<IsarGuidanceResponse> {
  _IsarGuidanceResponseQueryUpdate get updateFirst =>
      _IsarGuidanceResponseQueryUpdateImpl(this, limit: 1);

  _IsarGuidanceResponseQueryUpdate get updateAll =>
      _IsarGuidanceResponseQueryUpdateImpl(this);
}

class _IsarGuidanceResponseQueryBuilderUpdateImpl
    implements _IsarGuidanceResponseQueryUpdate {
  const _IsarGuidanceResponseQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarGuidanceResponseQueryBuilderUpdate
    on QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QOperations> {
  _IsarGuidanceResponseQueryUpdate get updateFirst =>
      _IsarGuidanceResponseQueryBuilderUpdateImpl(this, limit: 1);

  _IsarGuidanceResponseQueryUpdate get updateAll =>
      _IsarGuidanceResponseQueryBuilderUpdateImpl(this);
}

extension IsarGuidanceResponseQueryFilter on QueryBuilder<IsarGuidanceResponse,
    IsarGuidanceResponse, QFilterCondition> {
  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarGuidanceResponseQueryObject on QueryBuilder<IsarGuidanceResponse,
    IsarGuidanceResponse, QFilterCondition> {}

extension IsarGuidanceResponseQuerySortBy
    on QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QSortBy> {
  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarGuidanceResponseQuerySortThenBy
    on QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QSortThenBy> {
  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarGuidanceResponseQueryWhereDistinct
    on QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QDistinct> {
  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarGuidanceResponseQueryProperty1
    on QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QProperty> {
  QueryBuilder<IsarGuidanceResponse, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGuidanceResponse, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarGuidanceResponse, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarGuidanceResponseQueryProperty2<R>
    on QueryBuilder<IsarGuidanceResponse, R, QAfterProperty> {
  QueryBuilder<IsarGuidanceResponse, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGuidanceResponse, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarGuidanceResponse, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarGuidanceResponseQueryProperty3<R1, R2>
    on QueryBuilder<IsarGuidanceResponse, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarGuidanceResponse, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGuidanceResponse, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarGuidanceResponse, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarHealthcareServiceCollection on Isar {
  IsarCollection<int, IsarHealthcareService> get isarHealthcareServices =>
      this.collection();
}

const IsarHealthcareServiceSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarHealthcareService',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarHealthcareService>(
    serialize: serializeIsarHealthcareService,
    deserialize: deserializeIsarHealthcareService,
    deserializeProperty: deserializeIsarHealthcareServiceProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarHealthcareService(
    IsarWriter writer, IsarHealthcareService object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarHealthcareService deserializeIsarHealthcareService(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarHealthcareService(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarHealthcareServiceProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarHealthcareServiceUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarHealthcareServiceUpdateImpl implements _IsarHealthcareServiceUpdate {
  const _IsarHealthcareServiceUpdateImpl(this.collection);

  final IsarCollection<int, IsarHealthcareService> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarHealthcareServiceUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarHealthcareServiceUpdateAllImpl
    implements _IsarHealthcareServiceUpdateAll {
  const _IsarHealthcareServiceUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarHealthcareService> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarHealthcareServiceUpdate
    on IsarCollection<int, IsarHealthcareService> {
  _IsarHealthcareServiceUpdate get update =>
      _IsarHealthcareServiceUpdateImpl(this);

  _IsarHealthcareServiceUpdateAll get updateAll =>
      _IsarHealthcareServiceUpdateAllImpl(this);
}

sealed class _IsarHealthcareServiceQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarHealthcareServiceQueryUpdateImpl
    implements _IsarHealthcareServiceQueryUpdate {
  const _IsarHealthcareServiceQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarHealthcareService> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarHealthcareServiceQueryUpdate on IsarQuery<IsarHealthcareService> {
  _IsarHealthcareServiceQueryUpdate get updateFirst =>
      _IsarHealthcareServiceQueryUpdateImpl(this, limit: 1);

  _IsarHealthcareServiceQueryUpdate get updateAll =>
      _IsarHealthcareServiceQueryUpdateImpl(this);
}

class _IsarHealthcareServiceQueryBuilderUpdateImpl
    implements _IsarHealthcareServiceQueryUpdate {
  const _IsarHealthcareServiceQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarHealthcareService, IsarHealthcareService, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarHealthcareServiceQueryBuilderUpdate
    on QueryBuilder<IsarHealthcareService, IsarHealthcareService, QOperations> {
  _IsarHealthcareServiceQueryUpdate get updateFirst =>
      _IsarHealthcareServiceQueryBuilderUpdateImpl(this, limit: 1);

  _IsarHealthcareServiceQueryUpdate get updateAll =>
      _IsarHealthcareServiceQueryBuilderUpdateImpl(this);
}

extension IsarHealthcareServiceQueryFilter on QueryBuilder<
    IsarHealthcareService, IsarHealthcareService, QFilterCondition> {
  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarHealthcareServiceQueryObject on QueryBuilder<
    IsarHealthcareService, IsarHealthcareService, QFilterCondition> {}

extension IsarHealthcareServiceQuerySortBy
    on QueryBuilder<IsarHealthcareService, IsarHealthcareService, QSortBy> {
  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarHealthcareServiceQuerySortThenBy
    on QueryBuilder<IsarHealthcareService, IsarHealthcareService, QSortThenBy> {
  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarHealthcareServiceQueryWhereDistinct
    on QueryBuilder<IsarHealthcareService, IsarHealthcareService, QDistinct> {
  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarHealthcareServiceQueryProperty1
    on QueryBuilder<IsarHealthcareService, IsarHealthcareService, QProperty> {
  QueryBuilder<IsarHealthcareService, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarHealthcareService, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarHealthcareService, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarHealthcareServiceQueryProperty2<R>
    on QueryBuilder<IsarHealthcareService, R, QAfterProperty> {
  QueryBuilder<IsarHealthcareService, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarHealthcareService, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarHealthcareService, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarHealthcareServiceQueryProperty3<R1, R2>
    on QueryBuilder<IsarHealthcareService, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarHealthcareService, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarHealthcareService, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarHealthcareService, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarImagingStudyCollection on Isar {
  IsarCollection<int, IsarImagingStudy> get isarImagingStudys =>
      this.collection();
}

const IsarImagingStudySchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarImagingStudy',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarImagingStudy>(
    serialize: serializeIsarImagingStudy,
    deserialize: deserializeIsarImagingStudy,
    deserializeProperty: deserializeIsarImagingStudyProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarImagingStudy(IsarWriter writer, IsarImagingStudy object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarImagingStudy deserializeIsarImagingStudy(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarImagingStudy(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarImagingStudyProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarImagingStudyUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarImagingStudyUpdateImpl implements _IsarImagingStudyUpdate {
  const _IsarImagingStudyUpdateImpl(this.collection);

  final IsarCollection<int, IsarImagingStudy> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarImagingStudyUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarImagingStudyUpdateAllImpl implements _IsarImagingStudyUpdateAll {
  const _IsarImagingStudyUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarImagingStudy> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarImagingStudyUpdate on IsarCollection<int, IsarImagingStudy> {
  _IsarImagingStudyUpdate get update => _IsarImagingStudyUpdateImpl(this);

  _IsarImagingStudyUpdateAll get updateAll =>
      _IsarImagingStudyUpdateAllImpl(this);
}

sealed class _IsarImagingStudyQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarImagingStudyQueryUpdateImpl implements _IsarImagingStudyQueryUpdate {
  const _IsarImagingStudyQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarImagingStudy> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarImagingStudyQueryUpdate on IsarQuery<IsarImagingStudy> {
  _IsarImagingStudyQueryUpdate get updateFirst =>
      _IsarImagingStudyQueryUpdateImpl(this, limit: 1);

  _IsarImagingStudyQueryUpdate get updateAll =>
      _IsarImagingStudyQueryUpdateImpl(this);
}

class _IsarImagingStudyQueryBuilderUpdateImpl
    implements _IsarImagingStudyQueryUpdate {
  const _IsarImagingStudyQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarImagingStudy, IsarImagingStudy, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarImagingStudyQueryBuilderUpdate
    on QueryBuilder<IsarImagingStudy, IsarImagingStudy, QOperations> {
  _IsarImagingStudyQueryUpdate get updateFirst =>
      _IsarImagingStudyQueryBuilderUpdateImpl(this, limit: 1);

  _IsarImagingStudyQueryUpdate get updateAll =>
      _IsarImagingStudyQueryBuilderUpdateImpl(this);
}

extension IsarImagingStudyQueryFilter
    on QueryBuilder<IsarImagingStudy, IsarImagingStudy, QFilterCondition> {
  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarImagingStudyQueryObject
    on QueryBuilder<IsarImagingStudy, IsarImagingStudy, QFilterCondition> {}

extension IsarImagingStudyQuerySortBy
    on QueryBuilder<IsarImagingStudy, IsarImagingStudy, QSortBy> {
  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarImagingStudyQuerySortThenBy
    on QueryBuilder<IsarImagingStudy, IsarImagingStudy, QSortThenBy> {
  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarImagingStudyQueryWhereDistinct
    on QueryBuilder<IsarImagingStudy, IsarImagingStudy, QDistinct> {
  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarImagingStudyQueryProperty1
    on QueryBuilder<IsarImagingStudy, IsarImagingStudy, QProperty> {
  QueryBuilder<IsarImagingStudy, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImagingStudy, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarImagingStudy, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarImagingStudyQueryProperty2<R>
    on QueryBuilder<IsarImagingStudy, R, QAfterProperty> {
  QueryBuilder<IsarImagingStudy, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImagingStudy, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarImagingStudy, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarImagingStudyQueryProperty3<R1, R2>
    on QueryBuilder<IsarImagingStudy, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarImagingStudy, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImagingStudy, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarImagingStudy, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarImmunizationCollection on Isar {
  IsarCollection<int, IsarImmunization> get isarImmunizations =>
      this.collection();
}

const IsarImmunizationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarImmunization',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarImmunization>(
    serialize: serializeIsarImmunization,
    deserialize: deserializeIsarImmunization,
    deserializeProperty: deserializeIsarImmunizationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarImmunization(IsarWriter writer, IsarImmunization object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarImmunization deserializeIsarImmunization(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarImmunization(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarImmunizationProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarImmunizationUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarImmunizationUpdateImpl implements _IsarImmunizationUpdate {
  const _IsarImmunizationUpdateImpl(this.collection);

  final IsarCollection<int, IsarImmunization> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarImmunizationUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarImmunizationUpdateAllImpl implements _IsarImmunizationUpdateAll {
  const _IsarImmunizationUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarImmunization> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarImmunizationUpdate on IsarCollection<int, IsarImmunization> {
  _IsarImmunizationUpdate get update => _IsarImmunizationUpdateImpl(this);

  _IsarImmunizationUpdateAll get updateAll =>
      _IsarImmunizationUpdateAllImpl(this);
}

sealed class _IsarImmunizationQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarImmunizationQueryUpdateImpl implements _IsarImmunizationQueryUpdate {
  const _IsarImmunizationQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarImmunization> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarImmunizationQueryUpdate on IsarQuery<IsarImmunization> {
  _IsarImmunizationQueryUpdate get updateFirst =>
      _IsarImmunizationQueryUpdateImpl(this, limit: 1);

  _IsarImmunizationQueryUpdate get updateAll =>
      _IsarImmunizationQueryUpdateImpl(this);
}

class _IsarImmunizationQueryBuilderUpdateImpl
    implements _IsarImmunizationQueryUpdate {
  const _IsarImmunizationQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarImmunization, IsarImmunization, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarImmunizationQueryBuilderUpdate
    on QueryBuilder<IsarImmunization, IsarImmunization, QOperations> {
  _IsarImmunizationQueryUpdate get updateFirst =>
      _IsarImmunizationQueryBuilderUpdateImpl(this, limit: 1);

  _IsarImmunizationQueryUpdate get updateAll =>
      _IsarImmunizationQueryBuilderUpdateImpl(this);
}

extension IsarImmunizationQueryFilter
    on QueryBuilder<IsarImmunization, IsarImmunization, QFilterCondition> {
  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarImmunizationQueryObject
    on QueryBuilder<IsarImmunization, IsarImmunization, QFilterCondition> {}

extension IsarImmunizationQuerySortBy
    on QueryBuilder<IsarImmunization, IsarImmunization, QSortBy> {
  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarImmunizationQuerySortThenBy
    on QueryBuilder<IsarImmunization, IsarImmunization, QSortThenBy> {
  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarImmunizationQueryWhereDistinct
    on QueryBuilder<IsarImmunization, IsarImmunization, QDistinct> {
  QueryBuilder<IsarImmunization, IsarImmunization, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarImmunizationQueryProperty1
    on QueryBuilder<IsarImmunization, IsarImmunization, QProperty> {
  QueryBuilder<IsarImmunization, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImmunization, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarImmunization, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarImmunizationQueryProperty2<R>
    on QueryBuilder<IsarImmunization, R, QAfterProperty> {
  QueryBuilder<IsarImmunization, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImmunization, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarImmunization, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarImmunizationQueryProperty3<R1, R2>
    on QueryBuilder<IsarImmunization, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarImmunization, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImmunization, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarImmunization, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarImmunizationEvaluationCollection on Isar {
  IsarCollection<int, IsarImmunizationEvaluation>
      get isarImmunizationEvaluations => this.collection();
}

const IsarImmunizationEvaluationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarImmunizationEvaluation',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarImmunizationEvaluation>(
    serialize: serializeIsarImmunizationEvaluation,
    deserialize: deserializeIsarImmunizationEvaluation,
    deserializeProperty: deserializeIsarImmunizationEvaluationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarImmunizationEvaluation(
    IsarWriter writer, IsarImmunizationEvaluation object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarImmunizationEvaluation deserializeIsarImmunizationEvaluation(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarImmunizationEvaluation(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarImmunizationEvaluationProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarImmunizationEvaluationUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarImmunizationEvaluationUpdateImpl
    implements _IsarImmunizationEvaluationUpdate {
  const _IsarImmunizationEvaluationUpdateImpl(this.collection);

  final IsarCollection<int, IsarImmunizationEvaluation> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarImmunizationEvaluationUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarImmunizationEvaluationUpdateAllImpl
    implements _IsarImmunizationEvaluationUpdateAll {
  const _IsarImmunizationEvaluationUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarImmunizationEvaluation> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarImmunizationEvaluationUpdate
    on IsarCollection<int, IsarImmunizationEvaluation> {
  _IsarImmunizationEvaluationUpdate get update =>
      _IsarImmunizationEvaluationUpdateImpl(this);

  _IsarImmunizationEvaluationUpdateAll get updateAll =>
      _IsarImmunizationEvaluationUpdateAllImpl(this);
}

sealed class _IsarImmunizationEvaluationQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarImmunizationEvaluationQueryUpdateImpl
    implements _IsarImmunizationEvaluationQueryUpdate {
  const _IsarImmunizationEvaluationQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarImmunizationEvaluation> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarImmunizationEvaluationQueryUpdate
    on IsarQuery<IsarImmunizationEvaluation> {
  _IsarImmunizationEvaluationQueryUpdate get updateFirst =>
      _IsarImmunizationEvaluationQueryUpdateImpl(this, limit: 1);

  _IsarImmunizationEvaluationQueryUpdate get updateAll =>
      _IsarImmunizationEvaluationQueryUpdateImpl(this);
}

class _IsarImmunizationEvaluationQueryBuilderUpdateImpl
    implements _IsarImmunizationEvaluationQueryUpdate {
  const _IsarImmunizationEvaluationQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarImmunizationEvaluationQueryBuilderUpdate on QueryBuilder<
    IsarImmunizationEvaluation, IsarImmunizationEvaluation, QOperations> {
  _IsarImmunizationEvaluationQueryUpdate get updateFirst =>
      _IsarImmunizationEvaluationQueryBuilderUpdateImpl(this, limit: 1);

  _IsarImmunizationEvaluationQueryUpdate get updateAll =>
      _IsarImmunizationEvaluationQueryBuilderUpdateImpl(this);
}

extension IsarImmunizationEvaluationQueryFilter on QueryBuilder<
    IsarImmunizationEvaluation, IsarImmunizationEvaluation, QFilterCondition> {
  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarImmunizationEvaluationQueryObject on QueryBuilder<
    IsarImmunizationEvaluation, IsarImmunizationEvaluation, QFilterCondition> {}

extension IsarImmunizationEvaluationQuerySortBy on QueryBuilder<
    IsarImmunizationEvaluation, IsarImmunizationEvaluation, QSortBy> {
  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarImmunizationEvaluationQuerySortThenBy on QueryBuilder<
    IsarImmunizationEvaluation, IsarImmunizationEvaluation, QSortThenBy> {
  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarImmunizationEvaluationQueryWhereDistinct on QueryBuilder<
    IsarImmunizationEvaluation, IsarImmunizationEvaluation, QDistinct> {
  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarImmunizationEvaluationQueryProperty1 on QueryBuilder<
    IsarImmunizationEvaluation, IsarImmunizationEvaluation, QProperty> {
  QueryBuilder<IsarImmunizationEvaluation, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarImmunizationEvaluationQueryProperty2<R>
    on QueryBuilder<IsarImmunizationEvaluation, R, QAfterProperty> {
  QueryBuilder<IsarImmunizationEvaluation, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarImmunizationEvaluationQueryProperty3<R1, R2>
    on QueryBuilder<IsarImmunizationEvaluation, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarImmunizationEvaluation, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarImmunizationRecommendationCollection on Isar {
  IsarCollection<int, IsarImmunizationRecommendation>
      get isarImmunizationRecommendations => this.collection();
}

const IsarImmunizationRecommendationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarImmunizationRecommendation',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarImmunizationRecommendation>(
    serialize: serializeIsarImmunizationRecommendation,
    deserialize: deserializeIsarImmunizationRecommendation,
    deserializeProperty: deserializeIsarImmunizationRecommendationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarImmunizationRecommendation(
    IsarWriter writer, IsarImmunizationRecommendation object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarImmunizationRecommendation deserializeIsarImmunizationRecommendation(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarImmunizationRecommendation(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarImmunizationRecommendationProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarImmunizationRecommendationUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarImmunizationRecommendationUpdateImpl
    implements _IsarImmunizationRecommendationUpdate {
  const _IsarImmunizationRecommendationUpdateImpl(this.collection);

  final IsarCollection<int, IsarImmunizationRecommendation> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarImmunizationRecommendationUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarImmunizationRecommendationUpdateAllImpl
    implements _IsarImmunizationRecommendationUpdateAll {
  const _IsarImmunizationRecommendationUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarImmunizationRecommendation> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarImmunizationRecommendationUpdate
    on IsarCollection<int, IsarImmunizationRecommendation> {
  _IsarImmunizationRecommendationUpdate get update =>
      _IsarImmunizationRecommendationUpdateImpl(this);

  _IsarImmunizationRecommendationUpdateAll get updateAll =>
      _IsarImmunizationRecommendationUpdateAllImpl(this);
}

sealed class _IsarImmunizationRecommendationQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarImmunizationRecommendationQueryUpdateImpl
    implements _IsarImmunizationRecommendationQueryUpdate {
  const _IsarImmunizationRecommendationQueryUpdateImpl(this.query,
      {this.limit});

  final IsarQuery<IsarImmunizationRecommendation> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarImmunizationRecommendationQueryUpdate
    on IsarQuery<IsarImmunizationRecommendation> {
  _IsarImmunizationRecommendationQueryUpdate get updateFirst =>
      _IsarImmunizationRecommendationQueryUpdateImpl(this, limit: 1);

  _IsarImmunizationRecommendationQueryUpdate get updateAll =>
      _IsarImmunizationRecommendationQueryUpdateImpl(this);
}

class _IsarImmunizationRecommendationQueryBuilderUpdateImpl
    implements _IsarImmunizationRecommendationQueryUpdate {
  const _IsarImmunizationRecommendationQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarImmunizationRecommendation,
      IsarImmunizationRecommendation, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarImmunizationRecommendationQueryBuilderUpdate on QueryBuilder<
    IsarImmunizationRecommendation,
    IsarImmunizationRecommendation,
    QOperations> {
  _IsarImmunizationRecommendationQueryUpdate get updateFirst =>
      _IsarImmunizationRecommendationQueryBuilderUpdateImpl(this, limit: 1);

  _IsarImmunizationRecommendationQueryUpdate get updateAll =>
      _IsarImmunizationRecommendationQueryBuilderUpdateImpl(this);
}

extension IsarImmunizationRecommendationQueryFilter on QueryBuilder<
    IsarImmunizationRecommendation,
    IsarImmunizationRecommendation,
    QFilterCondition> {
  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarImmunizationRecommendationQueryObject on QueryBuilder<
    IsarImmunizationRecommendation,
    IsarImmunizationRecommendation,
    QFilterCondition> {}

extension IsarImmunizationRecommendationQuerySortBy on QueryBuilder<
    IsarImmunizationRecommendation, IsarImmunizationRecommendation, QSortBy> {
  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarImmunizationRecommendationQuerySortThenBy on QueryBuilder<
    IsarImmunizationRecommendation,
    IsarImmunizationRecommendation,
    QSortThenBy> {
  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarImmunizationRecommendationQueryWhereDistinct on QueryBuilder<
    IsarImmunizationRecommendation, IsarImmunizationRecommendation, QDistinct> {
  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarImmunizationRecommendationQueryProperty1 on QueryBuilder<
    IsarImmunizationRecommendation, IsarImmunizationRecommendation, QProperty> {
  QueryBuilder<IsarImmunizationRecommendation, int, QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, Map<String, dynamic>,
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarImmunizationRecommendationQueryProperty2<R>
    on QueryBuilder<IsarImmunizationRecommendation, R, QAfterProperty> {
  QueryBuilder<IsarImmunizationRecommendation, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarImmunizationRecommendationQueryProperty3<R1, R2>
    on QueryBuilder<IsarImmunizationRecommendation, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarImmunizationRecommendation, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarImplementationGuideCollection on Isar {
  IsarCollection<int, IsarImplementationGuide> get isarImplementationGuides =>
      this.collection();
}

const IsarImplementationGuideSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarImplementationGuide',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarImplementationGuide>(
    serialize: serializeIsarImplementationGuide,
    deserialize: deserializeIsarImplementationGuide,
    deserializeProperty: deserializeIsarImplementationGuideProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarImplementationGuide(
    IsarWriter writer, IsarImplementationGuide object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarImplementationGuide deserializeIsarImplementationGuide(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarImplementationGuide(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarImplementationGuideProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarImplementationGuideUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarImplementationGuideUpdateImpl
    implements _IsarImplementationGuideUpdate {
  const _IsarImplementationGuideUpdateImpl(this.collection);

  final IsarCollection<int, IsarImplementationGuide> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarImplementationGuideUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarImplementationGuideUpdateAllImpl
    implements _IsarImplementationGuideUpdateAll {
  const _IsarImplementationGuideUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarImplementationGuide> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarImplementationGuideUpdate
    on IsarCollection<int, IsarImplementationGuide> {
  _IsarImplementationGuideUpdate get update =>
      _IsarImplementationGuideUpdateImpl(this);

  _IsarImplementationGuideUpdateAll get updateAll =>
      _IsarImplementationGuideUpdateAllImpl(this);
}

sealed class _IsarImplementationGuideQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarImplementationGuideQueryUpdateImpl
    implements _IsarImplementationGuideQueryUpdate {
  const _IsarImplementationGuideQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarImplementationGuide> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarImplementationGuideQueryUpdate
    on IsarQuery<IsarImplementationGuide> {
  _IsarImplementationGuideQueryUpdate get updateFirst =>
      _IsarImplementationGuideQueryUpdateImpl(this, limit: 1);

  _IsarImplementationGuideQueryUpdate get updateAll =>
      _IsarImplementationGuideQueryUpdateImpl(this);
}

class _IsarImplementationGuideQueryBuilderUpdateImpl
    implements _IsarImplementationGuideQueryUpdate {
  const _IsarImplementationGuideQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarImplementationGuideQueryBuilderUpdate on QueryBuilder<
    IsarImplementationGuide, IsarImplementationGuide, QOperations> {
  _IsarImplementationGuideQueryUpdate get updateFirst =>
      _IsarImplementationGuideQueryBuilderUpdateImpl(this, limit: 1);

  _IsarImplementationGuideQueryUpdate get updateAll =>
      _IsarImplementationGuideQueryBuilderUpdateImpl(this);
}

extension IsarImplementationGuideQueryFilter on QueryBuilder<
    IsarImplementationGuide, IsarImplementationGuide, QFilterCondition> {
  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarImplementationGuideQueryObject on QueryBuilder<
    IsarImplementationGuide, IsarImplementationGuide, QFilterCondition> {}

extension IsarImplementationGuideQuerySortBy
    on QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QSortBy> {
  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarImplementationGuideQuerySortThenBy on QueryBuilder<
    IsarImplementationGuide, IsarImplementationGuide, QSortThenBy> {
  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarImplementationGuideQueryWhereDistinct on QueryBuilder<
    IsarImplementationGuide, IsarImplementationGuide, QDistinct> {
  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarImplementationGuideQueryProperty1 on QueryBuilder<
    IsarImplementationGuide, IsarImplementationGuide, QProperty> {
  QueryBuilder<IsarImplementationGuide, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImplementationGuide, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarImplementationGuide, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarImplementationGuideQueryProperty2<R>
    on QueryBuilder<IsarImplementationGuide, R, QAfterProperty> {
  QueryBuilder<IsarImplementationGuide, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImplementationGuide, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarImplementationGuide, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarImplementationGuideQueryProperty3<R1, R2>
    on QueryBuilder<IsarImplementationGuide, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarImplementationGuide, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImplementationGuide, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarImplementationGuide, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarIngredientCollection on Isar {
  IsarCollection<int, IsarIngredient> get isarIngredients => this.collection();
}

const IsarIngredientSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarIngredient',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarIngredient>(
    serialize: serializeIsarIngredient,
    deserialize: deserializeIsarIngredient,
    deserializeProperty: deserializeIsarIngredientProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarIngredient(IsarWriter writer, IsarIngredient object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarIngredient deserializeIsarIngredient(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarIngredient(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarIngredientProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarIngredientUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarIngredientUpdateImpl implements _IsarIngredientUpdate {
  const _IsarIngredientUpdateImpl(this.collection);

  final IsarCollection<int, IsarIngredient> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarIngredientUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarIngredientUpdateAllImpl implements _IsarIngredientUpdateAll {
  const _IsarIngredientUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarIngredient> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarIngredientUpdate on IsarCollection<int, IsarIngredient> {
  _IsarIngredientUpdate get update => _IsarIngredientUpdateImpl(this);

  _IsarIngredientUpdateAll get updateAll => _IsarIngredientUpdateAllImpl(this);
}

sealed class _IsarIngredientQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarIngredientQueryUpdateImpl implements _IsarIngredientQueryUpdate {
  const _IsarIngredientQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarIngredient> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarIngredientQueryUpdate on IsarQuery<IsarIngredient> {
  _IsarIngredientQueryUpdate get updateFirst =>
      _IsarIngredientQueryUpdateImpl(this, limit: 1);

  _IsarIngredientQueryUpdate get updateAll =>
      _IsarIngredientQueryUpdateImpl(this);
}

class _IsarIngredientQueryBuilderUpdateImpl
    implements _IsarIngredientQueryUpdate {
  const _IsarIngredientQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarIngredient, IsarIngredient, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarIngredientQueryBuilderUpdate
    on QueryBuilder<IsarIngredient, IsarIngredient, QOperations> {
  _IsarIngredientQueryUpdate get updateFirst =>
      _IsarIngredientQueryBuilderUpdateImpl(this, limit: 1);

  _IsarIngredientQueryUpdate get updateAll =>
      _IsarIngredientQueryBuilderUpdateImpl(this);
}

extension IsarIngredientQueryFilter
    on QueryBuilder<IsarIngredient, IsarIngredient, QFilterCondition> {
  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarIngredientQueryObject
    on QueryBuilder<IsarIngredient, IsarIngredient, QFilterCondition> {}

extension IsarIngredientQuerySortBy
    on QueryBuilder<IsarIngredient, IsarIngredient, QSortBy> {
  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarIngredientQuerySortThenBy
    on QueryBuilder<IsarIngredient, IsarIngredient, QSortThenBy> {
  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarIngredientQueryWhereDistinct
    on QueryBuilder<IsarIngredient, IsarIngredient, QDistinct> {
  QueryBuilder<IsarIngredient, IsarIngredient, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarIngredientQueryProperty1
    on QueryBuilder<IsarIngredient, IsarIngredient, QProperty> {
  QueryBuilder<IsarIngredient, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarIngredient, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarIngredient, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarIngredientQueryProperty2<R>
    on QueryBuilder<IsarIngredient, R, QAfterProperty> {
  QueryBuilder<IsarIngredient, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarIngredient, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarIngredient, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarIngredientQueryProperty3<R1, R2>
    on QueryBuilder<IsarIngredient, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarIngredient, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarIngredient, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarIngredient, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarInsurancePlanCollection on Isar {
  IsarCollection<int, IsarInsurancePlan> get isarInsurancePlans =>
      this.collection();
}

const IsarInsurancePlanSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarInsurancePlan',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarInsurancePlan>(
    serialize: serializeIsarInsurancePlan,
    deserialize: deserializeIsarInsurancePlan,
    deserializeProperty: deserializeIsarInsurancePlanProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarInsurancePlan(IsarWriter writer, IsarInsurancePlan object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarInsurancePlan deserializeIsarInsurancePlan(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarInsurancePlan(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarInsurancePlanProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarInsurancePlanUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarInsurancePlanUpdateImpl implements _IsarInsurancePlanUpdate {
  const _IsarInsurancePlanUpdateImpl(this.collection);

  final IsarCollection<int, IsarInsurancePlan> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarInsurancePlanUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarInsurancePlanUpdateAllImpl implements _IsarInsurancePlanUpdateAll {
  const _IsarInsurancePlanUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarInsurancePlan> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarInsurancePlanUpdate on IsarCollection<int, IsarInsurancePlan> {
  _IsarInsurancePlanUpdate get update => _IsarInsurancePlanUpdateImpl(this);

  _IsarInsurancePlanUpdateAll get updateAll =>
      _IsarInsurancePlanUpdateAllImpl(this);
}

sealed class _IsarInsurancePlanQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarInsurancePlanQueryUpdateImpl
    implements _IsarInsurancePlanQueryUpdate {
  const _IsarInsurancePlanQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarInsurancePlan> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarInsurancePlanQueryUpdate on IsarQuery<IsarInsurancePlan> {
  _IsarInsurancePlanQueryUpdate get updateFirst =>
      _IsarInsurancePlanQueryUpdateImpl(this, limit: 1);

  _IsarInsurancePlanQueryUpdate get updateAll =>
      _IsarInsurancePlanQueryUpdateImpl(this);
}

class _IsarInsurancePlanQueryBuilderUpdateImpl
    implements _IsarInsurancePlanQueryUpdate {
  const _IsarInsurancePlanQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarInsurancePlanQueryBuilderUpdate
    on QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QOperations> {
  _IsarInsurancePlanQueryUpdate get updateFirst =>
      _IsarInsurancePlanQueryBuilderUpdateImpl(this, limit: 1);

  _IsarInsurancePlanQueryUpdate get updateAll =>
      _IsarInsurancePlanQueryBuilderUpdateImpl(this);
}

extension IsarInsurancePlanQueryFilter
    on QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QFilterCondition> {
  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarInsurancePlanQueryObject
    on QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QFilterCondition> {}

extension IsarInsurancePlanQuerySortBy
    on QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QSortBy> {
  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarInsurancePlanQuerySortThenBy
    on QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QSortThenBy> {
  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarInsurancePlanQueryWhereDistinct
    on QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QDistinct> {
  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarInsurancePlanQueryProperty1
    on QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QProperty> {
  QueryBuilder<IsarInsurancePlan, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarInsurancePlan, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarInsurancePlan, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarInsurancePlanQueryProperty2<R>
    on QueryBuilder<IsarInsurancePlan, R, QAfterProperty> {
  QueryBuilder<IsarInsurancePlan, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarInsurancePlan, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarInsurancePlan, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarInsurancePlanQueryProperty3<R1, R2>
    on QueryBuilder<IsarInsurancePlan, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarInsurancePlan, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarInsurancePlan, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarInsurancePlan, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarInvoiceCollection on Isar {
  IsarCollection<int, IsarInvoice> get isarInvoices => this.collection();
}

const IsarInvoiceSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarInvoice',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarInvoice>(
    serialize: serializeIsarInvoice,
    deserialize: deserializeIsarInvoice,
    deserializeProperty: deserializeIsarInvoiceProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarInvoice(IsarWriter writer, IsarInvoice object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarInvoice deserializeIsarInvoice(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarInvoice(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarInvoiceProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarInvoiceUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarInvoiceUpdateImpl implements _IsarInvoiceUpdate {
  const _IsarInvoiceUpdateImpl(this.collection);

  final IsarCollection<int, IsarInvoice> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarInvoiceUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarInvoiceUpdateAllImpl implements _IsarInvoiceUpdateAll {
  const _IsarInvoiceUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarInvoice> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarInvoiceUpdate on IsarCollection<int, IsarInvoice> {
  _IsarInvoiceUpdate get update => _IsarInvoiceUpdateImpl(this);

  _IsarInvoiceUpdateAll get updateAll => _IsarInvoiceUpdateAllImpl(this);
}

sealed class _IsarInvoiceQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarInvoiceQueryUpdateImpl implements _IsarInvoiceQueryUpdate {
  const _IsarInvoiceQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarInvoice> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarInvoiceQueryUpdate on IsarQuery<IsarInvoice> {
  _IsarInvoiceQueryUpdate get updateFirst =>
      _IsarInvoiceQueryUpdateImpl(this, limit: 1);

  _IsarInvoiceQueryUpdate get updateAll => _IsarInvoiceQueryUpdateImpl(this);
}

class _IsarInvoiceQueryBuilderUpdateImpl implements _IsarInvoiceQueryUpdate {
  const _IsarInvoiceQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarInvoice, IsarInvoice, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarInvoiceQueryBuilderUpdate
    on QueryBuilder<IsarInvoice, IsarInvoice, QOperations> {
  _IsarInvoiceQueryUpdate get updateFirst =>
      _IsarInvoiceQueryBuilderUpdateImpl(this, limit: 1);

  _IsarInvoiceQueryUpdate get updateAll =>
      _IsarInvoiceQueryBuilderUpdateImpl(this);
}

extension IsarInvoiceQueryFilter
    on QueryBuilder<IsarInvoice, IsarInvoice, QFilterCondition> {
  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarInvoiceQueryObject
    on QueryBuilder<IsarInvoice, IsarInvoice, QFilterCondition> {}

extension IsarInvoiceQuerySortBy
    on QueryBuilder<IsarInvoice, IsarInvoice, QSortBy> {
  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarInvoiceQuerySortThenBy
    on QueryBuilder<IsarInvoice, IsarInvoice, QSortThenBy> {
  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarInvoiceQueryWhereDistinct
    on QueryBuilder<IsarInvoice, IsarInvoice, QDistinct> {
  QueryBuilder<IsarInvoice, IsarInvoice, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarInvoiceQueryProperty1
    on QueryBuilder<IsarInvoice, IsarInvoice, QProperty> {
  QueryBuilder<IsarInvoice, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarInvoice, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarInvoice, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarInvoiceQueryProperty2<R>
    on QueryBuilder<IsarInvoice, R, QAfterProperty> {
  QueryBuilder<IsarInvoice, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarInvoice, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarInvoice, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarInvoiceQueryProperty3<R1, R2>
    on QueryBuilder<IsarInvoice, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarInvoice, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarInvoice, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarInvoice, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarLibraryCollection on Isar {
  IsarCollection<int, IsarLibrary> get isarLibrarys => this.collection();
}

const IsarLibrarySchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarLibrary',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarLibrary>(
    serialize: serializeIsarLibrary,
    deserialize: deserializeIsarLibrary,
    deserializeProperty: deserializeIsarLibraryProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarLibrary(IsarWriter writer, IsarLibrary object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarLibrary deserializeIsarLibrary(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarLibrary(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarLibraryProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarLibraryUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarLibraryUpdateImpl implements _IsarLibraryUpdate {
  const _IsarLibraryUpdateImpl(this.collection);

  final IsarCollection<int, IsarLibrary> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarLibraryUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarLibraryUpdateAllImpl implements _IsarLibraryUpdateAll {
  const _IsarLibraryUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarLibrary> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarLibraryUpdate on IsarCollection<int, IsarLibrary> {
  _IsarLibraryUpdate get update => _IsarLibraryUpdateImpl(this);

  _IsarLibraryUpdateAll get updateAll => _IsarLibraryUpdateAllImpl(this);
}

sealed class _IsarLibraryQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarLibraryQueryUpdateImpl implements _IsarLibraryQueryUpdate {
  const _IsarLibraryQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarLibrary> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarLibraryQueryUpdate on IsarQuery<IsarLibrary> {
  _IsarLibraryQueryUpdate get updateFirst =>
      _IsarLibraryQueryUpdateImpl(this, limit: 1);

  _IsarLibraryQueryUpdate get updateAll => _IsarLibraryQueryUpdateImpl(this);
}

class _IsarLibraryQueryBuilderUpdateImpl implements _IsarLibraryQueryUpdate {
  const _IsarLibraryQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarLibrary, IsarLibrary, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarLibraryQueryBuilderUpdate
    on QueryBuilder<IsarLibrary, IsarLibrary, QOperations> {
  _IsarLibraryQueryUpdate get updateFirst =>
      _IsarLibraryQueryBuilderUpdateImpl(this, limit: 1);

  _IsarLibraryQueryUpdate get updateAll =>
      _IsarLibraryQueryBuilderUpdateImpl(this);
}

extension IsarLibraryQueryFilter
    on QueryBuilder<IsarLibrary, IsarLibrary, QFilterCondition> {
  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarLibraryQueryObject
    on QueryBuilder<IsarLibrary, IsarLibrary, QFilterCondition> {}

extension IsarLibraryQuerySortBy
    on QueryBuilder<IsarLibrary, IsarLibrary, QSortBy> {
  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarLibraryQuerySortThenBy
    on QueryBuilder<IsarLibrary, IsarLibrary, QSortThenBy> {
  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarLibraryQueryWhereDistinct
    on QueryBuilder<IsarLibrary, IsarLibrary, QDistinct> {
  QueryBuilder<IsarLibrary, IsarLibrary, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarLibraryQueryProperty1
    on QueryBuilder<IsarLibrary, IsarLibrary, QProperty> {
  QueryBuilder<IsarLibrary, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarLibrary, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarLibrary, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarLibraryQueryProperty2<R>
    on QueryBuilder<IsarLibrary, R, QAfterProperty> {
  QueryBuilder<IsarLibrary, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarLibrary, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarLibrary, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarLibraryQueryProperty3<R1, R2>
    on QueryBuilder<IsarLibrary, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarLibrary, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarLibrary, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarLibrary, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarLinkageCollection on Isar {
  IsarCollection<int, IsarLinkage> get isarLinkages => this.collection();
}

const IsarLinkageSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarLinkage',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarLinkage>(
    serialize: serializeIsarLinkage,
    deserialize: deserializeIsarLinkage,
    deserializeProperty: deserializeIsarLinkageProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarLinkage(IsarWriter writer, IsarLinkage object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarLinkage deserializeIsarLinkage(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarLinkage(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarLinkageProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarLinkageUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarLinkageUpdateImpl implements _IsarLinkageUpdate {
  const _IsarLinkageUpdateImpl(this.collection);

  final IsarCollection<int, IsarLinkage> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarLinkageUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarLinkageUpdateAllImpl implements _IsarLinkageUpdateAll {
  const _IsarLinkageUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarLinkage> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarLinkageUpdate on IsarCollection<int, IsarLinkage> {
  _IsarLinkageUpdate get update => _IsarLinkageUpdateImpl(this);

  _IsarLinkageUpdateAll get updateAll => _IsarLinkageUpdateAllImpl(this);
}

sealed class _IsarLinkageQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarLinkageQueryUpdateImpl implements _IsarLinkageQueryUpdate {
  const _IsarLinkageQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarLinkage> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarLinkageQueryUpdate on IsarQuery<IsarLinkage> {
  _IsarLinkageQueryUpdate get updateFirst =>
      _IsarLinkageQueryUpdateImpl(this, limit: 1);

  _IsarLinkageQueryUpdate get updateAll => _IsarLinkageQueryUpdateImpl(this);
}

class _IsarLinkageQueryBuilderUpdateImpl implements _IsarLinkageQueryUpdate {
  const _IsarLinkageQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarLinkage, IsarLinkage, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarLinkageQueryBuilderUpdate
    on QueryBuilder<IsarLinkage, IsarLinkage, QOperations> {
  _IsarLinkageQueryUpdate get updateFirst =>
      _IsarLinkageQueryBuilderUpdateImpl(this, limit: 1);

  _IsarLinkageQueryUpdate get updateAll =>
      _IsarLinkageQueryBuilderUpdateImpl(this);
}

extension IsarLinkageQueryFilter
    on QueryBuilder<IsarLinkage, IsarLinkage, QFilterCondition> {
  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarLinkageQueryObject
    on QueryBuilder<IsarLinkage, IsarLinkage, QFilterCondition> {}

extension IsarLinkageQuerySortBy
    on QueryBuilder<IsarLinkage, IsarLinkage, QSortBy> {
  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarLinkageQuerySortThenBy
    on QueryBuilder<IsarLinkage, IsarLinkage, QSortThenBy> {
  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarLinkageQueryWhereDistinct
    on QueryBuilder<IsarLinkage, IsarLinkage, QDistinct> {
  QueryBuilder<IsarLinkage, IsarLinkage, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarLinkageQueryProperty1
    on QueryBuilder<IsarLinkage, IsarLinkage, QProperty> {
  QueryBuilder<IsarLinkage, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarLinkage, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarLinkage, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarLinkageQueryProperty2<R>
    on QueryBuilder<IsarLinkage, R, QAfterProperty> {
  QueryBuilder<IsarLinkage, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarLinkage, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarLinkage, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarLinkageQueryProperty3<R1, R2>
    on QueryBuilder<IsarLinkage, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarLinkage, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarLinkage, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarLinkage, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarListCollection on Isar {
  IsarCollection<int, IsarList> get isarLists => this.collection();
}

const IsarListSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarList',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarList>(
    serialize: serializeIsarList,
    deserialize: deserializeIsarList,
    deserializeProperty: deserializeIsarListProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarList(IsarWriter writer, IsarList object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarList deserializeIsarList(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarList(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarListProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarListUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarListUpdateImpl implements _IsarListUpdate {
  const _IsarListUpdateImpl(this.collection);

  final IsarCollection<int, IsarList> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarListUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarListUpdateAllImpl implements _IsarListUpdateAll {
  const _IsarListUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarList> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarListUpdate on IsarCollection<int, IsarList> {
  _IsarListUpdate get update => _IsarListUpdateImpl(this);

  _IsarListUpdateAll get updateAll => _IsarListUpdateAllImpl(this);
}

sealed class _IsarListQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarListQueryUpdateImpl implements _IsarListQueryUpdate {
  const _IsarListQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarList> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarListQueryUpdate on IsarQuery<IsarList> {
  _IsarListQueryUpdate get updateFirst =>
      _IsarListQueryUpdateImpl(this, limit: 1);

  _IsarListQueryUpdate get updateAll => _IsarListQueryUpdateImpl(this);
}

class _IsarListQueryBuilderUpdateImpl implements _IsarListQueryUpdate {
  const _IsarListQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarList, IsarList, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarListQueryBuilderUpdate
    on QueryBuilder<IsarList, IsarList, QOperations> {
  _IsarListQueryUpdate get updateFirst =>
      _IsarListQueryBuilderUpdateImpl(this, limit: 1);

  _IsarListQueryUpdate get updateAll => _IsarListQueryBuilderUpdateImpl(this);
}

extension IsarListQueryFilter
    on QueryBuilder<IsarList, IsarList, QFilterCondition> {
  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarListQueryObject
    on QueryBuilder<IsarList, IsarList, QFilterCondition> {}

extension IsarListQuerySortBy on QueryBuilder<IsarList, IsarList, QSortBy> {
  QueryBuilder<IsarList, IsarList, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarListQuerySortThenBy
    on QueryBuilder<IsarList, IsarList, QSortThenBy> {
  QueryBuilder<IsarList, IsarList, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarListQueryWhereDistinct
    on QueryBuilder<IsarList, IsarList, QDistinct> {
  QueryBuilder<IsarList, IsarList, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarListQueryProperty1
    on QueryBuilder<IsarList, IsarList, QProperty> {
  QueryBuilder<IsarList, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarList, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarList, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarListQueryProperty2<R>
    on QueryBuilder<IsarList, R, QAfterProperty> {
  QueryBuilder<IsarList, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarList, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarList, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarListQueryProperty3<R1, R2>
    on QueryBuilder<IsarList, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarList, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarList, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarList, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarLocationCollection on Isar {
  IsarCollection<int, IsarLocation> get isarLocations => this.collection();
}

const IsarLocationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarLocation',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarLocation>(
    serialize: serializeIsarLocation,
    deserialize: deserializeIsarLocation,
    deserializeProperty: deserializeIsarLocationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarLocation(IsarWriter writer, IsarLocation object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarLocation deserializeIsarLocation(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarLocation(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarLocationProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarLocationUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarLocationUpdateImpl implements _IsarLocationUpdate {
  const _IsarLocationUpdateImpl(this.collection);

  final IsarCollection<int, IsarLocation> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarLocationUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarLocationUpdateAllImpl implements _IsarLocationUpdateAll {
  const _IsarLocationUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarLocation> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarLocationUpdate on IsarCollection<int, IsarLocation> {
  _IsarLocationUpdate get update => _IsarLocationUpdateImpl(this);

  _IsarLocationUpdateAll get updateAll => _IsarLocationUpdateAllImpl(this);
}

sealed class _IsarLocationQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarLocationQueryUpdateImpl implements _IsarLocationQueryUpdate {
  const _IsarLocationQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarLocation> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarLocationQueryUpdate on IsarQuery<IsarLocation> {
  _IsarLocationQueryUpdate get updateFirst =>
      _IsarLocationQueryUpdateImpl(this, limit: 1);

  _IsarLocationQueryUpdate get updateAll => _IsarLocationQueryUpdateImpl(this);
}

class _IsarLocationQueryBuilderUpdateImpl implements _IsarLocationQueryUpdate {
  const _IsarLocationQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarLocation, IsarLocation, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarLocationQueryBuilderUpdate
    on QueryBuilder<IsarLocation, IsarLocation, QOperations> {
  _IsarLocationQueryUpdate get updateFirst =>
      _IsarLocationQueryBuilderUpdateImpl(this, limit: 1);

  _IsarLocationQueryUpdate get updateAll =>
      _IsarLocationQueryBuilderUpdateImpl(this);
}

extension IsarLocationQueryFilter
    on QueryBuilder<IsarLocation, IsarLocation, QFilterCondition> {
  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarLocationQueryObject
    on QueryBuilder<IsarLocation, IsarLocation, QFilterCondition> {}

extension IsarLocationQuerySortBy
    on QueryBuilder<IsarLocation, IsarLocation, QSortBy> {
  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarLocationQuerySortThenBy
    on QueryBuilder<IsarLocation, IsarLocation, QSortThenBy> {
  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarLocationQueryWhereDistinct
    on QueryBuilder<IsarLocation, IsarLocation, QDistinct> {
  QueryBuilder<IsarLocation, IsarLocation, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarLocationQueryProperty1
    on QueryBuilder<IsarLocation, IsarLocation, QProperty> {
  QueryBuilder<IsarLocation, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarLocation, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarLocation, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarLocationQueryProperty2<R>
    on QueryBuilder<IsarLocation, R, QAfterProperty> {
  QueryBuilder<IsarLocation, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarLocation, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarLocation, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarLocationQueryProperty3<R1, R2>
    on QueryBuilder<IsarLocation, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarLocation, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarLocation, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarLocation, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarManufacturedItemDefinitionCollection on Isar {
  IsarCollection<int, IsarManufacturedItemDefinition>
      get isarManufacturedItemDefinitions => this.collection();
}

const IsarManufacturedItemDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarManufacturedItemDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarManufacturedItemDefinition>(
    serialize: serializeIsarManufacturedItemDefinition,
    deserialize: deserializeIsarManufacturedItemDefinition,
    deserializeProperty: deserializeIsarManufacturedItemDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarManufacturedItemDefinition(
    IsarWriter writer, IsarManufacturedItemDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarManufacturedItemDefinition deserializeIsarManufacturedItemDefinition(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarManufacturedItemDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarManufacturedItemDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarManufacturedItemDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarManufacturedItemDefinitionUpdateImpl
    implements _IsarManufacturedItemDefinitionUpdate {
  const _IsarManufacturedItemDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarManufacturedItemDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarManufacturedItemDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarManufacturedItemDefinitionUpdateAllImpl
    implements _IsarManufacturedItemDefinitionUpdateAll {
  const _IsarManufacturedItemDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarManufacturedItemDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarManufacturedItemDefinitionUpdate
    on IsarCollection<int, IsarManufacturedItemDefinition> {
  _IsarManufacturedItemDefinitionUpdate get update =>
      _IsarManufacturedItemDefinitionUpdateImpl(this);

  _IsarManufacturedItemDefinitionUpdateAll get updateAll =>
      _IsarManufacturedItemDefinitionUpdateAllImpl(this);
}

sealed class _IsarManufacturedItemDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarManufacturedItemDefinitionQueryUpdateImpl
    implements _IsarManufacturedItemDefinitionQueryUpdate {
  const _IsarManufacturedItemDefinitionQueryUpdateImpl(this.query,
      {this.limit});

  final IsarQuery<IsarManufacturedItemDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarManufacturedItemDefinitionQueryUpdate
    on IsarQuery<IsarManufacturedItemDefinition> {
  _IsarManufacturedItemDefinitionQueryUpdate get updateFirst =>
      _IsarManufacturedItemDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarManufacturedItemDefinitionQueryUpdate get updateAll =>
      _IsarManufacturedItemDefinitionQueryUpdateImpl(this);
}

class _IsarManufacturedItemDefinitionQueryBuilderUpdateImpl
    implements _IsarManufacturedItemDefinitionQueryUpdate {
  const _IsarManufacturedItemDefinitionQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarManufacturedItemDefinition,
      IsarManufacturedItemDefinition, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarManufacturedItemDefinitionQueryBuilderUpdate on QueryBuilder<
    IsarManufacturedItemDefinition,
    IsarManufacturedItemDefinition,
    QOperations> {
  _IsarManufacturedItemDefinitionQueryUpdate get updateFirst =>
      _IsarManufacturedItemDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarManufacturedItemDefinitionQueryUpdate get updateAll =>
      _IsarManufacturedItemDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarManufacturedItemDefinitionQueryFilter on QueryBuilder<
    IsarManufacturedItemDefinition,
    IsarManufacturedItemDefinition,
    QFilterCondition> {
  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarManufacturedItemDefinitionQueryObject on QueryBuilder<
    IsarManufacturedItemDefinition,
    IsarManufacturedItemDefinition,
    QFilterCondition> {}

extension IsarManufacturedItemDefinitionQuerySortBy on QueryBuilder<
    IsarManufacturedItemDefinition, IsarManufacturedItemDefinition, QSortBy> {
  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarManufacturedItemDefinitionQuerySortThenBy on QueryBuilder<
    IsarManufacturedItemDefinition,
    IsarManufacturedItemDefinition,
    QSortThenBy> {
  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarManufacturedItemDefinitionQueryWhereDistinct on QueryBuilder<
    IsarManufacturedItemDefinition, IsarManufacturedItemDefinition, QDistinct> {
  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarManufacturedItemDefinitionQueryProperty1 on QueryBuilder<
    IsarManufacturedItemDefinition, IsarManufacturedItemDefinition, QProperty> {
  QueryBuilder<IsarManufacturedItemDefinition, int, QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, Map<String, dynamic>,
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarManufacturedItemDefinitionQueryProperty2<R>
    on QueryBuilder<IsarManufacturedItemDefinition, R, QAfterProperty> {
  QueryBuilder<IsarManufacturedItemDefinition, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarManufacturedItemDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarManufacturedItemDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarManufacturedItemDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMeasureCollection on Isar {
  IsarCollection<int, IsarMeasure> get isarMeasures => this.collection();
}

const IsarMeasureSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMeasure',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarMeasure>(
    serialize: serializeIsarMeasure,
    deserialize: deserializeIsarMeasure,
    deserializeProperty: deserializeIsarMeasureProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMeasure(IsarWriter writer, IsarMeasure object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarMeasure deserializeIsarMeasure(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarMeasure(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarMeasureProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarMeasureUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarMeasureUpdateImpl implements _IsarMeasureUpdate {
  const _IsarMeasureUpdateImpl(this.collection);

  final IsarCollection<int, IsarMeasure> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarMeasureUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarMeasureUpdateAllImpl implements _IsarMeasureUpdateAll {
  const _IsarMeasureUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarMeasure> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMeasureUpdate on IsarCollection<int, IsarMeasure> {
  _IsarMeasureUpdate get update => _IsarMeasureUpdateImpl(this);

  _IsarMeasureUpdateAll get updateAll => _IsarMeasureUpdateAllImpl(this);
}

sealed class _IsarMeasureQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarMeasureQueryUpdateImpl implements _IsarMeasureQueryUpdate {
  const _IsarMeasureQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarMeasure> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMeasureQueryUpdate on IsarQuery<IsarMeasure> {
  _IsarMeasureQueryUpdate get updateFirst =>
      _IsarMeasureQueryUpdateImpl(this, limit: 1);

  _IsarMeasureQueryUpdate get updateAll => _IsarMeasureQueryUpdateImpl(this);
}

class _IsarMeasureQueryBuilderUpdateImpl implements _IsarMeasureQueryUpdate {
  const _IsarMeasureQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarMeasure, IsarMeasure, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarMeasureQueryBuilderUpdate
    on QueryBuilder<IsarMeasure, IsarMeasure, QOperations> {
  _IsarMeasureQueryUpdate get updateFirst =>
      _IsarMeasureQueryBuilderUpdateImpl(this, limit: 1);

  _IsarMeasureQueryUpdate get updateAll =>
      _IsarMeasureQueryBuilderUpdateImpl(this);
}

extension IsarMeasureQueryFilter
    on QueryBuilder<IsarMeasure, IsarMeasure, QFilterCondition> {
  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarMeasureQueryObject
    on QueryBuilder<IsarMeasure, IsarMeasure, QFilterCondition> {}

extension IsarMeasureQuerySortBy
    on QueryBuilder<IsarMeasure, IsarMeasure, QSortBy> {
  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMeasureQuerySortThenBy
    on QueryBuilder<IsarMeasure, IsarMeasure, QSortThenBy> {
  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMeasureQueryWhereDistinct
    on QueryBuilder<IsarMeasure, IsarMeasure, QDistinct> {
  QueryBuilder<IsarMeasure, IsarMeasure, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarMeasureQueryProperty1
    on QueryBuilder<IsarMeasure, IsarMeasure, QProperty> {
  QueryBuilder<IsarMeasure, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMeasure, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMeasure, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMeasureQueryProperty2<R>
    on QueryBuilder<IsarMeasure, R, QAfterProperty> {
  QueryBuilder<IsarMeasure, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMeasure, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMeasure, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMeasureQueryProperty3<R1, R2>
    on QueryBuilder<IsarMeasure, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMeasure, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMeasure, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMeasure, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMeasureReportCollection on Isar {
  IsarCollection<int, IsarMeasureReport> get isarMeasureReports =>
      this.collection();
}

const IsarMeasureReportSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMeasureReport',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarMeasureReport>(
    serialize: serializeIsarMeasureReport,
    deserialize: deserializeIsarMeasureReport,
    deserializeProperty: deserializeIsarMeasureReportProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMeasureReport(IsarWriter writer, IsarMeasureReport object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarMeasureReport deserializeIsarMeasureReport(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarMeasureReport(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarMeasureReportProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarMeasureReportUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarMeasureReportUpdateImpl implements _IsarMeasureReportUpdate {
  const _IsarMeasureReportUpdateImpl(this.collection);

  final IsarCollection<int, IsarMeasureReport> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarMeasureReportUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarMeasureReportUpdateAllImpl implements _IsarMeasureReportUpdateAll {
  const _IsarMeasureReportUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarMeasureReport> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMeasureReportUpdate on IsarCollection<int, IsarMeasureReport> {
  _IsarMeasureReportUpdate get update => _IsarMeasureReportUpdateImpl(this);

  _IsarMeasureReportUpdateAll get updateAll =>
      _IsarMeasureReportUpdateAllImpl(this);
}

sealed class _IsarMeasureReportQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarMeasureReportQueryUpdateImpl
    implements _IsarMeasureReportQueryUpdate {
  const _IsarMeasureReportQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarMeasureReport> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMeasureReportQueryUpdate on IsarQuery<IsarMeasureReport> {
  _IsarMeasureReportQueryUpdate get updateFirst =>
      _IsarMeasureReportQueryUpdateImpl(this, limit: 1);

  _IsarMeasureReportQueryUpdate get updateAll =>
      _IsarMeasureReportQueryUpdateImpl(this);
}

class _IsarMeasureReportQueryBuilderUpdateImpl
    implements _IsarMeasureReportQueryUpdate {
  const _IsarMeasureReportQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarMeasureReport, IsarMeasureReport, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarMeasureReportQueryBuilderUpdate
    on QueryBuilder<IsarMeasureReport, IsarMeasureReport, QOperations> {
  _IsarMeasureReportQueryUpdate get updateFirst =>
      _IsarMeasureReportQueryBuilderUpdateImpl(this, limit: 1);

  _IsarMeasureReportQueryUpdate get updateAll =>
      _IsarMeasureReportQueryBuilderUpdateImpl(this);
}

extension IsarMeasureReportQueryFilter
    on QueryBuilder<IsarMeasureReport, IsarMeasureReport, QFilterCondition> {
  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarMeasureReportQueryObject
    on QueryBuilder<IsarMeasureReport, IsarMeasureReport, QFilterCondition> {}

extension IsarMeasureReportQuerySortBy
    on QueryBuilder<IsarMeasureReport, IsarMeasureReport, QSortBy> {
  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMeasureReportQuerySortThenBy
    on QueryBuilder<IsarMeasureReport, IsarMeasureReport, QSortThenBy> {
  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMeasureReportQueryWhereDistinct
    on QueryBuilder<IsarMeasureReport, IsarMeasureReport, QDistinct> {
  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarMeasureReportQueryProperty1
    on QueryBuilder<IsarMeasureReport, IsarMeasureReport, QProperty> {
  QueryBuilder<IsarMeasureReport, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMeasureReport, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMeasureReport, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMeasureReportQueryProperty2<R>
    on QueryBuilder<IsarMeasureReport, R, QAfterProperty> {
  QueryBuilder<IsarMeasureReport, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMeasureReport, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMeasureReport, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMeasureReportQueryProperty3<R1, R2>
    on QueryBuilder<IsarMeasureReport, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMeasureReport, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMeasureReport, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMeasureReport, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMediaCollection on Isar {
  IsarCollection<int, IsarMedia> get isarMedias => this.collection();
}

const IsarMediaSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMedia',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarMedia>(
    serialize: serializeIsarMedia,
    deserialize: deserializeIsarMedia,
    deserializeProperty: deserializeIsarMediaProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMedia(IsarWriter writer, IsarMedia object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarMedia deserializeIsarMedia(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarMedia(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarMediaProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarMediaUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarMediaUpdateImpl implements _IsarMediaUpdate {
  const _IsarMediaUpdateImpl(this.collection);

  final IsarCollection<int, IsarMedia> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarMediaUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarMediaUpdateAllImpl implements _IsarMediaUpdateAll {
  const _IsarMediaUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarMedia> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMediaUpdate on IsarCollection<int, IsarMedia> {
  _IsarMediaUpdate get update => _IsarMediaUpdateImpl(this);

  _IsarMediaUpdateAll get updateAll => _IsarMediaUpdateAllImpl(this);
}

sealed class _IsarMediaQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarMediaQueryUpdateImpl implements _IsarMediaQueryUpdate {
  const _IsarMediaQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarMedia> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMediaQueryUpdate on IsarQuery<IsarMedia> {
  _IsarMediaQueryUpdate get updateFirst =>
      _IsarMediaQueryUpdateImpl(this, limit: 1);

  _IsarMediaQueryUpdate get updateAll => _IsarMediaQueryUpdateImpl(this);
}

class _IsarMediaQueryBuilderUpdateImpl implements _IsarMediaQueryUpdate {
  const _IsarMediaQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarMedia, IsarMedia, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarMediaQueryBuilderUpdate
    on QueryBuilder<IsarMedia, IsarMedia, QOperations> {
  _IsarMediaQueryUpdate get updateFirst =>
      _IsarMediaQueryBuilderUpdateImpl(this, limit: 1);

  _IsarMediaQueryUpdate get updateAll => _IsarMediaQueryBuilderUpdateImpl(this);
}

extension IsarMediaQueryFilter
    on QueryBuilder<IsarMedia, IsarMedia, QFilterCondition> {
  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarMediaQueryObject
    on QueryBuilder<IsarMedia, IsarMedia, QFilterCondition> {}

extension IsarMediaQuerySortBy on QueryBuilder<IsarMedia, IsarMedia, QSortBy> {
  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMediaQuerySortThenBy
    on QueryBuilder<IsarMedia, IsarMedia, QSortThenBy> {
  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMediaQueryWhereDistinct
    on QueryBuilder<IsarMedia, IsarMedia, QDistinct> {
  QueryBuilder<IsarMedia, IsarMedia, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarMediaQueryProperty1
    on QueryBuilder<IsarMedia, IsarMedia, QProperty> {
  QueryBuilder<IsarMedia, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedia, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedia, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMediaQueryProperty2<R>
    on QueryBuilder<IsarMedia, R, QAfterProperty> {
  QueryBuilder<IsarMedia, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedia, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedia, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMediaQueryProperty3<R1, R2>
    on QueryBuilder<IsarMedia, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMedia, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedia, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedia, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMedicationCollection on Isar {
  IsarCollection<int, IsarMedication> get isarMedications => this.collection();
}

const IsarMedicationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMedication',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarMedication>(
    serialize: serializeIsarMedication,
    deserialize: deserializeIsarMedication,
    deserializeProperty: deserializeIsarMedicationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMedication(IsarWriter writer, IsarMedication object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarMedication deserializeIsarMedication(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarMedication(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarMedicationProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarMedicationUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarMedicationUpdateImpl implements _IsarMedicationUpdate {
  const _IsarMedicationUpdateImpl(this.collection);

  final IsarCollection<int, IsarMedication> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarMedicationUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarMedicationUpdateAllImpl implements _IsarMedicationUpdateAll {
  const _IsarMedicationUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarMedication> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMedicationUpdate on IsarCollection<int, IsarMedication> {
  _IsarMedicationUpdate get update => _IsarMedicationUpdateImpl(this);

  _IsarMedicationUpdateAll get updateAll => _IsarMedicationUpdateAllImpl(this);
}

sealed class _IsarMedicationQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarMedicationQueryUpdateImpl implements _IsarMedicationQueryUpdate {
  const _IsarMedicationQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarMedication> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMedicationQueryUpdate on IsarQuery<IsarMedication> {
  _IsarMedicationQueryUpdate get updateFirst =>
      _IsarMedicationQueryUpdateImpl(this, limit: 1);

  _IsarMedicationQueryUpdate get updateAll =>
      _IsarMedicationQueryUpdateImpl(this);
}

class _IsarMedicationQueryBuilderUpdateImpl
    implements _IsarMedicationQueryUpdate {
  const _IsarMedicationQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarMedication, IsarMedication, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarMedicationQueryBuilderUpdate
    on QueryBuilder<IsarMedication, IsarMedication, QOperations> {
  _IsarMedicationQueryUpdate get updateFirst =>
      _IsarMedicationQueryBuilderUpdateImpl(this, limit: 1);

  _IsarMedicationQueryUpdate get updateAll =>
      _IsarMedicationQueryBuilderUpdateImpl(this);
}

extension IsarMedicationQueryFilter
    on QueryBuilder<IsarMedication, IsarMedication, QFilterCondition> {
  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarMedicationQueryObject
    on QueryBuilder<IsarMedication, IsarMedication, QFilterCondition> {}

extension IsarMedicationQuerySortBy
    on QueryBuilder<IsarMedication, IsarMedication, QSortBy> {
  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMedicationQuerySortThenBy
    on QueryBuilder<IsarMedication, IsarMedication, QSortThenBy> {
  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMedicationQueryWhereDistinct
    on QueryBuilder<IsarMedication, IsarMedication, QDistinct> {
  QueryBuilder<IsarMedication, IsarMedication, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarMedicationQueryProperty1
    on QueryBuilder<IsarMedication, IsarMedication, QProperty> {
  QueryBuilder<IsarMedication, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedication, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedication, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMedicationQueryProperty2<R>
    on QueryBuilder<IsarMedication, R, QAfterProperty> {
  QueryBuilder<IsarMedication, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedication, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedication, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMedicationQueryProperty3<R1, R2>
    on QueryBuilder<IsarMedication, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMedication, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedication, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedication, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMedicationAdministrationCollection on Isar {
  IsarCollection<int, IsarMedicationAdministration>
      get isarMedicationAdministrations => this.collection();
}

const IsarMedicationAdministrationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMedicationAdministration',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarMedicationAdministration>(
    serialize: serializeIsarMedicationAdministration,
    deserialize: deserializeIsarMedicationAdministration,
    deserializeProperty: deserializeIsarMedicationAdministrationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMedicationAdministration(
    IsarWriter writer, IsarMedicationAdministration object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarMedicationAdministration deserializeIsarMedicationAdministration(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarMedicationAdministration(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarMedicationAdministrationProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarMedicationAdministrationUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarMedicationAdministrationUpdateImpl
    implements _IsarMedicationAdministrationUpdate {
  const _IsarMedicationAdministrationUpdateImpl(this.collection);

  final IsarCollection<int, IsarMedicationAdministration> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarMedicationAdministrationUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarMedicationAdministrationUpdateAllImpl
    implements _IsarMedicationAdministrationUpdateAll {
  const _IsarMedicationAdministrationUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarMedicationAdministration> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMedicationAdministrationUpdate
    on IsarCollection<int, IsarMedicationAdministration> {
  _IsarMedicationAdministrationUpdate get update =>
      _IsarMedicationAdministrationUpdateImpl(this);

  _IsarMedicationAdministrationUpdateAll get updateAll =>
      _IsarMedicationAdministrationUpdateAllImpl(this);
}

sealed class _IsarMedicationAdministrationQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarMedicationAdministrationQueryUpdateImpl
    implements _IsarMedicationAdministrationQueryUpdate {
  const _IsarMedicationAdministrationQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarMedicationAdministration> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMedicationAdministrationQueryUpdate
    on IsarQuery<IsarMedicationAdministration> {
  _IsarMedicationAdministrationQueryUpdate get updateFirst =>
      _IsarMedicationAdministrationQueryUpdateImpl(this, limit: 1);

  _IsarMedicationAdministrationQueryUpdate get updateAll =>
      _IsarMedicationAdministrationQueryUpdateImpl(this);
}

class _IsarMedicationAdministrationQueryBuilderUpdateImpl
    implements _IsarMedicationAdministrationQueryUpdate {
  const _IsarMedicationAdministrationQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarMedicationAdministrationQueryBuilderUpdate on QueryBuilder<
    IsarMedicationAdministration, IsarMedicationAdministration, QOperations> {
  _IsarMedicationAdministrationQueryUpdate get updateFirst =>
      _IsarMedicationAdministrationQueryBuilderUpdateImpl(this, limit: 1);

  _IsarMedicationAdministrationQueryUpdate get updateAll =>
      _IsarMedicationAdministrationQueryBuilderUpdateImpl(this);
}

extension IsarMedicationAdministrationQueryFilter on QueryBuilder<
    IsarMedicationAdministration,
    IsarMedicationAdministration,
    QFilterCondition> {
  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarMedicationAdministrationQueryObject on QueryBuilder<
    IsarMedicationAdministration,
    IsarMedicationAdministration,
    QFilterCondition> {}

extension IsarMedicationAdministrationQuerySortBy on QueryBuilder<
    IsarMedicationAdministration, IsarMedicationAdministration, QSortBy> {
  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMedicationAdministrationQuerySortThenBy on QueryBuilder<
    IsarMedicationAdministration, IsarMedicationAdministration, QSortThenBy> {
  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMedicationAdministrationQueryWhereDistinct on QueryBuilder<
    IsarMedicationAdministration, IsarMedicationAdministration, QDistinct> {
  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarMedicationAdministrationQueryProperty1 on QueryBuilder<
    IsarMedicationAdministration, IsarMedicationAdministration, QProperty> {
  QueryBuilder<IsarMedicationAdministration, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationAdministration, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedicationAdministration, Map<String, dynamic>,
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMedicationAdministrationQueryProperty2<R>
    on QueryBuilder<IsarMedicationAdministration, R, QAfterProperty> {
  QueryBuilder<IsarMedicationAdministration, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationAdministration, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedicationAdministration, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMedicationAdministrationQueryProperty3<R1, R2>
    on QueryBuilder<IsarMedicationAdministration, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMedicationAdministration, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationAdministration, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedicationAdministration, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMedicationDispenseCollection on Isar {
  IsarCollection<int, IsarMedicationDispense> get isarMedicationDispenses =>
      this.collection();
}

const IsarMedicationDispenseSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMedicationDispense',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarMedicationDispense>(
    serialize: serializeIsarMedicationDispense,
    deserialize: deserializeIsarMedicationDispense,
    deserializeProperty: deserializeIsarMedicationDispenseProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMedicationDispense(
    IsarWriter writer, IsarMedicationDispense object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarMedicationDispense deserializeIsarMedicationDispense(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarMedicationDispense(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarMedicationDispenseProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarMedicationDispenseUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarMedicationDispenseUpdateImpl
    implements _IsarMedicationDispenseUpdate {
  const _IsarMedicationDispenseUpdateImpl(this.collection);

  final IsarCollection<int, IsarMedicationDispense> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarMedicationDispenseUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarMedicationDispenseUpdateAllImpl
    implements _IsarMedicationDispenseUpdateAll {
  const _IsarMedicationDispenseUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarMedicationDispense> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMedicationDispenseUpdate
    on IsarCollection<int, IsarMedicationDispense> {
  _IsarMedicationDispenseUpdate get update =>
      _IsarMedicationDispenseUpdateImpl(this);

  _IsarMedicationDispenseUpdateAll get updateAll =>
      _IsarMedicationDispenseUpdateAllImpl(this);
}

sealed class _IsarMedicationDispenseQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarMedicationDispenseQueryUpdateImpl
    implements _IsarMedicationDispenseQueryUpdate {
  const _IsarMedicationDispenseQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarMedicationDispense> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMedicationDispenseQueryUpdate
    on IsarQuery<IsarMedicationDispense> {
  _IsarMedicationDispenseQueryUpdate get updateFirst =>
      _IsarMedicationDispenseQueryUpdateImpl(this, limit: 1);

  _IsarMedicationDispenseQueryUpdate get updateAll =>
      _IsarMedicationDispenseQueryUpdateImpl(this);
}

class _IsarMedicationDispenseQueryBuilderUpdateImpl
    implements _IsarMedicationDispenseQueryUpdate {
  const _IsarMedicationDispenseQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarMedicationDispenseQueryBuilderUpdate on QueryBuilder<
    IsarMedicationDispense, IsarMedicationDispense, QOperations> {
  _IsarMedicationDispenseQueryUpdate get updateFirst =>
      _IsarMedicationDispenseQueryBuilderUpdateImpl(this, limit: 1);

  _IsarMedicationDispenseQueryUpdate get updateAll =>
      _IsarMedicationDispenseQueryBuilderUpdateImpl(this);
}

extension IsarMedicationDispenseQueryFilter on QueryBuilder<
    IsarMedicationDispense, IsarMedicationDispense, QFilterCondition> {
  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarMedicationDispenseQueryObject on QueryBuilder<
    IsarMedicationDispense, IsarMedicationDispense, QFilterCondition> {}

extension IsarMedicationDispenseQuerySortBy
    on QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QSortBy> {
  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMedicationDispenseQuerySortThenBy on QueryBuilder<
    IsarMedicationDispense, IsarMedicationDispense, QSortThenBy> {
  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMedicationDispenseQueryWhereDistinct
    on QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QDistinct> {
  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarMedicationDispenseQueryProperty1
    on QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QProperty> {
  QueryBuilder<IsarMedicationDispense, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationDispense, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedicationDispense, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMedicationDispenseQueryProperty2<R>
    on QueryBuilder<IsarMedicationDispense, R, QAfterProperty> {
  QueryBuilder<IsarMedicationDispense, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationDispense, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedicationDispense, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMedicationDispenseQueryProperty3<R1, R2>
    on QueryBuilder<IsarMedicationDispense, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMedicationDispense, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationDispense, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedicationDispense, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMedicationKnowledgeCollection on Isar {
  IsarCollection<int, IsarMedicationKnowledge> get isarMedicationKnowledges =>
      this.collection();
}

const IsarMedicationKnowledgeSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMedicationKnowledge',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarMedicationKnowledge>(
    serialize: serializeIsarMedicationKnowledge,
    deserialize: deserializeIsarMedicationKnowledge,
    deserializeProperty: deserializeIsarMedicationKnowledgeProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMedicationKnowledge(
    IsarWriter writer, IsarMedicationKnowledge object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarMedicationKnowledge deserializeIsarMedicationKnowledge(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarMedicationKnowledge(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarMedicationKnowledgeProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarMedicationKnowledgeUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarMedicationKnowledgeUpdateImpl
    implements _IsarMedicationKnowledgeUpdate {
  const _IsarMedicationKnowledgeUpdateImpl(this.collection);

  final IsarCollection<int, IsarMedicationKnowledge> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarMedicationKnowledgeUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarMedicationKnowledgeUpdateAllImpl
    implements _IsarMedicationKnowledgeUpdateAll {
  const _IsarMedicationKnowledgeUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarMedicationKnowledge> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMedicationKnowledgeUpdate
    on IsarCollection<int, IsarMedicationKnowledge> {
  _IsarMedicationKnowledgeUpdate get update =>
      _IsarMedicationKnowledgeUpdateImpl(this);

  _IsarMedicationKnowledgeUpdateAll get updateAll =>
      _IsarMedicationKnowledgeUpdateAllImpl(this);
}

sealed class _IsarMedicationKnowledgeQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarMedicationKnowledgeQueryUpdateImpl
    implements _IsarMedicationKnowledgeQueryUpdate {
  const _IsarMedicationKnowledgeQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarMedicationKnowledge> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMedicationKnowledgeQueryUpdate
    on IsarQuery<IsarMedicationKnowledge> {
  _IsarMedicationKnowledgeQueryUpdate get updateFirst =>
      _IsarMedicationKnowledgeQueryUpdateImpl(this, limit: 1);

  _IsarMedicationKnowledgeQueryUpdate get updateAll =>
      _IsarMedicationKnowledgeQueryUpdateImpl(this);
}

class _IsarMedicationKnowledgeQueryBuilderUpdateImpl
    implements _IsarMedicationKnowledgeQueryUpdate {
  const _IsarMedicationKnowledgeQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarMedicationKnowledgeQueryBuilderUpdate on QueryBuilder<
    IsarMedicationKnowledge, IsarMedicationKnowledge, QOperations> {
  _IsarMedicationKnowledgeQueryUpdate get updateFirst =>
      _IsarMedicationKnowledgeQueryBuilderUpdateImpl(this, limit: 1);

  _IsarMedicationKnowledgeQueryUpdate get updateAll =>
      _IsarMedicationKnowledgeQueryBuilderUpdateImpl(this);
}

extension IsarMedicationKnowledgeQueryFilter on QueryBuilder<
    IsarMedicationKnowledge, IsarMedicationKnowledge, QFilterCondition> {
  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarMedicationKnowledgeQueryObject on QueryBuilder<
    IsarMedicationKnowledge, IsarMedicationKnowledge, QFilterCondition> {}

extension IsarMedicationKnowledgeQuerySortBy
    on QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QSortBy> {
  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMedicationKnowledgeQuerySortThenBy on QueryBuilder<
    IsarMedicationKnowledge, IsarMedicationKnowledge, QSortThenBy> {
  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMedicationKnowledgeQueryWhereDistinct on QueryBuilder<
    IsarMedicationKnowledge, IsarMedicationKnowledge, QDistinct> {
  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarMedicationKnowledgeQueryProperty1 on QueryBuilder<
    IsarMedicationKnowledge, IsarMedicationKnowledge, QProperty> {
  QueryBuilder<IsarMedicationKnowledge, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMedicationKnowledgeQueryProperty2<R>
    on QueryBuilder<IsarMedicationKnowledge, R, QAfterProperty> {
  QueryBuilder<IsarMedicationKnowledge, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMedicationKnowledgeQueryProperty3<R1, R2>
    on QueryBuilder<IsarMedicationKnowledge, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMedicationKnowledge, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMedicationRequestCollection on Isar {
  IsarCollection<int, IsarMedicationRequest> get isarMedicationRequests =>
      this.collection();
}

const IsarMedicationRequestSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMedicationRequest',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarMedicationRequest>(
    serialize: serializeIsarMedicationRequest,
    deserialize: deserializeIsarMedicationRequest,
    deserializeProperty: deserializeIsarMedicationRequestProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMedicationRequest(
    IsarWriter writer, IsarMedicationRequest object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarMedicationRequest deserializeIsarMedicationRequest(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarMedicationRequest(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarMedicationRequestProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarMedicationRequestUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarMedicationRequestUpdateImpl implements _IsarMedicationRequestUpdate {
  const _IsarMedicationRequestUpdateImpl(this.collection);

  final IsarCollection<int, IsarMedicationRequest> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarMedicationRequestUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarMedicationRequestUpdateAllImpl
    implements _IsarMedicationRequestUpdateAll {
  const _IsarMedicationRequestUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarMedicationRequest> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMedicationRequestUpdate
    on IsarCollection<int, IsarMedicationRequest> {
  _IsarMedicationRequestUpdate get update =>
      _IsarMedicationRequestUpdateImpl(this);

  _IsarMedicationRequestUpdateAll get updateAll =>
      _IsarMedicationRequestUpdateAllImpl(this);
}

sealed class _IsarMedicationRequestQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarMedicationRequestQueryUpdateImpl
    implements _IsarMedicationRequestQueryUpdate {
  const _IsarMedicationRequestQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarMedicationRequest> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMedicationRequestQueryUpdate on IsarQuery<IsarMedicationRequest> {
  _IsarMedicationRequestQueryUpdate get updateFirst =>
      _IsarMedicationRequestQueryUpdateImpl(this, limit: 1);

  _IsarMedicationRequestQueryUpdate get updateAll =>
      _IsarMedicationRequestQueryUpdateImpl(this);
}

class _IsarMedicationRequestQueryBuilderUpdateImpl
    implements _IsarMedicationRequestQueryUpdate {
  const _IsarMedicationRequestQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarMedicationRequestQueryBuilderUpdate
    on QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QOperations> {
  _IsarMedicationRequestQueryUpdate get updateFirst =>
      _IsarMedicationRequestQueryBuilderUpdateImpl(this, limit: 1);

  _IsarMedicationRequestQueryUpdate get updateAll =>
      _IsarMedicationRequestQueryBuilderUpdateImpl(this);
}

extension IsarMedicationRequestQueryFilter on QueryBuilder<
    IsarMedicationRequest, IsarMedicationRequest, QFilterCondition> {
  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarMedicationRequestQueryObject on QueryBuilder<
    IsarMedicationRequest, IsarMedicationRequest, QFilterCondition> {}

extension IsarMedicationRequestQuerySortBy
    on QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QSortBy> {
  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMedicationRequestQuerySortThenBy
    on QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QSortThenBy> {
  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMedicationRequestQueryWhereDistinct
    on QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QDistinct> {
  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarMedicationRequestQueryProperty1
    on QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QProperty> {
  QueryBuilder<IsarMedicationRequest, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationRequest, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedicationRequest, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMedicationRequestQueryProperty2<R>
    on QueryBuilder<IsarMedicationRequest, R, QAfterProperty> {
  QueryBuilder<IsarMedicationRequest, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationRequest, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedicationRequest, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMedicationRequestQueryProperty3<R1, R2>
    on QueryBuilder<IsarMedicationRequest, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMedicationRequest, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationRequest, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedicationRequest, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMedicationStatementCollection on Isar {
  IsarCollection<int, IsarMedicationStatement> get isarMedicationStatements =>
      this.collection();
}

const IsarMedicationStatementSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMedicationStatement',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarMedicationStatement>(
    serialize: serializeIsarMedicationStatement,
    deserialize: deserializeIsarMedicationStatement,
    deserializeProperty: deserializeIsarMedicationStatementProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMedicationStatement(
    IsarWriter writer, IsarMedicationStatement object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarMedicationStatement deserializeIsarMedicationStatement(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarMedicationStatement(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarMedicationStatementProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarMedicationStatementUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarMedicationStatementUpdateImpl
    implements _IsarMedicationStatementUpdate {
  const _IsarMedicationStatementUpdateImpl(this.collection);

  final IsarCollection<int, IsarMedicationStatement> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarMedicationStatementUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarMedicationStatementUpdateAllImpl
    implements _IsarMedicationStatementUpdateAll {
  const _IsarMedicationStatementUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarMedicationStatement> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMedicationStatementUpdate
    on IsarCollection<int, IsarMedicationStatement> {
  _IsarMedicationStatementUpdate get update =>
      _IsarMedicationStatementUpdateImpl(this);

  _IsarMedicationStatementUpdateAll get updateAll =>
      _IsarMedicationStatementUpdateAllImpl(this);
}

sealed class _IsarMedicationStatementQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarMedicationStatementQueryUpdateImpl
    implements _IsarMedicationStatementQueryUpdate {
  const _IsarMedicationStatementQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarMedicationStatement> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMedicationStatementQueryUpdate
    on IsarQuery<IsarMedicationStatement> {
  _IsarMedicationStatementQueryUpdate get updateFirst =>
      _IsarMedicationStatementQueryUpdateImpl(this, limit: 1);

  _IsarMedicationStatementQueryUpdate get updateAll =>
      _IsarMedicationStatementQueryUpdateImpl(this);
}

class _IsarMedicationStatementQueryBuilderUpdateImpl
    implements _IsarMedicationStatementQueryUpdate {
  const _IsarMedicationStatementQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarMedicationStatementQueryBuilderUpdate on QueryBuilder<
    IsarMedicationStatement, IsarMedicationStatement, QOperations> {
  _IsarMedicationStatementQueryUpdate get updateFirst =>
      _IsarMedicationStatementQueryBuilderUpdateImpl(this, limit: 1);

  _IsarMedicationStatementQueryUpdate get updateAll =>
      _IsarMedicationStatementQueryBuilderUpdateImpl(this);
}

extension IsarMedicationStatementQueryFilter on QueryBuilder<
    IsarMedicationStatement, IsarMedicationStatement, QFilterCondition> {
  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarMedicationStatementQueryObject on QueryBuilder<
    IsarMedicationStatement, IsarMedicationStatement, QFilterCondition> {}

extension IsarMedicationStatementQuerySortBy
    on QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QSortBy> {
  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMedicationStatementQuerySortThenBy on QueryBuilder<
    IsarMedicationStatement, IsarMedicationStatement, QSortThenBy> {
  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMedicationStatementQueryWhereDistinct on QueryBuilder<
    IsarMedicationStatement, IsarMedicationStatement, QDistinct> {
  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarMedicationStatementQueryProperty1 on QueryBuilder<
    IsarMedicationStatement, IsarMedicationStatement, QProperty> {
  QueryBuilder<IsarMedicationStatement, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationStatement, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedicationStatement, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMedicationStatementQueryProperty2<R>
    on QueryBuilder<IsarMedicationStatement, R, QAfterProperty> {
  QueryBuilder<IsarMedicationStatement, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationStatement, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedicationStatement, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMedicationStatementQueryProperty3<R1, R2>
    on QueryBuilder<IsarMedicationStatement, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMedicationStatement, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationStatement, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedicationStatement, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMedicinalProductDefinitionCollection on Isar {
  IsarCollection<int, IsarMedicinalProductDefinition>
      get isarMedicinalProductDefinitions => this.collection();
}

const IsarMedicinalProductDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMedicinalProductDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarMedicinalProductDefinition>(
    serialize: serializeIsarMedicinalProductDefinition,
    deserialize: deserializeIsarMedicinalProductDefinition,
    deserializeProperty: deserializeIsarMedicinalProductDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMedicinalProductDefinition(
    IsarWriter writer, IsarMedicinalProductDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarMedicinalProductDefinition deserializeIsarMedicinalProductDefinition(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarMedicinalProductDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarMedicinalProductDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarMedicinalProductDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarMedicinalProductDefinitionUpdateImpl
    implements _IsarMedicinalProductDefinitionUpdate {
  const _IsarMedicinalProductDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarMedicinalProductDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarMedicinalProductDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarMedicinalProductDefinitionUpdateAllImpl
    implements _IsarMedicinalProductDefinitionUpdateAll {
  const _IsarMedicinalProductDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarMedicinalProductDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMedicinalProductDefinitionUpdate
    on IsarCollection<int, IsarMedicinalProductDefinition> {
  _IsarMedicinalProductDefinitionUpdate get update =>
      _IsarMedicinalProductDefinitionUpdateImpl(this);

  _IsarMedicinalProductDefinitionUpdateAll get updateAll =>
      _IsarMedicinalProductDefinitionUpdateAllImpl(this);
}

sealed class _IsarMedicinalProductDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarMedicinalProductDefinitionQueryUpdateImpl
    implements _IsarMedicinalProductDefinitionQueryUpdate {
  const _IsarMedicinalProductDefinitionQueryUpdateImpl(this.query,
      {this.limit});

  final IsarQuery<IsarMedicinalProductDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMedicinalProductDefinitionQueryUpdate
    on IsarQuery<IsarMedicinalProductDefinition> {
  _IsarMedicinalProductDefinitionQueryUpdate get updateFirst =>
      _IsarMedicinalProductDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarMedicinalProductDefinitionQueryUpdate get updateAll =>
      _IsarMedicinalProductDefinitionQueryUpdateImpl(this);
}

class _IsarMedicinalProductDefinitionQueryBuilderUpdateImpl
    implements _IsarMedicinalProductDefinitionQueryUpdate {
  const _IsarMedicinalProductDefinitionQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarMedicinalProductDefinition,
      IsarMedicinalProductDefinition, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarMedicinalProductDefinitionQueryBuilderUpdate on QueryBuilder<
    IsarMedicinalProductDefinition,
    IsarMedicinalProductDefinition,
    QOperations> {
  _IsarMedicinalProductDefinitionQueryUpdate get updateFirst =>
      _IsarMedicinalProductDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarMedicinalProductDefinitionQueryUpdate get updateAll =>
      _IsarMedicinalProductDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarMedicinalProductDefinitionQueryFilter on QueryBuilder<
    IsarMedicinalProductDefinition,
    IsarMedicinalProductDefinition,
    QFilterCondition> {
  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarMedicinalProductDefinitionQueryObject on QueryBuilder<
    IsarMedicinalProductDefinition,
    IsarMedicinalProductDefinition,
    QFilterCondition> {}

extension IsarMedicinalProductDefinitionQuerySortBy on QueryBuilder<
    IsarMedicinalProductDefinition, IsarMedicinalProductDefinition, QSortBy> {
  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMedicinalProductDefinitionQuerySortThenBy on QueryBuilder<
    IsarMedicinalProductDefinition,
    IsarMedicinalProductDefinition,
    QSortThenBy> {
  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMedicinalProductDefinitionQueryWhereDistinct on QueryBuilder<
    IsarMedicinalProductDefinition, IsarMedicinalProductDefinition, QDistinct> {
  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarMedicinalProductDefinitionQueryProperty1 on QueryBuilder<
    IsarMedicinalProductDefinition, IsarMedicinalProductDefinition, QProperty> {
  QueryBuilder<IsarMedicinalProductDefinition, int, QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, Map<String, dynamic>,
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMedicinalProductDefinitionQueryProperty2<R>
    on QueryBuilder<IsarMedicinalProductDefinition, R, QAfterProperty> {
  QueryBuilder<IsarMedicinalProductDefinition, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMedicinalProductDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarMedicinalProductDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMedicinalProductDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMessageDefinitionCollection on Isar {
  IsarCollection<int, IsarMessageDefinition> get isarMessageDefinitions =>
      this.collection();
}

const IsarMessageDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMessageDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarMessageDefinition>(
    serialize: serializeIsarMessageDefinition,
    deserialize: deserializeIsarMessageDefinition,
    deserializeProperty: deserializeIsarMessageDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMessageDefinition(
    IsarWriter writer, IsarMessageDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarMessageDefinition deserializeIsarMessageDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarMessageDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarMessageDefinitionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarMessageDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarMessageDefinitionUpdateImpl implements _IsarMessageDefinitionUpdate {
  const _IsarMessageDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarMessageDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarMessageDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarMessageDefinitionUpdateAllImpl
    implements _IsarMessageDefinitionUpdateAll {
  const _IsarMessageDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarMessageDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMessageDefinitionUpdate
    on IsarCollection<int, IsarMessageDefinition> {
  _IsarMessageDefinitionUpdate get update =>
      _IsarMessageDefinitionUpdateImpl(this);

  _IsarMessageDefinitionUpdateAll get updateAll =>
      _IsarMessageDefinitionUpdateAllImpl(this);
}

sealed class _IsarMessageDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarMessageDefinitionQueryUpdateImpl
    implements _IsarMessageDefinitionQueryUpdate {
  const _IsarMessageDefinitionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarMessageDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMessageDefinitionQueryUpdate on IsarQuery<IsarMessageDefinition> {
  _IsarMessageDefinitionQueryUpdate get updateFirst =>
      _IsarMessageDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarMessageDefinitionQueryUpdate get updateAll =>
      _IsarMessageDefinitionQueryUpdateImpl(this);
}

class _IsarMessageDefinitionQueryBuilderUpdateImpl
    implements _IsarMessageDefinitionQueryUpdate {
  const _IsarMessageDefinitionQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarMessageDefinitionQueryBuilderUpdate
    on QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QOperations> {
  _IsarMessageDefinitionQueryUpdate get updateFirst =>
      _IsarMessageDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarMessageDefinitionQueryUpdate get updateAll =>
      _IsarMessageDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarMessageDefinitionQueryFilter on QueryBuilder<
    IsarMessageDefinition, IsarMessageDefinition, QFilterCondition> {
  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarMessageDefinitionQueryObject on QueryBuilder<
    IsarMessageDefinition, IsarMessageDefinition, QFilterCondition> {}

extension IsarMessageDefinitionQuerySortBy
    on QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QSortBy> {
  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMessageDefinitionQuerySortThenBy
    on QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QSortThenBy> {
  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMessageDefinitionQueryWhereDistinct
    on QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QDistinct> {
  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarMessageDefinitionQueryProperty1
    on QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QProperty> {
  QueryBuilder<IsarMessageDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMessageDefinition, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMessageDefinition, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMessageDefinitionQueryProperty2<R>
    on QueryBuilder<IsarMessageDefinition, R, QAfterProperty> {
  QueryBuilder<IsarMessageDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMessageDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMessageDefinition, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMessageDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarMessageDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMessageDefinition, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMessageDefinition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMessageDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMessageHeaderCollection on Isar {
  IsarCollection<int, IsarMessageHeader> get isarMessageHeaders =>
      this.collection();
}

const IsarMessageHeaderSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMessageHeader',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarMessageHeader>(
    serialize: serializeIsarMessageHeader,
    deserialize: deserializeIsarMessageHeader,
    deserializeProperty: deserializeIsarMessageHeaderProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMessageHeader(IsarWriter writer, IsarMessageHeader object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarMessageHeader deserializeIsarMessageHeader(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarMessageHeader(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarMessageHeaderProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarMessageHeaderUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarMessageHeaderUpdateImpl implements _IsarMessageHeaderUpdate {
  const _IsarMessageHeaderUpdateImpl(this.collection);

  final IsarCollection<int, IsarMessageHeader> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarMessageHeaderUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarMessageHeaderUpdateAllImpl implements _IsarMessageHeaderUpdateAll {
  const _IsarMessageHeaderUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarMessageHeader> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMessageHeaderUpdate on IsarCollection<int, IsarMessageHeader> {
  _IsarMessageHeaderUpdate get update => _IsarMessageHeaderUpdateImpl(this);

  _IsarMessageHeaderUpdateAll get updateAll =>
      _IsarMessageHeaderUpdateAllImpl(this);
}

sealed class _IsarMessageHeaderQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarMessageHeaderQueryUpdateImpl
    implements _IsarMessageHeaderQueryUpdate {
  const _IsarMessageHeaderQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarMessageHeader> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMessageHeaderQueryUpdate on IsarQuery<IsarMessageHeader> {
  _IsarMessageHeaderQueryUpdate get updateFirst =>
      _IsarMessageHeaderQueryUpdateImpl(this, limit: 1);

  _IsarMessageHeaderQueryUpdate get updateAll =>
      _IsarMessageHeaderQueryUpdateImpl(this);
}

class _IsarMessageHeaderQueryBuilderUpdateImpl
    implements _IsarMessageHeaderQueryUpdate {
  const _IsarMessageHeaderQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarMessageHeader, IsarMessageHeader, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarMessageHeaderQueryBuilderUpdate
    on QueryBuilder<IsarMessageHeader, IsarMessageHeader, QOperations> {
  _IsarMessageHeaderQueryUpdate get updateFirst =>
      _IsarMessageHeaderQueryBuilderUpdateImpl(this, limit: 1);

  _IsarMessageHeaderQueryUpdate get updateAll =>
      _IsarMessageHeaderQueryBuilderUpdateImpl(this);
}

extension IsarMessageHeaderQueryFilter
    on QueryBuilder<IsarMessageHeader, IsarMessageHeader, QFilterCondition> {
  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarMessageHeaderQueryObject
    on QueryBuilder<IsarMessageHeader, IsarMessageHeader, QFilterCondition> {}

extension IsarMessageHeaderQuerySortBy
    on QueryBuilder<IsarMessageHeader, IsarMessageHeader, QSortBy> {
  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMessageHeaderQuerySortThenBy
    on QueryBuilder<IsarMessageHeader, IsarMessageHeader, QSortThenBy> {
  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMessageHeaderQueryWhereDistinct
    on QueryBuilder<IsarMessageHeader, IsarMessageHeader, QDistinct> {
  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarMessageHeaderQueryProperty1
    on QueryBuilder<IsarMessageHeader, IsarMessageHeader, QProperty> {
  QueryBuilder<IsarMessageHeader, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMessageHeader, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMessageHeader, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMessageHeaderQueryProperty2<R>
    on QueryBuilder<IsarMessageHeader, R, QAfterProperty> {
  QueryBuilder<IsarMessageHeader, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMessageHeader, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMessageHeader, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMessageHeaderQueryProperty3<R1, R2>
    on QueryBuilder<IsarMessageHeader, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMessageHeader, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMessageHeader, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMessageHeader, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMolecularSequenceCollection on Isar {
  IsarCollection<int, IsarMolecularSequence> get isarMolecularSequences =>
      this.collection();
}

const IsarMolecularSequenceSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMolecularSequence',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarMolecularSequence>(
    serialize: serializeIsarMolecularSequence,
    deserialize: deserializeIsarMolecularSequence,
    deserializeProperty: deserializeIsarMolecularSequenceProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMolecularSequence(
    IsarWriter writer, IsarMolecularSequence object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarMolecularSequence deserializeIsarMolecularSequence(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarMolecularSequence(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarMolecularSequenceProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarMolecularSequenceUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarMolecularSequenceUpdateImpl implements _IsarMolecularSequenceUpdate {
  const _IsarMolecularSequenceUpdateImpl(this.collection);

  final IsarCollection<int, IsarMolecularSequence> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarMolecularSequenceUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarMolecularSequenceUpdateAllImpl
    implements _IsarMolecularSequenceUpdateAll {
  const _IsarMolecularSequenceUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarMolecularSequence> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMolecularSequenceUpdate
    on IsarCollection<int, IsarMolecularSequence> {
  _IsarMolecularSequenceUpdate get update =>
      _IsarMolecularSequenceUpdateImpl(this);

  _IsarMolecularSequenceUpdateAll get updateAll =>
      _IsarMolecularSequenceUpdateAllImpl(this);
}

sealed class _IsarMolecularSequenceQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarMolecularSequenceQueryUpdateImpl
    implements _IsarMolecularSequenceQueryUpdate {
  const _IsarMolecularSequenceQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarMolecularSequence> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarMolecularSequenceQueryUpdate on IsarQuery<IsarMolecularSequence> {
  _IsarMolecularSequenceQueryUpdate get updateFirst =>
      _IsarMolecularSequenceQueryUpdateImpl(this, limit: 1);

  _IsarMolecularSequenceQueryUpdate get updateAll =>
      _IsarMolecularSequenceQueryUpdateImpl(this);
}

class _IsarMolecularSequenceQueryBuilderUpdateImpl
    implements _IsarMolecularSequenceQueryUpdate {
  const _IsarMolecularSequenceQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarMolecularSequenceQueryBuilderUpdate
    on QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QOperations> {
  _IsarMolecularSequenceQueryUpdate get updateFirst =>
      _IsarMolecularSequenceQueryBuilderUpdateImpl(this, limit: 1);

  _IsarMolecularSequenceQueryUpdate get updateAll =>
      _IsarMolecularSequenceQueryBuilderUpdateImpl(this);
}

extension IsarMolecularSequenceQueryFilter on QueryBuilder<
    IsarMolecularSequence, IsarMolecularSequence, QFilterCondition> {
  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarMolecularSequenceQueryObject on QueryBuilder<
    IsarMolecularSequence, IsarMolecularSequence, QFilterCondition> {}

extension IsarMolecularSequenceQuerySortBy
    on QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QSortBy> {
  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMolecularSequenceQuerySortThenBy
    on QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QSortThenBy> {
  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarMolecularSequenceQueryWhereDistinct
    on QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QDistinct> {
  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarMolecularSequenceQueryProperty1
    on QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QProperty> {
  QueryBuilder<IsarMolecularSequence, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMolecularSequence, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMolecularSequence, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMolecularSequenceQueryProperty2<R>
    on QueryBuilder<IsarMolecularSequence, R, QAfterProperty> {
  QueryBuilder<IsarMolecularSequence, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMolecularSequence, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMolecularSequence, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarMolecularSequenceQueryProperty3<R1, R2>
    on QueryBuilder<IsarMolecularSequence, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMolecularSequence, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMolecularSequence, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarMolecularSequence, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarNamingSystemCollection on Isar {
  IsarCollection<int, IsarNamingSystem> get isarNamingSystems =>
      this.collection();
}

const IsarNamingSystemSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarNamingSystem',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarNamingSystem>(
    serialize: serializeIsarNamingSystem,
    deserialize: deserializeIsarNamingSystem,
    deserializeProperty: deserializeIsarNamingSystemProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarNamingSystem(IsarWriter writer, IsarNamingSystem object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarNamingSystem deserializeIsarNamingSystem(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarNamingSystem(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarNamingSystemProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarNamingSystemUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarNamingSystemUpdateImpl implements _IsarNamingSystemUpdate {
  const _IsarNamingSystemUpdateImpl(this.collection);

  final IsarCollection<int, IsarNamingSystem> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarNamingSystemUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarNamingSystemUpdateAllImpl implements _IsarNamingSystemUpdateAll {
  const _IsarNamingSystemUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarNamingSystem> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarNamingSystemUpdate on IsarCollection<int, IsarNamingSystem> {
  _IsarNamingSystemUpdate get update => _IsarNamingSystemUpdateImpl(this);

  _IsarNamingSystemUpdateAll get updateAll =>
      _IsarNamingSystemUpdateAllImpl(this);
}

sealed class _IsarNamingSystemQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarNamingSystemQueryUpdateImpl implements _IsarNamingSystemQueryUpdate {
  const _IsarNamingSystemQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarNamingSystem> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarNamingSystemQueryUpdate on IsarQuery<IsarNamingSystem> {
  _IsarNamingSystemQueryUpdate get updateFirst =>
      _IsarNamingSystemQueryUpdateImpl(this, limit: 1);

  _IsarNamingSystemQueryUpdate get updateAll =>
      _IsarNamingSystemQueryUpdateImpl(this);
}

class _IsarNamingSystemQueryBuilderUpdateImpl
    implements _IsarNamingSystemQueryUpdate {
  const _IsarNamingSystemQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarNamingSystem, IsarNamingSystem, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarNamingSystemQueryBuilderUpdate
    on QueryBuilder<IsarNamingSystem, IsarNamingSystem, QOperations> {
  _IsarNamingSystemQueryUpdate get updateFirst =>
      _IsarNamingSystemQueryBuilderUpdateImpl(this, limit: 1);

  _IsarNamingSystemQueryUpdate get updateAll =>
      _IsarNamingSystemQueryBuilderUpdateImpl(this);
}

extension IsarNamingSystemQueryFilter
    on QueryBuilder<IsarNamingSystem, IsarNamingSystem, QFilterCondition> {
  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarNamingSystemQueryObject
    on QueryBuilder<IsarNamingSystem, IsarNamingSystem, QFilterCondition> {}

extension IsarNamingSystemQuerySortBy
    on QueryBuilder<IsarNamingSystem, IsarNamingSystem, QSortBy> {
  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarNamingSystemQuerySortThenBy
    on QueryBuilder<IsarNamingSystem, IsarNamingSystem, QSortThenBy> {
  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarNamingSystemQueryWhereDistinct
    on QueryBuilder<IsarNamingSystem, IsarNamingSystem, QDistinct> {
  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarNamingSystemQueryProperty1
    on QueryBuilder<IsarNamingSystem, IsarNamingSystem, QProperty> {
  QueryBuilder<IsarNamingSystem, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarNamingSystem, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarNamingSystem, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarNamingSystemQueryProperty2<R>
    on QueryBuilder<IsarNamingSystem, R, QAfterProperty> {
  QueryBuilder<IsarNamingSystem, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarNamingSystem, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarNamingSystem, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarNamingSystemQueryProperty3<R1, R2>
    on QueryBuilder<IsarNamingSystem, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarNamingSystem, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarNamingSystem, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarNamingSystem, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarNutritionOrderCollection on Isar {
  IsarCollection<int, IsarNutritionOrder> get isarNutritionOrders =>
      this.collection();
}

const IsarNutritionOrderSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarNutritionOrder',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarNutritionOrder>(
    serialize: serializeIsarNutritionOrder,
    deserialize: deserializeIsarNutritionOrder,
    deserializeProperty: deserializeIsarNutritionOrderProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarNutritionOrder(IsarWriter writer, IsarNutritionOrder object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarNutritionOrder deserializeIsarNutritionOrder(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarNutritionOrder(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarNutritionOrderProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarNutritionOrderUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarNutritionOrderUpdateImpl implements _IsarNutritionOrderUpdate {
  const _IsarNutritionOrderUpdateImpl(this.collection);

  final IsarCollection<int, IsarNutritionOrder> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarNutritionOrderUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarNutritionOrderUpdateAllImpl implements _IsarNutritionOrderUpdateAll {
  const _IsarNutritionOrderUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarNutritionOrder> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarNutritionOrderUpdate on IsarCollection<int, IsarNutritionOrder> {
  _IsarNutritionOrderUpdate get update => _IsarNutritionOrderUpdateImpl(this);

  _IsarNutritionOrderUpdateAll get updateAll =>
      _IsarNutritionOrderUpdateAllImpl(this);
}

sealed class _IsarNutritionOrderQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarNutritionOrderQueryUpdateImpl
    implements _IsarNutritionOrderQueryUpdate {
  const _IsarNutritionOrderQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarNutritionOrder> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarNutritionOrderQueryUpdate on IsarQuery<IsarNutritionOrder> {
  _IsarNutritionOrderQueryUpdate get updateFirst =>
      _IsarNutritionOrderQueryUpdateImpl(this, limit: 1);

  _IsarNutritionOrderQueryUpdate get updateAll =>
      _IsarNutritionOrderQueryUpdateImpl(this);
}

class _IsarNutritionOrderQueryBuilderUpdateImpl
    implements _IsarNutritionOrderQueryUpdate {
  const _IsarNutritionOrderQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarNutritionOrderQueryBuilderUpdate
    on QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QOperations> {
  _IsarNutritionOrderQueryUpdate get updateFirst =>
      _IsarNutritionOrderQueryBuilderUpdateImpl(this, limit: 1);

  _IsarNutritionOrderQueryUpdate get updateAll =>
      _IsarNutritionOrderQueryBuilderUpdateImpl(this);
}

extension IsarNutritionOrderQueryFilter
    on QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QFilterCondition> {
  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarNutritionOrderQueryObject
    on QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QFilterCondition> {}

extension IsarNutritionOrderQuerySortBy
    on QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QSortBy> {
  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarNutritionOrderQuerySortThenBy
    on QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QSortThenBy> {
  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarNutritionOrderQueryWhereDistinct
    on QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QDistinct> {
  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarNutritionOrderQueryProperty1
    on QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QProperty> {
  QueryBuilder<IsarNutritionOrder, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarNutritionOrder, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarNutritionOrder, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarNutritionOrderQueryProperty2<R>
    on QueryBuilder<IsarNutritionOrder, R, QAfterProperty> {
  QueryBuilder<IsarNutritionOrder, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarNutritionOrder, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarNutritionOrder, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarNutritionOrderQueryProperty3<R1, R2>
    on QueryBuilder<IsarNutritionOrder, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarNutritionOrder, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarNutritionOrder, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarNutritionOrder, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarNutritionProductCollection on Isar {
  IsarCollection<int, IsarNutritionProduct> get isarNutritionProducts =>
      this.collection();
}

const IsarNutritionProductSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarNutritionProduct',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarNutritionProduct>(
    serialize: serializeIsarNutritionProduct,
    deserialize: deserializeIsarNutritionProduct,
    deserializeProperty: deserializeIsarNutritionProductProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarNutritionProduct(
    IsarWriter writer, IsarNutritionProduct object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarNutritionProduct deserializeIsarNutritionProduct(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarNutritionProduct(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarNutritionProductProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarNutritionProductUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarNutritionProductUpdateImpl implements _IsarNutritionProductUpdate {
  const _IsarNutritionProductUpdateImpl(this.collection);

  final IsarCollection<int, IsarNutritionProduct> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarNutritionProductUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarNutritionProductUpdateAllImpl
    implements _IsarNutritionProductUpdateAll {
  const _IsarNutritionProductUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarNutritionProduct> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarNutritionProductUpdate
    on IsarCollection<int, IsarNutritionProduct> {
  _IsarNutritionProductUpdate get update =>
      _IsarNutritionProductUpdateImpl(this);

  _IsarNutritionProductUpdateAll get updateAll =>
      _IsarNutritionProductUpdateAllImpl(this);
}

sealed class _IsarNutritionProductQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarNutritionProductQueryUpdateImpl
    implements _IsarNutritionProductQueryUpdate {
  const _IsarNutritionProductQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarNutritionProduct> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarNutritionProductQueryUpdate on IsarQuery<IsarNutritionProduct> {
  _IsarNutritionProductQueryUpdate get updateFirst =>
      _IsarNutritionProductQueryUpdateImpl(this, limit: 1);

  _IsarNutritionProductQueryUpdate get updateAll =>
      _IsarNutritionProductQueryUpdateImpl(this);
}

class _IsarNutritionProductQueryBuilderUpdateImpl
    implements _IsarNutritionProductQueryUpdate {
  const _IsarNutritionProductQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarNutritionProductQueryBuilderUpdate
    on QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QOperations> {
  _IsarNutritionProductQueryUpdate get updateFirst =>
      _IsarNutritionProductQueryBuilderUpdateImpl(this, limit: 1);

  _IsarNutritionProductQueryUpdate get updateAll =>
      _IsarNutritionProductQueryBuilderUpdateImpl(this);
}

extension IsarNutritionProductQueryFilter on QueryBuilder<IsarNutritionProduct,
    IsarNutritionProduct, QFilterCondition> {
  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarNutritionProductQueryObject on QueryBuilder<IsarNutritionProduct,
    IsarNutritionProduct, QFilterCondition> {}

extension IsarNutritionProductQuerySortBy
    on QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QSortBy> {
  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarNutritionProductQuerySortThenBy
    on QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QSortThenBy> {
  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarNutritionProductQueryWhereDistinct
    on QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QDistinct> {
  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarNutritionProductQueryProperty1
    on QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QProperty> {
  QueryBuilder<IsarNutritionProduct, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarNutritionProduct, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarNutritionProduct, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarNutritionProductQueryProperty2<R>
    on QueryBuilder<IsarNutritionProduct, R, QAfterProperty> {
  QueryBuilder<IsarNutritionProduct, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarNutritionProduct, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarNutritionProduct, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarNutritionProductQueryProperty3<R1, R2>
    on QueryBuilder<IsarNutritionProduct, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarNutritionProduct, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarNutritionProduct, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarNutritionProduct, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarObservationCollection on Isar {
  IsarCollection<int, IsarObservation> get isarObservations =>
      this.collection();
}

const IsarObservationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarObservation',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarObservation>(
    serialize: serializeIsarObservation,
    deserialize: deserializeIsarObservation,
    deserializeProperty: deserializeIsarObservationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarObservation(IsarWriter writer, IsarObservation object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarObservation deserializeIsarObservation(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarObservation(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarObservationProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarObservationUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarObservationUpdateImpl implements _IsarObservationUpdate {
  const _IsarObservationUpdateImpl(this.collection);

  final IsarCollection<int, IsarObservation> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarObservationUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarObservationUpdateAllImpl implements _IsarObservationUpdateAll {
  const _IsarObservationUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarObservation> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarObservationUpdate on IsarCollection<int, IsarObservation> {
  _IsarObservationUpdate get update => _IsarObservationUpdateImpl(this);

  _IsarObservationUpdateAll get updateAll =>
      _IsarObservationUpdateAllImpl(this);
}

sealed class _IsarObservationQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarObservationQueryUpdateImpl implements _IsarObservationQueryUpdate {
  const _IsarObservationQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarObservation> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarObservationQueryUpdate on IsarQuery<IsarObservation> {
  _IsarObservationQueryUpdate get updateFirst =>
      _IsarObservationQueryUpdateImpl(this, limit: 1);

  _IsarObservationQueryUpdate get updateAll =>
      _IsarObservationQueryUpdateImpl(this);
}

class _IsarObservationQueryBuilderUpdateImpl
    implements _IsarObservationQueryUpdate {
  const _IsarObservationQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarObservation, IsarObservation, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarObservationQueryBuilderUpdate
    on QueryBuilder<IsarObservation, IsarObservation, QOperations> {
  _IsarObservationQueryUpdate get updateFirst =>
      _IsarObservationQueryBuilderUpdateImpl(this, limit: 1);

  _IsarObservationQueryUpdate get updateAll =>
      _IsarObservationQueryBuilderUpdateImpl(this);
}

extension IsarObservationQueryFilter
    on QueryBuilder<IsarObservation, IsarObservation, QFilterCondition> {
  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarObservationQueryObject
    on QueryBuilder<IsarObservation, IsarObservation, QFilterCondition> {}

extension IsarObservationQuerySortBy
    on QueryBuilder<IsarObservation, IsarObservation, QSortBy> {
  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarObservationQuerySortThenBy
    on QueryBuilder<IsarObservation, IsarObservation, QSortThenBy> {
  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarObservationQueryWhereDistinct
    on QueryBuilder<IsarObservation, IsarObservation, QDistinct> {
  QueryBuilder<IsarObservation, IsarObservation, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarObservationQueryProperty1
    on QueryBuilder<IsarObservation, IsarObservation, QProperty> {
  QueryBuilder<IsarObservation, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarObservation, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarObservation, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarObservationQueryProperty2<R>
    on QueryBuilder<IsarObservation, R, QAfterProperty> {
  QueryBuilder<IsarObservation, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarObservation, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarObservation, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarObservationQueryProperty3<R1, R2>
    on QueryBuilder<IsarObservation, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarObservation, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarObservation, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarObservation, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarObservationDefinitionCollection on Isar {
  IsarCollection<int, IsarObservationDefinition>
      get isarObservationDefinitions => this.collection();
}

const IsarObservationDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarObservationDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarObservationDefinition>(
    serialize: serializeIsarObservationDefinition,
    deserialize: deserializeIsarObservationDefinition,
    deserializeProperty: deserializeIsarObservationDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarObservationDefinition(
    IsarWriter writer, IsarObservationDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarObservationDefinition deserializeIsarObservationDefinition(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarObservationDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarObservationDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarObservationDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarObservationDefinitionUpdateImpl
    implements _IsarObservationDefinitionUpdate {
  const _IsarObservationDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarObservationDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarObservationDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarObservationDefinitionUpdateAllImpl
    implements _IsarObservationDefinitionUpdateAll {
  const _IsarObservationDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarObservationDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarObservationDefinitionUpdate
    on IsarCollection<int, IsarObservationDefinition> {
  _IsarObservationDefinitionUpdate get update =>
      _IsarObservationDefinitionUpdateImpl(this);

  _IsarObservationDefinitionUpdateAll get updateAll =>
      _IsarObservationDefinitionUpdateAllImpl(this);
}

sealed class _IsarObservationDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarObservationDefinitionQueryUpdateImpl
    implements _IsarObservationDefinitionQueryUpdate {
  const _IsarObservationDefinitionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarObservationDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarObservationDefinitionQueryUpdate
    on IsarQuery<IsarObservationDefinition> {
  _IsarObservationDefinitionQueryUpdate get updateFirst =>
      _IsarObservationDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarObservationDefinitionQueryUpdate get updateAll =>
      _IsarObservationDefinitionQueryUpdateImpl(this);
}

class _IsarObservationDefinitionQueryBuilderUpdateImpl
    implements _IsarObservationDefinitionQueryUpdate {
  const _IsarObservationDefinitionQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarObservationDefinitionQueryBuilderUpdate on QueryBuilder<
    IsarObservationDefinition, IsarObservationDefinition, QOperations> {
  _IsarObservationDefinitionQueryUpdate get updateFirst =>
      _IsarObservationDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarObservationDefinitionQueryUpdate get updateAll =>
      _IsarObservationDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarObservationDefinitionQueryFilter on QueryBuilder<
    IsarObservationDefinition, IsarObservationDefinition, QFilterCondition> {
  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarObservationDefinitionQueryObject on QueryBuilder<
    IsarObservationDefinition, IsarObservationDefinition, QFilterCondition> {}

extension IsarObservationDefinitionQuerySortBy on QueryBuilder<
    IsarObservationDefinition, IsarObservationDefinition, QSortBy> {
  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarObservationDefinitionQuerySortThenBy on QueryBuilder<
    IsarObservationDefinition, IsarObservationDefinition, QSortThenBy> {
  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarObservationDefinitionQueryWhereDistinct on QueryBuilder<
    IsarObservationDefinition, IsarObservationDefinition, QDistinct> {
  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarObservationDefinitionQueryProperty1 on QueryBuilder<
    IsarObservationDefinition, IsarObservationDefinition, QProperty> {
  QueryBuilder<IsarObservationDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarObservationDefinition, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarObservationDefinition, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarObservationDefinitionQueryProperty2<R>
    on QueryBuilder<IsarObservationDefinition, R, QAfterProperty> {
  QueryBuilder<IsarObservationDefinition, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarObservationDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarObservationDefinition, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarObservationDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarObservationDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarObservationDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarObservationDefinition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarObservationDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarOperationDefinitionCollection on Isar {
  IsarCollection<int, IsarOperationDefinition> get isarOperationDefinitions =>
      this.collection();
}

const IsarOperationDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarOperationDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarOperationDefinition>(
    serialize: serializeIsarOperationDefinition,
    deserialize: deserializeIsarOperationDefinition,
    deserializeProperty: deserializeIsarOperationDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarOperationDefinition(
    IsarWriter writer, IsarOperationDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarOperationDefinition deserializeIsarOperationDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarOperationDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarOperationDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarOperationDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarOperationDefinitionUpdateImpl
    implements _IsarOperationDefinitionUpdate {
  const _IsarOperationDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarOperationDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarOperationDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarOperationDefinitionUpdateAllImpl
    implements _IsarOperationDefinitionUpdateAll {
  const _IsarOperationDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarOperationDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarOperationDefinitionUpdate
    on IsarCollection<int, IsarOperationDefinition> {
  _IsarOperationDefinitionUpdate get update =>
      _IsarOperationDefinitionUpdateImpl(this);

  _IsarOperationDefinitionUpdateAll get updateAll =>
      _IsarOperationDefinitionUpdateAllImpl(this);
}

sealed class _IsarOperationDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarOperationDefinitionQueryUpdateImpl
    implements _IsarOperationDefinitionQueryUpdate {
  const _IsarOperationDefinitionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarOperationDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarOperationDefinitionQueryUpdate
    on IsarQuery<IsarOperationDefinition> {
  _IsarOperationDefinitionQueryUpdate get updateFirst =>
      _IsarOperationDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarOperationDefinitionQueryUpdate get updateAll =>
      _IsarOperationDefinitionQueryUpdateImpl(this);
}

class _IsarOperationDefinitionQueryBuilderUpdateImpl
    implements _IsarOperationDefinitionQueryUpdate {
  const _IsarOperationDefinitionQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarOperationDefinitionQueryBuilderUpdate on QueryBuilder<
    IsarOperationDefinition, IsarOperationDefinition, QOperations> {
  _IsarOperationDefinitionQueryUpdate get updateFirst =>
      _IsarOperationDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarOperationDefinitionQueryUpdate get updateAll =>
      _IsarOperationDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarOperationDefinitionQueryFilter on QueryBuilder<
    IsarOperationDefinition, IsarOperationDefinition, QFilterCondition> {
  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarOperationDefinitionQueryObject on QueryBuilder<
    IsarOperationDefinition, IsarOperationDefinition, QFilterCondition> {}

extension IsarOperationDefinitionQuerySortBy
    on QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QSortBy> {
  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarOperationDefinitionQuerySortThenBy on QueryBuilder<
    IsarOperationDefinition, IsarOperationDefinition, QSortThenBy> {
  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarOperationDefinitionQueryWhereDistinct on QueryBuilder<
    IsarOperationDefinition, IsarOperationDefinition, QDistinct> {
  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarOperationDefinitionQueryProperty1 on QueryBuilder<
    IsarOperationDefinition, IsarOperationDefinition, QProperty> {
  QueryBuilder<IsarOperationDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOperationDefinition, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarOperationDefinition, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarOperationDefinitionQueryProperty2<R>
    on QueryBuilder<IsarOperationDefinition, R, QAfterProperty> {
  QueryBuilder<IsarOperationDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOperationDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarOperationDefinition, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarOperationDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarOperationDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarOperationDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOperationDefinition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarOperationDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarOperationOutcomeCollection on Isar {
  IsarCollection<int, IsarOperationOutcome> get isarOperationOutcomes =>
      this.collection();
}

const IsarOperationOutcomeSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarOperationOutcome',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarOperationOutcome>(
    serialize: serializeIsarOperationOutcome,
    deserialize: deserializeIsarOperationOutcome,
    deserializeProperty: deserializeIsarOperationOutcomeProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarOperationOutcome(
    IsarWriter writer, IsarOperationOutcome object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarOperationOutcome deserializeIsarOperationOutcome(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarOperationOutcome(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarOperationOutcomeProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarOperationOutcomeUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarOperationOutcomeUpdateImpl implements _IsarOperationOutcomeUpdate {
  const _IsarOperationOutcomeUpdateImpl(this.collection);

  final IsarCollection<int, IsarOperationOutcome> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarOperationOutcomeUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarOperationOutcomeUpdateAllImpl
    implements _IsarOperationOutcomeUpdateAll {
  const _IsarOperationOutcomeUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarOperationOutcome> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarOperationOutcomeUpdate
    on IsarCollection<int, IsarOperationOutcome> {
  _IsarOperationOutcomeUpdate get update =>
      _IsarOperationOutcomeUpdateImpl(this);

  _IsarOperationOutcomeUpdateAll get updateAll =>
      _IsarOperationOutcomeUpdateAllImpl(this);
}

sealed class _IsarOperationOutcomeQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarOperationOutcomeQueryUpdateImpl
    implements _IsarOperationOutcomeQueryUpdate {
  const _IsarOperationOutcomeQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarOperationOutcome> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarOperationOutcomeQueryUpdate on IsarQuery<IsarOperationOutcome> {
  _IsarOperationOutcomeQueryUpdate get updateFirst =>
      _IsarOperationOutcomeQueryUpdateImpl(this, limit: 1);

  _IsarOperationOutcomeQueryUpdate get updateAll =>
      _IsarOperationOutcomeQueryUpdateImpl(this);
}

class _IsarOperationOutcomeQueryBuilderUpdateImpl
    implements _IsarOperationOutcomeQueryUpdate {
  const _IsarOperationOutcomeQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarOperationOutcomeQueryBuilderUpdate
    on QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QOperations> {
  _IsarOperationOutcomeQueryUpdate get updateFirst =>
      _IsarOperationOutcomeQueryBuilderUpdateImpl(this, limit: 1);

  _IsarOperationOutcomeQueryUpdate get updateAll =>
      _IsarOperationOutcomeQueryBuilderUpdateImpl(this);
}

extension IsarOperationOutcomeQueryFilter on QueryBuilder<IsarOperationOutcome,
    IsarOperationOutcome, QFilterCondition> {
  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarOperationOutcomeQueryObject on QueryBuilder<IsarOperationOutcome,
    IsarOperationOutcome, QFilterCondition> {}

extension IsarOperationOutcomeQuerySortBy
    on QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QSortBy> {
  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarOperationOutcomeQuerySortThenBy
    on QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QSortThenBy> {
  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarOperationOutcomeQueryWhereDistinct
    on QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QDistinct> {
  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarOperationOutcomeQueryProperty1
    on QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QProperty> {
  QueryBuilder<IsarOperationOutcome, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOperationOutcome, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarOperationOutcome, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarOperationOutcomeQueryProperty2<R>
    on QueryBuilder<IsarOperationOutcome, R, QAfterProperty> {
  QueryBuilder<IsarOperationOutcome, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOperationOutcome, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarOperationOutcome, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarOperationOutcomeQueryProperty3<R1, R2>
    on QueryBuilder<IsarOperationOutcome, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarOperationOutcome, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOperationOutcome, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarOperationOutcome, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarOrganizationCollection on Isar {
  IsarCollection<int, IsarOrganization> get isarOrganizations =>
      this.collection();
}

const IsarOrganizationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarOrganization',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarOrganization>(
    serialize: serializeIsarOrganization,
    deserialize: deserializeIsarOrganization,
    deserializeProperty: deserializeIsarOrganizationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarOrganization(IsarWriter writer, IsarOrganization object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarOrganization deserializeIsarOrganization(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarOrganization(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarOrganizationProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarOrganizationUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarOrganizationUpdateImpl implements _IsarOrganizationUpdate {
  const _IsarOrganizationUpdateImpl(this.collection);

  final IsarCollection<int, IsarOrganization> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarOrganizationUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarOrganizationUpdateAllImpl implements _IsarOrganizationUpdateAll {
  const _IsarOrganizationUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarOrganization> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarOrganizationUpdate on IsarCollection<int, IsarOrganization> {
  _IsarOrganizationUpdate get update => _IsarOrganizationUpdateImpl(this);

  _IsarOrganizationUpdateAll get updateAll =>
      _IsarOrganizationUpdateAllImpl(this);
}

sealed class _IsarOrganizationQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarOrganizationQueryUpdateImpl implements _IsarOrganizationQueryUpdate {
  const _IsarOrganizationQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarOrganization> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarOrganizationQueryUpdate on IsarQuery<IsarOrganization> {
  _IsarOrganizationQueryUpdate get updateFirst =>
      _IsarOrganizationQueryUpdateImpl(this, limit: 1);

  _IsarOrganizationQueryUpdate get updateAll =>
      _IsarOrganizationQueryUpdateImpl(this);
}

class _IsarOrganizationQueryBuilderUpdateImpl
    implements _IsarOrganizationQueryUpdate {
  const _IsarOrganizationQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarOrganization, IsarOrganization, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarOrganizationQueryBuilderUpdate
    on QueryBuilder<IsarOrganization, IsarOrganization, QOperations> {
  _IsarOrganizationQueryUpdate get updateFirst =>
      _IsarOrganizationQueryBuilderUpdateImpl(this, limit: 1);

  _IsarOrganizationQueryUpdate get updateAll =>
      _IsarOrganizationQueryBuilderUpdateImpl(this);
}

extension IsarOrganizationQueryFilter
    on QueryBuilder<IsarOrganization, IsarOrganization, QFilterCondition> {
  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarOrganizationQueryObject
    on QueryBuilder<IsarOrganization, IsarOrganization, QFilterCondition> {}

extension IsarOrganizationQuerySortBy
    on QueryBuilder<IsarOrganization, IsarOrganization, QSortBy> {
  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarOrganizationQuerySortThenBy
    on QueryBuilder<IsarOrganization, IsarOrganization, QSortThenBy> {
  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarOrganizationQueryWhereDistinct
    on QueryBuilder<IsarOrganization, IsarOrganization, QDistinct> {
  QueryBuilder<IsarOrganization, IsarOrganization, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarOrganizationQueryProperty1
    on QueryBuilder<IsarOrganization, IsarOrganization, QProperty> {
  QueryBuilder<IsarOrganization, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOrganization, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarOrganization, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarOrganizationQueryProperty2<R>
    on QueryBuilder<IsarOrganization, R, QAfterProperty> {
  QueryBuilder<IsarOrganization, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOrganization, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarOrganization, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarOrganizationQueryProperty3<R1, R2>
    on QueryBuilder<IsarOrganization, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarOrganization, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOrganization, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarOrganization, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarOrganizationAffiliationCollection on Isar {
  IsarCollection<int, IsarOrganizationAffiliation>
      get isarOrganizationAffiliations => this.collection();
}

const IsarOrganizationAffiliationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarOrganizationAffiliation',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarOrganizationAffiliation>(
    serialize: serializeIsarOrganizationAffiliation,
    deserialize: deserializeIsarOrganizationAffiliation,
    deserializeProperty: deserializeIsarOrganizationAffiliationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarOrganizationAffiliation(
    IsarWriter writer, IsarOrganizationAffiliation object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarOrganizationAffiliation deserializeIsarOrganizationAffiliation(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarOrganizationAffiliation(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarOrganizationAffiliationProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarOrganizationAffiliationUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarOrganizationAffiliationUpdateImpl
    implements _IsarOrganizationAffiliationUpdate {
  const _IsarOrganizationAffiliationUpdateImpl(this.collection);

  final IsarCollection<int, IsarOrganizationAffiliation> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarOrganizationAffiliationUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarOrganizationAffiliationUpdateAllImpl
    implements _IsarOrganizationAffiliationUpdateAll {
  const _IsarOrganizationAffiliationUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarOrganizationAffiliation> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarOrganizationAffiliationUpdate
    on IsarCollection<int, IsarOrganizationAffiliation> {
  _IsarOrganizationAffiliationUpdate get update =>
      _IsarOrganizationAffiliationUpdateImpl(this);

  _IsarOrganizationAffiliationUpdateAll get updateAll =>
      _IsarOrganizationAffiliationUpdateAllImpl(this);
}

sealed class _IsarOrganizationAffiliationQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarOrganizationAffiliationQueryUpdateImpl
    implements _IsarOrganizationAffiliationQueryUpdate {
  const _IsarOrganizationAffiliationQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarOrganizationAffiliation> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarOrganizationAffiliationQueryUpdate
    on IsarQuery<IsarOrganizationAffiliation> {
  _IsarOrganizationAffiliationQueryUpdate get updateFirst =>
      _IsarOrganizationAffiliationQueryUpdateImpl(this, limit: 1);

  _IsarOrganizationAffiliationQueryUpdate get updateAll =>
      _IsarOrganizationAffiliationQueryUpdateImpl(this);
}

class _IsarOrganizationAffiliationQueryBuilderUpdateImpl
    implements _IsarOrganizationAffiliationQueryUpdate {
  const _IsarOrganizationAffiliationQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarOrganizationAffiliationQueryBuilderUpdate on QueryBuilder<
    IsarOrganizationAffiliation, IsarOrganizationAffiliation, QOperations> {
  _IsarOrganizationAffiliationQueryUpdate get updateFirst =>
      _IsarOrganizationAffiliationQueryBuilderUpdateImpl(this, limit: 1);

  _IsarOrganizationAffiliationQueryUpdate get updateAll =>
      _IsarOrganizationAffiliationQueryBuilderUpdateImpl(this);
}

extension IsarOrganizationAffiliationQueryFilter on QueryBuilder<
    IsarOrganizationAffiliation,
    IsarOrganizationAffiliation,
    QFilterCondition> {
  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarOrganizationAffiliationQueryObject on QueryBuilder<
    IsarOrganizationAffiliation,
    IsarOrganizationAffiliation,
    QFilterCondition> {}

extension IsarOrganizationAffiliationQuerySortBy on QueryBuilder<
    IsarOrganizationAffiliation, IsarOrganizationAffiliation, QSortBy> {
  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarOrganizationAffiliationQuerySortThenBy on QueryBuilder<
    IsarOrganizationAffiliation, IsarOrganizationAffiliation, QSortThenBy> {
  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarOrganizationAffiliationQueryWhereDistinct on QueryBuilder<
    IsarOrganizationAffiliation, IsarOrganizationAffiliation, QDistinct> {
  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarOrganizationAffiliationQueryProperty1 on QueryBuilder<
    IsarOrganizationAffiliation, IsarOrganizationAffiliation, QProperty> {
  QueryBuilder<IsarOrganizationAffiliation, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, Map<String, dynamic>,
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarOrganizationAffiliationQueryProperty2<R>
    on QueryBuilder<IsarOrganizationAffiliation, R, QAfterProperty> {
  QueryBuilder<IsarOrganizationAffiliation, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarOrganizationAffiliationQueryProperty3<R1, R2>
    on QueryBuilder<IsarOrganizationAffiliation, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarOrganizationAffiliation, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarPackagedProductDefinitionCollection on Isar {
  IsarCollection<int, IsarPackagedProductDefinition>
      get isarPackagedProductDefinitions => this.collection();
}

const IsarPackagedProductDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarPackagedProductDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarPackagedProductDefinition>(
    serialize: serializeIsarPackagedProductDefinition,
    deserialize: deserializeIsarPackagedProductDefinition,
    deserializeProperty: deserializeIsarPackagedProductDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarPackagedProductDefinition(
    IsarWriter writer, IsarPackagedProductDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarPackagedProductDefinition deserializeIsarPackagedProductDefinition(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarPackagedProductDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarPackagedProductDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarPackagedProductDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarPackagedProductDefinitionUpdateImpl
    implements _IsarPackagedProductDefinitionUpdate {
  const _IsarPackagedProductDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarPackagedProductDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarPackagedProductDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarPackagedProductDefinitionUpdateAllImpl
    implements _IsarPackagedProductDefinitionUpdateAll {
  const _IsarPackagedProductDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarPackagedProductDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarPackagedProductDefinitionUpdate
    on IsarCollection<int, IsarPackagedProductDefinition> {
  _IsarPackagedProductDefinitionUpdate get update =>
      _IsarPackagedProductDefinitionUpdateImpl(this);

  _IsarPackagedProductDefinitionUpdateAll get updateAll =>
      _IsarPackagedProductDefinitionUpdateAllImpl(this);
}

sealed class _IsarPackagedProductDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarPackagedProductDefinitionQueryUpdateImpl
    implements _IsarPackagedProductDefinitionQueryUpdate {
  const _IsarPackagedProductDefinitionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarPackagedProductDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarPackagedProductDefinitionQueryUpdate
    on IsarQuery<IsarPackagedProductDefinition> {
  _IsarPackagedProductDefinitionQueryUpdate get updateFirst =>
      _IsarPackagedProductDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarPackagedProductDefinitionQueryUpdate get updateAll =>
      _IsarPackagedProductDefinitionQueryUpdateImpl(this);
}

class _IsarPackagedProductDefinitionQueryBuilderUpdateImpl
    implements _IsarPackagedProductDefinitionQueryUpdate {
  const _IsarPackagedProductDefinitionQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarPackagedProductDefinition,
      IsarPackagedProductDefinition, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarPackagedProductDefinitionQueryBuilderUpdate on QueryBuilder<
    IsarPackagedProductDefinition, IsarPackagedProductDefinition, QOperations> {
  _IsarPackagedProductDefinitionQueryUpdate get updateFirst =>
      _IsarPackagedProductDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarPackagedProductDefinitionQueryUpdate get updateAll =>
      _IsarPackagedProductDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarPackagedProductDefinitionQueryFilter on QueryBuilder<
    IsarPackagedProductDefinition,
    IsarPackagedProductDefinition,
    QFilterCondition> {
  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarPackagedProductDefinitionQueryObject on QueryBuilder<
    IsarPackagedProductDefinition,
    IsarPackagedProductDefinition,
    QFilterCondition> {}

extension IsarPackagedProductDefinitionQuerySortBy on QueryBuilder<
    IsarPackagedProductDefinition, IsarPackagedProductDefinition, QSortBy> {
  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarPackagedProductDefinitionQuerySortThenBy on QueryBuilder<
    IsarPackagedProductDefinition, IsarPackagedProductDefinition, QSortThenBy> {
  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarPackagedProductDefinitionQueryWhereDistinct on QueryBuilder<
    IsarPackagedProductDefinition, IsarPackagedProductDefinition, QDistinct> {
  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarPackagedProductDefinitionQueryProperty1 on QueryBuilder<
    IsarPackagedProductDefinition, IsarPackagedProductDefinition, QProperty> {
  QueryBuilder<IsarPackagedProductDefinition, int, QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, Map<String, dynamic>,
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarPackagedProductDefinitionQueryProperty2<R>
    on QueryBuilder<IsarPackagedProductDefinition, R, QAfterProperty> {
  QueryBuilder<IsarPackagedProductDefinition, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarPackagedProductDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarPackagedProductDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarPackagedProductDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarParametersCollection on Isar {
  IsarCollection<int, IsarParameters> get isarParameters => this.collection();
}

const IsarParametersSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarParameters',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarParameters>(
    serialize: serializeIsarParameters,
    deserialize: deserializeIsarParameters,
    deserializeProperty: deserializeIsarParametersProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarParameters(IsarWriter writer, IsarParameters object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarParameters deserializeIsarParameters(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarParameters(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarParametersProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarParametersUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarParametersUpdateImpl implements _IsarParametersUpdate {
  const _IsarParametersUpdateImpl(this.collection);

  final IsarCollection<int, IsarParameters> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarParametersUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarParametersUpdateAllImpl implements _IsarParametersUpdateAll {
  const _IsarParametersUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarParameters> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarParametersUpdate on IsarCollection<int, IsarParameters> {
  _IsarParametersUpdate get update => _IsarParametersUpdateImpl(this);

  _IsarParametersUpdateAll get updateAll => _IsarParametersUpdateAllImpl(this);
}

sealed class _IsarParametersQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarParametersQueryUpdateImpl implements _IsarParametersQueryUpdate {
  const _IsarParametersQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarParameters> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarParametersQueryUpdate on IsarQuery<IsarParameters> {
  _IsarParametersQueryUpdate get updateFirst =>
      _IsarParametersQueryUpdateImpl(this, limit: 1);

  _IsarParametersQueryUpdate get updateAll =>
      _IsarParametersQueryUpdateImpl(this);
}

class _IsarParametersQueryBuilderUpdateImpl
    implements _IsarParametersQueryUpdate {
  const _IsarParametersQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarParameters, IsarParameters, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarParametersQueryBuilderUpdate
    on QueryBuilder<IsarParameters, IsarParameters, QOperations> {
  _IsarParametersQueryUpdate get updateFirst =>
      _IsarParametersQueryBuilderUpdateImpl(this, limit: 1);

  _IsarParametersQueryUpdate get updateAll =>
      _IsarParametersQueryBuilderUpdateImpl(this);
}

extension IsarParametersQueryFilter
    on QueryBuilder<IsarParameters, IsarParameters, QFilterCondition> {
  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarParametersQueryObject
    on QueryBuilder<IsarParameters, IsarParameters, QFilterCondition> {}

extension IsarParametersQuerySortBy
    on QueryBuilder<IsarParameters, IsarParameters, QSortBy> {
  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarParametersQuerySortThenBy
    on QueryBuilder<IsarParameters, IsarParameters, QSortThenBy> {
  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarParametersQueryWhereDistinct
    on QueryBuilder<IsarParameters, IsarParameters, QDistinct> {
  QueryBuilder<IsarParameters, IsarParameters, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarParametersQueryProperty1
    on QueryBuilder<IsarParameters, IsarParameters, QProperty> {
  QueryBuilder<IsarParameters, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarParameters, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarParameters, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarParametersQueryProperty2<R>
    on QueryBuilder<IsarParameters, R, QAfterProperty> {
  QueryBuilder<IsarParameters, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarParameters, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarParameters, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarParametersQueryProperty3<R1, R2>
    on QueryBuilder<IsarParameters, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarParameters, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarParameters, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarParameters, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarPatientCollection on Isar {
  IsarCollection<int, IsarPatient> get isarPatients => this.collection();
}

const IsarPatientSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarPatient',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarPatient>(
    serialize: serializeIsarPatient,
    deserialize: deserializeIsarPatient,
    deserializeProperty: deserializeIsarPatientProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarPatient(IsarWriter writer, IsarPatient object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarPatient deserializeIsarPatient(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarPatient(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarPatientProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarPatientUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarPatientUpdateImpl implements _IsarPatientUpdate {
  const _IsarPatientUpdateImpl(this.collection);

  final IsarCollection<int, IsarPatient> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarPatientUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarPatientUpdateAllImpl implements _IsarPatientUpdateAll {
  const _IsarPatientUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarPatient> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarPatientUpdate on IsarCollection<int, IsarPatient> {
  _IsarPatientUpdate get update => _IsarPatientUpdateImpl(this);

  _IsarPatientUpdateAll get updateAll => _IsarPatientUpdateAllImpl(this);
}

sealed class _IsarPatientQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarPatientQueryUpdateImpl implements _IsarPatientQueryUpdate {
  const _IsarPatientQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarPatient> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarPatientQueryUpdate on IsarQuery<IsarPatient> {
  _IsarPatientQueryUpdate get updateFirst =>
      _IsarPatientQueryUpdateImpl(this, limit: 1);

  _IsarPatientQueryUpdate get updateAll => _IsarPatientQueryUpdateImpl(this);
}

class _IsarPatientQueryBuilderUpdateImpl implements _IsarPatientQueryUpdate {
  const _IsarPatientQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarPatient, IsarPatient, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarPatientQueryBuilderUpdate
    on QueryBuilder<IsarPatient, IsarPatient, QOperations> {
  _IsarPatientQueryUpdate get updateFirst =>
      _IsarPatientQueryBuilderUpdateImpl(this, limit: 1);

  _IsarPatientQueryUpdate get updateAll =>
      _IsarPatientQueryBuilderUpdateImpl(this);
}

extension IsarPatientQueryFilter
    on QueryBuilder<IsarPatient, IsarPatient, QFilterCondition> {
  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarPatientQueryObject
    on QueryBuilder<IsarPatient, IsarPatient, QFilterCondition> {}

extension IsarPatientQuerySortBy
    on QueryBuilder<IsarPatient, IsarPatient, QSortBy> {
  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarPatientQuerySortThenBy
    on QueryBuilder<IsarPatient, IsarPatient, QSortThenBy> {
  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarPatientQueryWhereDistinct
    on QueryBuilder<IsarPatient, IsarPatient, QDistinct> {
  QueryBuilder<IsarPatient, IsarPatient, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarPatientQueryProperty1
    on QueryBuilder<IsarPatient, IsarPatient, QProperty> {
  QueryBuilder<IsarPatient, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPatient, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPatient, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarPatientQueryProperty2<R>
    on QueryBuilder<IsarPatient, R, QAfterProperty> {
  QueryBuilder<IsarPatient, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPatient, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPatient, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarPatientQueryProperty3<R1, R2>
    on QueryBuilder<IsarPatient, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarPatient, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPatient, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPatient, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarPaymentNoticeCollection on Isar {
  IsarCollection<int, IsarPaymentNotice> get isarPaymentNotices =>
      this.collection();
}

const IsarPaymentNoticeSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarPaymentNotice',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarPaymentNotice>(
    serialize: serializeIsarPaymentNotice,
    deserialize: deserializeIsarPaymentNotice,
    deserializeProperty: deserializeIsarPaymentNoticeProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarPaymentNotice(IsarWriter writer, IsarPaymentNotice object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarPaymentNotice deserializeIsarPaymentNotice(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarPaymentNotice(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarPaymentNoticeProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarPaymentNoticeUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarPaymentNoticeUpdateImpl implements _IsarPaymentNoticeUpdate {
  const _IsarPaymentNoticeUpdateImpl(this.collection);

  final IsarCollection<int, IsarPaymentNotice> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarPaymentNoticeUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarPaymentNoticeUpdateAllImpl implements _IsarPaymentNoticeUpdateAll {
  const _IsarPaymentNoticeUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarPaymentNotice> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarPaymentNoticeUpdate on IsarCollection<int, IsarPaymentNotice> {
  _IsarPaymentNoticeUpdate get update => _IsarPaymentNoticeUpdateImpl(this);

  _IsarPaymentNoticeUpdateAll get updateAll =>
      _IsarPaymentNoticeUpdateAllImpl(this);
}

sealed class _IsarPaymentNoticeQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarPaymentNoticeQueryUpdateImpl
    implements _IsarPaymentNoticeQueryUpdate {
  const _IsarPaymentNoticeQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarPaymentNotice> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarPaymentNoticeQueryUpdate on IsarQuery<IsarPaymentNotice> {
  _IsarPaymentNoticeQueryUpdate get updateFirst =>
      _IsarPaymentNoticeQueryUpdateImpl(this, limit: 1);

  _IsarPaymentNoticeQueryUpdate get updateAll =>
      _IsarPaymentNoticeQueryUpdateImpl(this);
}

class _IsarPaymentNoticeQueryBuilderUpdateImpl
    implements _IsarPaymentNoticeQueryUpdate {
  const _IsarPaymentNoticeQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarPaymentNoticeQueryBuilderUpdate
    on QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QOperations> {
  _IsarPaymentNoticeQueryUpdate get updateFirst =>
      _IsarPaymentNoticeQueryBuilderUpdateImpl(this, limit: 1);

  _IsarPaymentNoticeQueryUpdate get updateAll =>
      _IsarPaymentNoticeQueryBuilderUpdateImpl(this);
}

extension IsarPaymentNoticeQueryFilter
    on QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QFilterCondition> {
  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarPaymentNoticeQueryObject
    on QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QFilterCondition> {}

extension IsarPaymentNoticeQuerySortBy
    on QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QSortBy> {
  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarPaymentNoticeQuerySortThenBy
    on QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QSortThenBy> {
  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarPaymentNoticeQueryWhereDistinct
    on QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QDistinct> {
  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarPaymentNoticeQueryProperty1
    on QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QProperty> {
  QueryBuilder<IsarPaymentNotice, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPaymentNotice, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPaymentNotice, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarPaymentNoticeQueryProperty2<R>
    on QueryBuilder<IsarPaymentNotice, R, QAfterProperty> {
  QueryBuilder<IsarPaymentNotice, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPaymentNotice, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPaymentNotice, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarPaymentNoticeQueryProperty3<R1, R2>
    on QueryBuilder<IsarPaymentNotice, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarPaymentNotice, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPaymentNotice, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPaymentNotice, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarPaymentReconciliationCollection on Isar {
  IsarCollection<int, IsarPaymentReconciliation>
      get isarPaymentReconciliations => this.collection();
}

const IsarPaymentReconciliationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarPaymentReconciliation',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarPaymentReconciliation>(
    serialize: serializeIsarPaymentReconciliation,
    deserialize: deserializeIsarPaymentReconciliation,
    deserializeProperty: deserializeIsarPaymentReconciliationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarPaymentReconciliation(
    IsarWriter writer, IsarPaymentReconciliation object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarPaymentReconciliation deserializeIsarPaymentReconciliation(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarPaymentReconciliation(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarPaymentReconciliationProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarPaymentReconciliationUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarPaymentReconciliationUpdateImpl
    implements _IsarPaymentReconciliationUpdate {
  const _IsarPaymentReconciliationUpdateImpl(this.collection);

  final IsarCollection<int, IsarPaymentReconciliation> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarPaymentReconciliationUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarPaymentReconciliationUpdateAllImpl
    implements _IsarPaymentReconciliationUpdateAll {
  const _IsarPaymentReconciliationUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarPaymentReconciliation> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarPaymentReconciliationUpdate
    on IsarCollection<int, IsarPaymentReconciliation> {
  _IsarPaymentReconciliationUpdate get update =>
      _IsarPaymentReconciliationUpdateImpl(this);

  _IsarPaymentReconciliationUpdateAll get updateAll =>
      _IsarPaymentReconciliationUpdateAllImpl(this);
}

sealed class _IsarPaymentReconciliationQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarPaymentReconciliationQueryUpdateImpl
    implements _IsarPaymentReconciliationQueryUpdate {
  const _IsarPaymentReconciliationQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarPaymentReconciliation> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarPaymentReconciliationQueryUpdate
    on IsarQuery<IsarPaymentReconciliation> {
  _IsarPaymentReconciliationQueryUpdate get updateFirst =>
      _IsarPaymentReconciliationQueryUpdateImpl(this, limit: 1);

  _IsarPaymentReconciliationQueryUpdate get updateAll =>
      _IsarPaymentReconciliationQueryUpdateImpl(this);
}

class _IsarPaymentReconciliationQueryBuilderUpdateImpl
    implements _IsarPaymentReconciliationQueryUpdate {
  const _IsarPaymentReconciliationQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarPaymentReconciliationQueryBuilderUpdate on QueryBuilder<
    IsarPaymentReconciliation, IsarPaymentReconciliation, QOperations> {
  _IsarPaymentReconciliationQueryUpdate get updateFirst =>
      _IsarPaymentReconciliationQueryBuilderUpdateImpl(this, limit: 1);

  _IsarPaymentReconciliationQueryUpdate get updateAll =>
      _IsarPaymentReconciliationQueryBuilderUpdateImpl(this);
}

extension IsarPaymentReconciliationQueryFilter on QueryBuilder<
    IsarPaymentReconciliation, IsarPaymentReconciliation, QFilterCondition> {
  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarPaymentReconciliationQueryObject on QueryBuilder<
    IsarPaymentReconciliation, IsarPaymentReconciliation, QFilterCondition> {}

extension IsarPaymentReconciliationQuerySortBy on QueryBuilder<
    IsarPaymentReconciliation, IsarPaymentReconciliation, QSortBy> {
  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarPaymentReconciliationQuerySortThenBy on QueryBuilder<
    IsarPaymentReconciliation, IsarPaymentReconciliation, QSortThenBy> {
  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarPaymentReconciliationQueryWhereDistinct on QueryBuilder<
    IsarPaymentReconciliation, IsarPaymentReconciliation, QDistinct> {
  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarPaymentReconciliationQueryProperty1 on QueryBuilder<
    IsarPaymentReconciliation, IsarPaymentReconciliation, QProperty> {
  QueryBuilder<IsarPaymentReconciliation, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarPaymentReconciliationQueryProperty2<R>
    on QueryBuilder<IsarPaymentReconciliation, R, QAfterProperty> {
  QueryBuilder<IsarPaymentReconciliation, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarPaymentReconciliationQueryProperty3<R1, R2>
    on QueryBuilder<IsarPaymentReconciliation, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarPaymentReconciliation, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarPersonCollection on Isar {
  IsarCollection<int, IsarPerson> get isarPersons => this.collection();
}

const IsarPersonSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarPerson',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarPerson>(
    serialize: serializeIsarPerson,
    deserialize: deserializeIsarPerson,
    deserializeProperty: deserializeIsarPersonProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarPerson(IsarWriter writer, IsarPerson object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarPerson deserializeIsarPerson(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarPerson(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarPersonProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarPersonUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarPersonUpdateImpl implements _IsarPersonUpdate {
  const _IsarPersonUpdateImpl(this.collection);

  final IsarCollection<int, IsarPerson> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarPersonUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarPersonUpdateAllImpl implements _IsarPersonUpdateAll {
  const _IsarPersonUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarPerson> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarPersonUpdate on IsarCollection<int, IsarPerson> {
  _IsarPersonUpdate get update => _IsarPersonUpdateImpl(this);

  _IsarPersonUpdateAll get updateAll => _IsarPersonUpdateAllImpl(this);
}

sealed class _IsarPersonQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarPersonQueryUpdateImpl implements _IsarPersonQueryUpdate {
  const _IsarPersonQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarPerson> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarPersonQueryUpdate on IsarQuery<IsarPerson> {
  _IsarPersonQueryUpdate get updateFirst =>
      _IsarPersonQueryUpdateImpl(this, limit: 1);

  _IsarPersonQueryUpdate get updateAll => _IsarPersonQueryUpdateImpl(this);
}

class _IsarPersonQueryBuilderUpdateImpl implements _IsarPersonQueryUpdate {
  const _IsarPersonQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarPerson, IsarPerson, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarPersonQueryBuilderUpdate
    on QueryBuilder<IsarPerson, IsarPerson, QOperations> {
  _IsarPersonQueryUpdate get updateFirst =>
      _IsarPersonQueryBuilderUpdateImpl(this, limit: 1);

  _IsarPersonQueryUpdate get updateAll =>
      _IsarPersonQueryBuilderUpdateImpl(this);
}

extension IsarPersonQueryFilter
    on QueryBuilder<IsarPerson, IsarPerson, QFilterCondition> {
  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarPersonQueryObject
    on QueryBuilder<IsarPerson, IsarPerson, QFilterCondition> {}

extension IsarPersonQuerySortBy
    on QueryBuilder<IsarPerson, IsarPerson, QSortBy> {
  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarPersonQuerySortThenBy
    on QueryBuilder<IsarPerson, IsarPerson, QSortThenBy> {
  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarPersonQueryWhereDistinct
    on QueryBuilder<IsarPerson, IsarPerson, QDistinct> {
  QueryBuilder<IsarPerson, IsarPerson, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarPersonQueryProperty1
    on QueryBuilder<IsarPerson, IsarPerson, QProperty> {
  QueryBuilder<IsarPerson, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPerson, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPerson, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarPersonQueryProperty2<R>
    on QueryBuilder<IsarPerson, R, QAfterProperty> {
  QueryBuilder<IsarPerson, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPerson, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPerson, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarPersonQueryProperty3<R1, R2>
    on QueryBuilder<IsarPerson, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarPerson, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPerson, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPerson, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarPlanDefinitionCollection on Isar {
  IsarCollection<int, IsarPlanDefinition> get isarPlanDefinitions =>
      this.collection();
}

const IsarPlanDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarPlanDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarPlanDefinition>(
    serialize: serializeIsarPlanDefinition,
    deserialize: deserializeIsarPlanDefinition,
    deserializeProperty: deserializeIsarPlanDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarPlanDefinition(IsarWriter writer, IsarPlanDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarPlanDefinition deserializeIsarPlanDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarPlanDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarPlanDefinitionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarPlanDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarPlanDefinitionUpdateImpl implements _IsarPlanDefinitionUpdate {
  const _IsarPlanDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarPlanDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarPlanDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarPlanDefinitionUpdateAllImpl implements _IsarPlanDefinitionUpdateAll {
  const _IsarPlanDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarPlanDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarPlanDefinitionUpdate on IsarCollection<int, IsarPlanDefinition> {
  _IsarPlanDefinitionUpdate get update => _IsarPlanDefinitionUpdateImpl(this);

  _IsarPlanDefinitionUpdateAll get updateAll =>
      _IsarPlanDefinitionUpdateAllImpl(this);
}

sealed class _IsarPlanDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarPlanDefinitionQueryUpdateImpl
    implements _IsarPlanDefinitionQueryUpdate {
  const _IsarPlanDefinitionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarPlanDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarPlanDefinitionQueryUpdate on IsarQuery<IsarPlanDefinition> {
  _IsarPlanDefinitionQueryUpdate get updateFirst =>
      _IsarPlanDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarPlanDefinitionQueryUpdate get updateAll =>
      _IsarPlanDefinitionQueryUpdateImpl(this);
}

class _IsarPlanDefinitionQueryBuilderUpdateImpl
    implements _IsarPlanDefinitionQueryUpdate {
  const _IsarPlanDefinitionQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarPlanDefinitionQueryBuilderUpdate
    on QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QOperations> {
  _IsarPlanDefinitionQueryUpdate get updateFirst =>
      _IsarPlanDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarPlanDefinitionQueryUpdate get updateAll =>
      _IsarPlanDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarPlanDefinitionQueryFilter
    on QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QFilterCondition> {
  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarPlanDefinitionQueryObject
    on QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QFilterCondition> {}

extension IsarPlanDefinitionQuerySortBy
    on QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QSortBy> {
  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarPlanDefinitionQuerySortThenBy
    on QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QSortThenBy> {
  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarPlanDefinitionQueryWhereDistinct
    on QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QDistinct> {
  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarPlanDefinitionQueryProperty1
    on QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QProperty> {
  QueryBuilder<IsarPlanDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPlanDefinition, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPlanDefinition, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarPlanDefinitionQueryProperty2<R>
    on QueryBuilder<IsarPlanDefinition, R, QAfterProperty> {
  QueryBuilder<IsarPlanDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPlanDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPlanDefinition, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarPlanDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarPlanDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarPlanDefinition, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPlanDefinition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPlanDefinition, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarPractitionerCollection on Isar {
  IsarCollection<int, IsarPractitioner> get isarPractitioners =>
      this.collection();
}

const IsarPractitionerSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarPractitioner',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarPractitioner>(
    serialize: serializeIsarPractitioner,
    deserialize: deserializeIsarPractitioner,
    deserializeProperty: deserializeIsarPractitionerProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarPractitioner(IsarWriter writer, IsarPractitioner object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarPractitioner deserializeIsarPractitioner(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarPractitioner(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarPractitionerProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarPractitionerUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarPractitionerUpdateImpl implements _IsarPractitionerUpdate {
  const _IsarPractitionerUpdateImpl(this.collection);

  final IsarCollection<int, IsarPractitioner> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarPractitionerUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarPractitionerUpdateAllImpl implements _IsarPractitionerUpdateAll {
  const _IsarPractitionerUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarPractitioner> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarPractitionerUpdate on IsarCollection<int, IsarPractitioner> {
  _IsarPractitionerUpdate get update => _IsarPractitionerUpdateImpl(this);

  _IsarPractitionerUpdateAll get updateAll =>
      _IsarPractitionerUpdateAllImpl(this);
}

sealed class _IsarPractitionerQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarPractitionerQueryUpdateImpl implements _IsarPractitionerQueryUpdate {
  const _IsarPractitionerQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarPractitioner> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarPractitionerQueryUpdate on IsarQuery<IsarPractitioner> {
  _IsarPractitionerQueryUpdate get updateFirst =>
      _IsarPractitionerQueryUpdateImpl(this, limit: 1);

  _IsarPractitionerQueryUpdate get updateAll =>
      _IsarPractitionerQueryUpdateImpl(this);
}

class _IsarPractitionerQueryBuilderUpdateImpl
    implements _IsarPractitionerQueryUpdate {
  const _IsarPractitionerQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarPractitioner, IsarPractitioner, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarPractitionerQueryBuilderUpdate
    on QueryBuilder<IsarPractitioner, IsarPractitioner, QOperations> {
  _IsarPractitionerQueryUpdate get updateFirst =>
      _IsarPractitionerQueryBuilderUpdateImpl(this, limit: 1);

  _IsarPractitionerQueryUpdate get updateAll =>
      _IsarPractitionerQueryBuilderUpdateImpl(this);
}

extension IsarPractitionerQueryFilter
    on QueryBuilder<IsarPractitioner, IsarPractitioner, QFilterCondition> {
  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarPractitionerQueryObject
    on QueryBuilder<IsarPractitioner, IsarPractitioner, QFilterCondition> {}

extension IsarPractitionerQuerySortBy
    on QueryBuilder<IsarPractitioner, IsarPractitioner, QSortBy> {
  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarPractitionerQuerySortThenBy
    on QueryBuilder<IsarPractitioner, IsarPractitioner, QSortThenBy> {
  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarPractitionerQueryWhereDistinct
    on QueryBuilder<IsarPractitioner, IsarPractitioner, QDistinct> {
  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarPractitionerQueryProperty1
    on QueryBuilder<IsarPractitioner, IsarPractitioner, QProperty> {
  QueryBuilder<IsarPractitioner, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPractitioner, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPractitioner, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarPractitionerQueryProperty2<R>
    on QueryBuilder<IsarPractitioner, R, QAfterProperty> {
  QueryBuilder<IsarPractitioner, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPractitioner, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPractitioner, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarPractitionerQueryProperty3<R1, R2>
    on QueryBuilder<IsarPractitioner, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarPractitioner, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPractitioner, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPractitioner, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarPractitionerRoleCollection on Isar {
  IsarCollection<int, IsarPractitionerRole> get isarPractitionerRoles =>
      this.collection();
}

const IsarPractitionerRoleSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarPractitionerRole',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarPractitionerRole>(
    serialize: serializeIsarPractitionerRole,
    deserialize: deserializeIsarPractitionerRole,
    deserializeProperty: deserializeIsarPractitionerRoleProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarPractitionerRole(
    IsarWriter writer, IsarPractitionerRole object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarPractitionerRole deserializeIsarPractitionerRole(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarPractitionerRole(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarPractitionerRoleProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarPractitionerRoleUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarPractitionerRoleUpdateImpl implements _IsarPractitionerRoleUpdate {
  const _IsarPractitionerRoleUpdateImpl(this.collection);

  final IsarCollection<int, IsarPractitionerRole> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarPractitionerRoleUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarPractitionerRoleUpdateAllImpl
    implements _IsarPractitionerRoleUpdateAll {
  const _IsarPractitionerRoleUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarPractitionerRole> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarPractitionerRoleUpdate
    on IsarCollection<int, IsarPractitionerRole> {
  _IsarPractitionerRoleUpdate get update =>
      _IsarPractitionerRoleUpdateImpl(this);

  _IsarPractitionerRoleUpdateAll get updateAll =>
      _IsarPractitionerRoleUpdateAllImpl(this);
}

sealed class _IsarPractitionerRoleQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarPractitionerRoleQueryUpdateImpl
    implements _IsarPractitionerRoleQueryUpdate {
  const _IsarPractitionerRoleQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarPractitionerRole> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarPractitionerRoleQueryUpdate on IsarQuery<IsarPractitionerRole> {
  _IsarPractitionerRoleQueryUpdate get updateFirst =>
      _IsarPractitionerRoleQueryUpdateImpl(this, limit: 1);

  _IsarPractitionerRoleQueryUpdate get updateAll =>
      _IsarPractitionerRoleQueryUpdateImpl(this);
}

class _IsarPractitionerRoleQueryBuilderUpdateImpl
    implements _IsarPractitionerRoleQueryUpdate {
  const _IsarPractitionerRoleQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarPractitionerRoleQueryBuilderUpdate
    on QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QOperations> {
  _IsarPractitionerRoleQueryUpdate get updateFirst =>
      _IsarPractitionerRoleQueryBuilderUpdateImpl(this, limit: 1);

  _IsarPractitionerRoleQueryUpdate get updateAll =>
      _IsarPractitionerRoleQueryBuilderUpdateImpl(this);
}

extension IsarPractitionerRoleQueryFilter on QueryBuilder<IsarPractitionerRole,
    IsarPractitionerRole, QFilterCondition> {
  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarPractitionerRoleQueryObject on QueryBuilder<IsarPractitionerRole,
    IsarPractitionerRole, QFilterCondition> {}

extension IsarPractitionerRoleQuerySortBy
    on QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QSortBy> {
  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarPractitionerRoleQuerySortThenBy
    on QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QSortThenBy> {
  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarPractitionerRoleQueryWhereDistinct
    on QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QDistinct> {
  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarPractitionerRoleQueryProperty1
    on QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QProperty> {
  QueryBuilder<IsarPractitionerRole, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPractitionerRole, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPractitionerRole, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarPractitionerRoleQueryProperty2<R>
    on QueryBuilder<IsarPractitionerRole, R, QAfterProperty> {
  QueryBuilder<IsarPractitionerRole, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPractitionerRole, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPractitionerRole, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarPractitionerRoleQueryProperty3<R1, R2>
    on QueryBuilder<IsarPractitionerRole, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarPractitionerRole, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPractitionerRole, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarPractitionerRole, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarProcedureCollection on Isar {
  IsarCollection<int, IsarProcedure> get isarProcedures => this.collection();
}

const IsarProcedureSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarProcedure',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarProcedure>(
    serialize: serializeIsarProcedure,
    deserialize: deserializeIsarProcedure,
    deserializeProperty: deserializeIsarProcedureProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarProcedure(IsarWriter writer, IsarProcedure object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarProcedure deserializeIsarProcedure(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarProcedure(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarProcedureProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarProcedureUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarProcedureUpdateImpl implements _IsarProcedureUpdate {
  const _IsarProcedureUpdateImpl(this.collection);

  final IsarCollection<int, IsarProcedure> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarProcedureUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarProcedureUpdateAllImpl implements _IsarProcedureUpdateAll {
  const _IsarProcedureUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarProcedure> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarProcedureUpdate on IsarCollection<int, IsarProcedure> {
  _IsarProcedureUpdate get update => _IsarProcedureUpdateImpl(this);

  _IsarProcedureUpdateAll get updateAll => _IsarProcedureUpdateAllImpl(this);
}

sealed class _IsarProcedureQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarProcedureQueryUpdateImpl implements _IsarProcedureQueryUpdate {
  const _IsarProcedureQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarProcedure> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarProcedureQueryUpdate on IsarQuery<IsarProcedure> {
  _IsarProcedureQueryUpdate get updateFirst =>
      _IsarProcedureQueryUpdateImpl(this, limit: 1);

  _IsarProcedureQueryUpdate get updateAll =>
      _IsarProcedureQueryUpdateImpl(this);
}

class _IsarProcedureQueryBuilderUpdateImpl
    implements _IsarProcedureQueryUpdate {
  const _IsarProcedureQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarProcedure, IsarProcedure, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarProcedureQueryBuilderUpdate
    on QueryBuilder<IsarProcedure, IsarProcedure, QOperations> {
  _IsarProcedureQueryUpdate get updateFirst =>
      _IsarProcedureQueryBuilderUpdateImpl(this, limit: 1);

  _IsarProcedureQueryUpdate get updateAll =>
      _IsarProcedureQueryBuilderUpdateImpl(this);
}

extension IsarProcedureQueryFilter
    on QueryBuilder<IsarProcedure, IsarProcedure, QFilterCondition> {
  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarProcedureQueryObject
    on QueryBuilder<IsarProcedure, IsarProcedure, QFilterCondition> {}

extension IsarProcedureQuerySortBy
    on QueryBuilder<IsarProcedure, IsarProcedure, QSortBy> {
  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarProcedureQuerySortThenBy
    on QueryBuilder<IsarProcedure, IsarProcedure, QSortThenBy> {
  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarProcedureQueryWhereDistinct
    on QueryBuilder<IsarProcedure, IsarProcedure, QDistinct> {
  QueryBuilder<IsarProcedure, IsarProcedure, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarProcedureQueryProperty1
    on QueryBuilder<IsarProcedure, IsarProcedure, QProperty> {
  QueryBuilder<IsarProcedure, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarProcedure, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarProcedure, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarProcedureQueryProperty2<R>
    on QueryBuilder<IsarProcedure, R, QAfterProperty> {
  QueryBuilder<IsarProcedure, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarProcedure, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarProcedure, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarProcedureQueryProperty3<R1, R2>
    on QueryBuilder<IsarProcedure, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarProcedure, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarProcedure, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarProcedure, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarProvenanceCollection on Isar {
  IsarCollection<int, IsarProvenance> get isarProvenances => this.collection();
}

const IsarProvenanceSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarProvenance',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarProvenance>(
    serialize: serializeIsarProvenance,
    deserialize: deserializeIsarProvenance,
    deserializeProperty: deserializeIsarProvenanceProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarProvenance(IsarWriter writer, IsarProvenance object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarProvenance deserializeIsarProvenance(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarProvenance(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarProvenanceProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarProvenanceUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarProvenanceUpdateImpl implements _IsarProvenanceUpdate {
  const _IsarProvenanceUpdateImpl(this.collection);

  final IsarCollection<int, IsarProvenance> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarProvenanceUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarProvenanceUpdateAllImpl implements _IsarProvenanceUpdateAll {
  const _IsarProvenanceUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarProvenance> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarProvenanceUpdate on IsarCollection<int, IsarProvenance> {
  _IsarProvenanceUpdate get update => _IsarProvenanceUpdateImpl(this);

  _IsarProvenanceUpdateAll get updateAll => _IsarProvenanceUpdateAllImpl(this);
}

sealed class _IsarProvenanceQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarProvenanceQueryUpdateImpl implements _IsarProvenanceQueryUpdate {
  const _IsarProvenanceQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarProvenance> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarProvenanceQueryUpdate on IsarQuery<IsarProvenance> {
  _IsarProvenanceQueryUpdate get updateFirst =>
      _IsarProvenanceQueryUpdateImpl(this, limit: 1);

  _IsarProvenanceQueryUpdate get updateAll =>
      _IsarProvenanceQueryUpdateImpl(this);
}

class _IsarProvenanceQueryBuilderUpdateImpl
    implements _IsarProvenanceQueryUpdate {
  const _IsarProvenanceQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarProvenance, IsarProvenance, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarProvenanceQueryBuilderUpdate
    on QueryBuilder<IsarProvenance, IsarProvenance, QOperations> {
  _IsarProvenanceQueryUpdate get updateFirst =>
      _IsarProvenanceQueryBuilderUpdateImpl(this, limit: 1);

  _IsarProvenanceQueryUpdate get updateAll =>
      _IsarProvenanceQueryBuilderUpdateImpl(this);
}

extension IsarProvenanceQueryFilter
    on QueryBuilder<IsarProvenance, IsarProvenance, QFilterCondition> {
  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarProvenanceQueryObject
    on QueryBuilder<IsarProvenance, IsarProvenance, QFilterCondition> {}

extension IsarProvenanceQuerySortBy
    on QueryBuilder<IsarProvenance, IsarProvenance, QSortBy> {
  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarProvenanceQuerySortThenBy
    on QueryBuilder<IsarProvenance, IsarProvenance, QSortThenBy> {
  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarProvenanceQueryWhereDistinct
    on QueryBuilder<IsarProvenance, IsarProvenance, QDistinct> {
  QueryBuilder<IsarProvenance, IsarProvenance, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarProvenanceQueryProperty1
    on QueryBuilder<IsarProvenance, IsarProvenance, QProperty> {
  QueryBuilder<IsarProvenance, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarProvenance, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarProvenance, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarProvenanceQueryProperty2<R>
    on QueryBuilder<IsarProvenance, R, QAfterProperty> {
  QueryBuilder<IsarProvenance, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarProvenance, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarProvenance, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarProvenanceQueryProperty3<R1, R2>
    on QueryBuilder<IsarProvenance, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarProvenance, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarProvenance, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarProvenance, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarQuestionnaireCollection on Isar {
  IsarCollection<int, IsarQuestionnaire> get isarQuestionnaires =>
      this.collection();
}

const IsarQuestionnaireSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarQuestionnaire',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarQuestionnaire>(
    serialize: serializeIsarQuestionnaire,
    deserialize: deserializeIsarQuestionnaire,
    deserializeProperty: deserializeIsarQuestionnaireProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarQuestionnaire(IsarWriter writer, IsarQuestionnaire object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarQuestionnaire deserializeIsarQuestionnaire(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarQuestionnaire(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarQuestionnaireProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarQuestionnaireUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarQuestionnaireUpdateImpl implements _IsarQuestionnaireUpdate {
  const _IsarQuestionnaireUpdateImpl(this.collection);

  final IsarCollection<int, IsarQuestionnaire> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarQuestionnaireUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarQuestionnaireUpdateAllImpl implements _IsarQuestionnaireUpdateAll {
  const _IsarQuestionnaireUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarQuestionnaire> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarQuestionnaireUpdate on IsarCollection<int, IsarQuestionnaire> {
  _IsarQuestionnaireUpdate get update => _IsarQuestionnaireUpdateImpl(this);

  _IsarQuestionnaireUpdateAll get updateAll =>
      _IsarQuestionnaireUpdateAllImpl(this);
}

sealed class _IsarQuestionnaireQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarQuestionnaireQueryUpdateImpl
    implements _IsarQuestionnaireQueryUpdate {
  const _IsarQuestionnaireQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarQuestionnaire> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarQuestionnaireQueryUpdate on IsarQuery<IsarQuestionnaire> {
  _IsarQuestionnaireQueryUpdate get updateFirst =>
      _IsarQuestionnaireQueryUpdateImpl(this, limit: 1);

  _IsarQuestionnaireQueryUpdate get updateAll =>
      _IsarQuestionnaireQueryUpdateImpl(this);
}

class _IsarQuestionnaireQueryBuilderUpdateImpl
    implements _IsarQuestionnaireQueryUpdate {
  const _IsarQuestionnaireQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarQuestionnaireQueryBuilderUpdate
    on QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QOperations> {
  _IsarQuestionnaireQueryUpdate get updateFirst =>
      _IsarQuestionnaireQueryBuilderUpdateImpl(this, limit: 1);

  _IsarQuestionnaireQueryUpdate get updateAll =>
      _IsarQuestionnaireQueryBuilderUpdateImpl(this);
}

extension IsarQuestionnaireQueryFilter
    on QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QFilterCondition> {
  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarQuestionnaireQueryObject
    on QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QFilterCondition> {}

extension IsarQuestionnaireQuerySortBy
    on QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QSortBy> {
  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarQuestionnaireQuerySortThenBy
    on QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QSortThenBy> {
  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarQuestionnaireQueryWhereDistinct
    on QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QDistinct> {
  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarQuestionnaireQueryProperty1
    on QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QProperty> {
  QueryBuilder<IsarQuestionnaire, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarQuestionnaire, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarQuestionnaire, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarQuestionnaireQueryProperty2<R>
    on QueryBuilder<IsarQuestionnaire, R, QAfterProperty> {
  QueryBuilder<IsarQuestionnaire, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarQuestionnaire, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarQuestionnaire, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarQuestionnaireQueryProperty3<R1, R2>
    on QueryBuilder<IsarQuestionnaire, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarQuestionnaire, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarQuestionnaire, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarQuestionnaire, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarQuestionnaireResponseCollection on Isar {
  IsarCollection<int, IsarQuestionnaireResponse>
      get isarQuestionnaireResponses => this.collection();
}

const IsarQuestionnaireResponseSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarQuestionnaireResponse',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarQuestionnaireResponse>(
    serialize: serializeIsarQuestionnaireResponse,
    deserialize: deserializeIsarQuestionnaireResponse,
    deserializeProperty: deserializeIsarQuestionnaireResponseProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarQuestionnaireResponse(
    IsarWriter writer, IsarQuestionnaireResponse object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarQuestionnaireResponse deserializeIsarQuestionnaireResponse(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarQuestionnaireResponse(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarQuestionnaireResponseProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarQuestionnaireResponseUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarQuestionnaireResponseUpdateImpl
    implements _IsarQuestionnaireResponseUpdate {
  const _IsarQuestionnaireResponseUpdateImpl(this.collection);

  final IsarCollection<int, IsarQuestionnaireResponse> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarQuestionnaireResponseUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarQuestionnaireResponseUpdateAllImpl
    implements _IsarQuestionnaireResponseUpdateAll {
  const _IsarQuestionnaireResponseUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarQuestionnaireResponse> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarQuestionnaireResponseUpdate
    on IsarCollection<int, IsarQuestionnaireResponse> {
  _IsarQuestionnaireResponseUpdate get update =>
      _IsarQuestionnaireResponseUpdateImpl(this);

  _IsarQuestionnaireResponseUpdateAll get updateAll =>
      _IsarQuestionnaireResponseUpdateAllImpl(this);
}

sealed class _IsarQuestionnaireResponseQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarQuestionnaireResponseQueryUpdateImpl
    implements _IsarQuestionnaireResponseQueryUpdate {
  const _IsarQuestionnaireResponseQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarQuestionnaireResponse> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarQuestionnaireResponseQueryUpdate
    on IsarQuery<IsarQuestionnaireResponse> {
  _IsarQuestionnaireResponseQueryUpdate get updateFirst =>
      _IsarQuestionnaireResponseQueryUpdateImpl(this, limit: 1);

  _IsarQuestionnaireResponseQueryUpdate get updateAll =>
      _IsarQuestionnaireResponseQueryUpdateImpl(this);
}

class _IsarQuestionnaireResponseQueryBuilderUpdateImpl
    implements _IsarQuestionnaireResponseQueryUpdate {
  const _IsarQuestionnaireResponseQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarQuestionnaireResponseQueryBuilderUpdate on QueryBuilder<
    IsarQuestionnaireResponse, IsarQuestionnaireResponse, QOperations> {
  _IsarQuestionnaireResponseQueryUpdate get updateFirst =>
      _IsarQuestionnaireResponseQueryBuilderUpdateImpl(this, limit: 1);

  _IsarQuestionnaireResponseQueryUpdate get updateAll =>
      _IsarQuestionnaireResponseQueryBuilderUpdateImpl(this);
}

extension IsarQuestionnaireResponseQueryFilter on QueryBuilder<
    IsarQuestionnaireResponse, IsarQuestionnaireResponse, QFilterCondition> {
  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarQuestionnaireResponseQueryObject on QueryBuilder<
    IsarQuestionnaireResponse, IsarQuestionnaireResponse, QFilterCondition> {}

extension IsarQuestionnaireResponseQuerySortBy on QueryBuilder<
    IsarQuestionnaireResponse, IsarQuestionnaireResponse, QSortBy> {
  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarQuestionnaireResponseQuerySortThenBy on QueryBuilder<
    IsarQuestionnaireResponse, IsarQuestionnaireResponse, QSortThenBy> {
  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarQuestionnaireResponseQueryWhereDistinct on QueryBuilder<
    IsarQuestionnaireResponse, IsarQuestionnaireResponse, QDistinct> {
  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarQuestionnaireResponseQueryProperty1 on QueryBuilder<
    IsarQuestionnaireResponse, IsarQuestionnaireResponse, QProperty> {
  QueryBuilder<IsarQuestionnaireResponse, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarQuestionnaireResponseQueryProperty2<R>
    on QueryBuilder<IsarQuestionnaireResponse, R, QAfterProperty> {
  QueryBuilder<IsarQuestionnaireResponse, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarQuestionnaireResponseQueryProperty3<R1, R2>
    on QueryBuilder<IsarQuestionnaireResponse, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarQuestionnaireResponse, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarRegulatedAuthorizationCollection on Isar {
  IsarCollection<int, IsarRegulatedAuthorization>
      get isarRegulatedAuthorizations => this.collection();
}

const IsarRegulatedAuthorizationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarRegulatedAuthorization',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarRegulatedAuthorization>(
    serialize: serializeIsarRegulatedAuthorization,
    deserialize: deserializeIsarRegulatedAuthorization,
    deserializeProperty: deserializeIsarRegulatedAuthorizationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarRegulatedAuthorization(
    IsarWriter writer, IsarRegulatedAuthorization object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarRegulatedAuthorization deserializeIsarRegulatedAuthorization(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarRegulatedAuthorization(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarRegulatedAuthorizationProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarRegulatedAuthorizationUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarRegulatedAuthorizationUpdateImpl
    implements _IsarRegulatedAuthorizationUpdate {
  const _IsarRegulatedAuthorizationUpdateImpl(this.collection);

  final IsarCollection<int, IsarRegulatedAuthorization> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarRegulatedAuthorizationUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarRegulatedAuthorizationUpdateAllImpl
    implements _IsarRegulatedAuthorizationUpdateAll {
  const _IsarRegulatedAuthorizationUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarRegulatedAuthorization> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarRegulatedAuthorizationUpdate
    on IsarCollection<int, IsarRegulatedAuthorization> {
  _IsarRegulatedAuthorizationUpdate get update =>
      _IsarRegulatedAuthorizationUpdateImpl(this);

  _IsarRegulatedAuthorizationUpdateAll get updateAll =>
      _IsarRegulatedAuthorizationUpdateAllImpl(this);
}

sealed class _IsarRegulatedAuthorizationQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarRegulatedAuthorizationQueryUpdateImpl
    implements _IsarRegulatedAuthorizationQueryUpdate {
  const _IsarRegulatedAuthorizationQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarRegulatedAuthorization> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarRegulatedAuthorizationQueryUpdate
    on IsarQuery<IsarRegulatedAuthorization> {
  _IsarRegulatedAuthorizationQueryUpdate get updateFirst =>
      _IsarRegulatedAuthorizationQueryUpdateImpl(this, limit: 1);

  _IsarRegulatedAuthorizationQueryUpdate get updateAll =>
      _IsarRegulatedAuthorizationQueryUpdateImpl(this);
}

class _IsarRegulatedAuthorizationQueryBuilderUpdateImpl
    implements _IsarRegulatedAuthorizationQueryUpdate {
  const _IsarRegulatedAuthorizationQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarRegulatedAuthorizationQueryBuilderUpdate on QueryBuilder<
    IsarRegulatedAuthorization, IsarRegulatedAuthorization, QOperations> {
  _IsarRegulatedAuthorizationQueryUpdate get updateFirst =>
      _IsarRegulatedAuthorizationQueryBuilderUpdateImpl(this, limit: 1);

  _IsarRegulatedAuthorizationQueryUpdate get updateAll =>
      _IsarRegulatedAuthorizationQueryBuilderUpdateImpl(this);
}

extension IsarRegulatedAuthorizationQueryFilter on QueryBuilder<
    IsarRegulatedAuthorization, IsarRegulatedAuthorization, QFilterCondition> {
  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarRegulatedAuthorizationQueryObject on QueryBuilder<
    IsarRegulatedAuthorization, IsarRegulatedAuthorization, QFilterCondition> {}

extension IsarRegulatedAuthorizationQuerySortBy on QueryBuilder<
    IsarRegulatedAuthorization, IsarRegulatedAuthorization, QSortBy> {
  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarRegulatedAuthorizationQuerySortThenBy on QueryBuilder<
    IsarRegulatedAuthorization, IsarRegulatedAuthorization, QSortThenBy> {
  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarRegulatedAuthorizationQueryWhereDistinct on QueryBuilder<
    IsarRegulatedAuthorization, IsarRegulatedAuthorization, QDistinct> {
  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarRegulatedAuthorizationQueryProperty1 on QueryBuilder<
    IsarRegulatedAuthorization, IsarRegulatedAuthorization, QProperty> {
  QueryBuilder<IsarRegulatedAuthorization, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarRegulatedAuthorizationQueryProperty2<R>
    on QueryBuilder<IsarRegulatedAuthorization, R, QAfterProperty> {
  QueryBuilder<IsarRegulatedAuthorization, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarRegulatedAuthorizationQueryProperty3<R1, R2>
    on QueryBuilder<IsarRegulatedAuthorization, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarRegulatedAuthorization, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarRelatedPersonCollection on Isar {
  IsarCollection<int, IsarRelatedPerson> get isarRelatedPersons =>
      this.collection();
}

const IsarRelatedPersonSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarRelatedPerson',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarRelatedPerson>(
    serialize: serializeIsarRelatedPerson,
    deserialize: deserializeIsarRelatedPerson,
    deserializeProperty: deserializeIsarRelatedPersonProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarRelatedPerson(IsarWriter writer, IsarRelatedPerson object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarRelatedPerson deserializeIsarRelatedPerson(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarRelatedPerson(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarRelatedPersonProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarRelatedPersonUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarRelatedPersonUpdateImpl implements _IsarRelatedPersonUpdate {
  const _IsarRelatedPersonUpdateImpl(this.collection);

  final IsarCollection<int, IsarRelatedPerson> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarRelatedPersonUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarRelatedPersonUpdateAllImpl implements _IsarRelatedPersonUpdateAll {
  const _IsarRelatedPersonUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarRelatedPerson> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarRelatedPersonUpdate on IsarCollection<int, IsarRelatedPerson> {
  _IsarRelatedPersonUpdate get update => _IsarRelatedPersonUpdateImpl(this);

  _IsarRelatedPersonUpdateAll get updateAll =>
      _IsarRelatedPersonUpdateAllImpl(this);
}

sealed class _IsarRelatedPersonQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarRelatedPersonQueryUpdateImpl
    implements _IsarRelatedPersonQueryUpdate {
  const _IsarRelatedPersonQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarRelatedPerson> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarRelatedPersonQueryUpdate on IsarQuery<IsarRelatedPerson> {
  _IsarRelatedPersonQueryUpdate get updateFirst =>
      _IsarRelatedPersonQueryUpdateImpl(this, limit: 1);

  _IsarRelatedPersonQueryUpdate get updateAll =>
      _IsarRelatedPersonQueryUpdateImpl(this);
}

class _IsarRelatedPersonQueryBuilderUpdateImpl
    implements _IsarRelatedPersonQueryUpdate {
  const _IsarRelatedPersonQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarRelatedPersonQueryBuilderUpdate
    on QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QOperations> {
  _IsarRelatedPersonQueryUpdate get updateFirst =>
      _IsarRelatedPersonQueryBuilderUpdateImpl(this, limit: 1);

  _IsarRelatedPersonQueryUpdate get updateAll =>
      _IsarRelatedPersonQueryBuilderUpdateImpl(this);
}

extension IsarRelatedPersonQueryFilter
    on QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QFilterCondition> {
  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarRelatedPersonQueryObject
    on QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QFilterCondition> {}

extension IsarRelatedPersonQuerySortBy
    on QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QSortBy> {
  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarRelatedPersonQuerySortThenBy
    on QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QSortThenBy> {
  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarRelatedPersonQueryWhereDistinct
    on QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QDistinct> {
  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarRelatedPersonQueryProperty1
    on QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QProperty> {
  QueryBuilder<IsarRelatedPerson, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRelatedPerson, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarRelatedPerson, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarRelatedPersonQueryProperty2<R>
    on QueryBuilder<IsarRelatedPerson, R, QAfterProperty> {
  QueryBuilder<IsarRelatedPerson, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRelatedPerson, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarRelatedPerson, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarRelatedPersonQueryProperty3<R1, R2>
    on QueryBuilder<IsarRelatedPerson, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarRelatedPerson, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRelatedPerson, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarRelatedPerson, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarRequestGroupCollection on Isar {
  IsarCollection<int, IsarRequestGroup> get isarRequestGroups =>
      this.collection();
}

const IsarRequestGroupSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarRequestGroup',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarRequestGroup>(
    serialize: serializeIsarRequestGroup,
    deserialize: deserializeIsarRequestGroup,
    deserializeProperty: deserializeIsarRequestGroupProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarRequestGroup(IsarWriter writer, IsarRequestGroup object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarRequestGroup deserializeIsarRequestGroup(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarRequestGroup(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarRequestGroupProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarRequestGroupUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarRequestGroupUpdateImpl implements _IsarRequestGroupUpdate {
  const _IsarRequestGroupUpdateImpl(this.collection);

  final IsarCollection<int, IsarRequestGroup> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarRequestGroupUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarRequestGroupUpdateAllImpl implements _IsarRequestGroupUpdateAll {
  const _IsarRequestGroupUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarRequestGroup> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarRequestGroupUpdate on IsarCollection<int, IsarRequestGroup> {
  _IsarRequestGroupUpdate get update => _IsarRequestGroupUpdateImpl(this);

  _IsarRequestGroupUpdateAll get updateAll =>
      _IsarRequestGroupUpdateAllImpl(this);
}

sealed class _IsarRequestGroupQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarRequestGroupQueryUpdateImpl implements _IsarRequestGroupQueryUpdate {
  const _IsarRequestGroupQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarRequestGroup> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarRequestGroupQueryUpdate on IsarQuery<IsarRequestGroup> {
  _IsarRequestGroupQueryUpdate get updateFirst =>
      _IsarRequestGroupQueryUpdateImpl(this, limit: 1);

  _IsarRequestGroupQueryUpdate get updateAll =>
      _IsarRequestGroupQueryUpdateImpl(this);
}

class _IsarRequestGroupQueryBuilderUpdateImpl
    implements _IsarRequestGroupQueryUpdate {
  const _IsarRequestGroupQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarRequestGroup, IsarRequestGroup, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarRequestGroupQueryBuilderUpdate
    on QueryBuilder<IsarRequestGroup, IsarRequestGroup, QOperations> {
  _IsarRequestGroupQueryUpdate get updateFirst =>
      _IsarRequestGroupQueryBuilderUpdateImpl(this, limit: 1);

  _IsarRequestGroupQueryUpdate get updateAll =>
      _IsarRequestGroupQueryBuilderUpdateImpl(this);
}

extension IsarRequestGroupQueryFilter
    on QueryBuilder<IsarRequestGroup, IsarRequestGroup, QFilterCondition> {
  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarRequestGroupQueryObject
    on QueryBuilder<IsarRequestGroup, IsarRequestGroup, QFilterCondition> {}

extension IsarRequestGroupQuerySortBy
    on QueryBuilder<IsarRequestGroup, IsarRequestGroup, QSortBy> {
  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarRequestGroupQuerySortThenBy
    on QueryBuilder<IsarRequestGroup, IsarRequestGroup, QSortThenBy> {
  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarRequestGroupQueryWhereDistinct
    on QueryBuilder<IsarRequestGroup, IsarRequestGroup, QDistinct> {
  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarRequestGroupQueryProperty1
    on QueryBuilder<IsarRequestGroup, IsarRequestGroup, QProperty> {
  QueryBuilder<IsarRequestGroup, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRequestGroup, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarRequestGroup, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarRequestGroupQueryProperty2<R>
    on QueryBuilder<IsarRequestGroup, R, QAfterProperty> {
  QueryBuilder<IsarRequestGroup, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRequestGroup, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarRequestGroup, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarRequestGroupQueryProperty3<R1, R2>
    on QueryBuilder<IsarRequestGroup, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarRequestGroup, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRequestGroup, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarRequestGroup, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarResearchDefinitionCollection on Isar {
  IsarCollection<int, IsarResearchDefinition> get isarResearchDefinitions =>
      this.collection();
}

const IsarResearchDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarResearchDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarResearchDefinition>(
    serialize: serializeIsarResearchDefinition,
    deserialize: deserializeIsarResearchDefinition,
    deserializeProperty: deserializeIsarResearchDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarResearchDefinition(
    IsarWriter writer, IsarResearchDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarResearchDefinition deserializeIsarResearchDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarResearchDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarResearchDefinitionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarResearchDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarResearchDefinitionUpdateImpl
    implements _IsarResearchDefinitionUpdate {
  const _IsarResearchDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarResearchDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarResearchDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarResearchDefinitionUpdateAllImpl
    implements _IsarResearchDefinitionUpdateAll {
  const _IsarResearchDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarResearchDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarResearchDefinitionUpdate
    on IsarCollection<int, IsarResearchDefinition> {
  _IsarResearchDefinitionUpdate get update =>
      _IsarResearchDefinitionUpdateImpl(this);

  _IsarResearchDefinitionUpdateAll get updateAll =>
      _IsarResearchDefinitionUpdateAllImpl(this);
}

sealed class _IsarResearchDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarResearchDefinitionQueryUpdateImpl
    implements _IsarResearchDefinitionQueryUpdate {
  const _IsarResearchDefinitionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarResearchDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarResearchDefinitionQueryUpdate
    on IsarQuery<IsarResearchDefinition> {
  _IsarResearchDefinitionQueryUpdate get updateFirst =>
      _IsarResearchDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarResearchDefinitionQueryUpdate get updateAll =>
      _IsarResearchDefinitionQueryUpdateImpl(this);
}

class _IsarResearchDefinitionQueryBuilderUpdateImpl
    implements _IsarResearchDefinitionQueryUpdate {
  const _IsarResearchDefinitionQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarResearchDefinitionQueryBuilderUpdate on QueryBuilder<
    IsarResearchDefinition, IsarResearchDefinition, QOperations> {
  _IsarResearchDefinitionQueryUpdate get updateFirst =>
      _IsarResearchDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarResearchDefinitionQueryUpdate get updateAll =>
      _IsarResearchDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarResearchDefinitionQueryFilter on QueryBuilder<
    IsarResearchDefinition, IsarResearchDefinition, QFilterCondition> {
  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarResearchDefinitionQueryObject on QueryBuilder<
    IsarResearchDefinition, IsarResearchDefinition, QFilterCondition> {}

extension IsarResearchDefinitionQuerySortBy
    on QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QSortBy> {
  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarResearchDefinitionQuerySortThenBy on QueryBuilder<
    IsarResearchDefinition, IsarResearchDefinition, QSortThenBy> {
  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarResearchDefinitionQueryWhereDistinct
    on QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QDistinct> {
  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarResearchDefinitionQueryProperty1
    on QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QProperty> {
  QueryBuilder<IsarResearchDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchDefinition, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarResearchDefinition, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarResearchDefinitionQueryProperty2<R>
    on QueryBuilder<IsarResearchDefinition, R, QAfterProperty> {
  QueryBuilder<IsarResearchDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarResearchDefinition, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarResearchDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarResearchDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarResearchDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchDefinition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarResearchDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarResearchElementDefinitionCollection on Isar {
  IsarCollection<int, IsarResearchElementDefinition>
      get isarResearchElementDefinitions => this.collection();
}

const IsarResearchElementDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarResearchElementDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarResearchElementDefinition>(
    serialize: serializeIsarResearchElementDefinition,
    deserialize: deserializeIsarResearchElementDefinition,
    deserializeProperty: deserializeIsarResearchElementDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarResearchElementDefinition(
    IsarWriter writer, IsarResearchElementDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarResearchElementDefinition deserializeIsarResearchElementDefinition(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarResearchElementDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarResearchElementDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarResearchElementDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarResearchElementDefinitionUpdateImpl
    implements _IsarResearchElementDefinitionUpdate {
  const _IsarResearchElementDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarResearchElementDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarResearchElementDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarResearchElementDefinitionUpdateAllImpl
    implements _IsarResearchElementDefinitionUpdateAll {
  const _IsarResearchElementDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarResearchElementDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarResearchElementDefinitionUpdate
    on IsarCollection<int, IsarResearchElementDefinition> {
  _IsarResearchElementDefinitionUpdate get update =>
      _IsarResearchElementDefinitionUpdateImpl(this);

  _IsarResearchElementDefinitionUpdateAll get updateAll =>
      _IsarResearchElementDefinitionUpdateAllImpl(this);
}

sealed class _IsarResearchElementDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarResearchElementDefinitionQueryUpdateImpl
    implements _IsarResearchElementDefinitionQueryUpdate {
  const _IsarResearchElementDefinitionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarResearchElementDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarResearchElementDefinitionQueryUpdate
    on IsarQuery<IsarResearchElementDefinition> {
  _IsarResearchElementDefinitionQueryUpdate get updateFirst =>
      _IsarResearchElementDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarResearchElementDefinitionQueryUpdate get updateAll =>
      _IsarResearchElementDefinitionQueryUpdateImpl(this);
}

class _IsarResearchElementDefinitionQueryBuilderUpdateImpl
    implements _IsarResearchElementDefinitionQueryUpdate {
  const _IsarResearchElementDefinitionQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarResearchElementDefinition,
      IsarResearchElementDefinition, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarResearchElementDefinitionQueryBuilderUpdate on QueryBuilder<
    IsarResearchElementDefinition, IsarResearchElementDefinition, QOperations> {
  _IsarResearchElementDefinitionQueryUpdate get updateFirst =>
      _IsarResearchElementDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarResearchElementDefinitionQueryUpdate get updateAll =>
      _IsarResearchElementDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarResearchElementDefinitionQueryFilter on QueryBuilder<
    IsarResearchElementDefinition,
    IsarResearchElementDefinition,
    QFilterCondition> {
  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarResearchElementDefinitionQueryObject on QueryBuilder<
    IsarResearchElementDefinition,
    IsarResearchElementDefinition,
    QFilterCondition> {}

extension IsarResearchElementDefinitionQuerySortBy on QueryBuilder<
    IsarResearchElementDefinition, IsarResearchElementDefinition, QSortBy> {
  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarResearchElementDefinitionQuerySortThenBy on QueryBuilder<
    IsarResearchElementDefinition, IsarResearchElementDefinition, QSortThenBy> {
  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarResearchElementDefinitionQueryWhereDistinct on QueryBuilder<
    IsarResearchElementDefinition, IsarResearchElementDefinition, QDistinct> {
  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarResearchElementDefinitionQueryProperty1 on QueryBuilder<
    IsarResearchElementDefinition, IsarResearchElementDefinition, QProperty> {
  QueryBuilder<IsarResearchElementDefinition, int, QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, Map<String, dynamic>,
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarResearchElementDefinitionQueryProperty2<R>
    on QueryBuilder<IsarResearchElementDefinition, R, QAfterProperty> {
  QueryBuilder<IsarResearchElementDefinition, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarResearchElementDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarResearchElementDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarResearchElementDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarResearchStudyCollection on Isar {
  IsarCollection<int, IsarResearchStudy> get isarResearchStudys =>
      this.collection();
}

const IsarResearchStudySchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarResearchStudy',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarResearchStudy>(
    serialize: serializeIsarResearchStudy,
    deserialize: deserializeIsarResearchStudy,
    deserializeProperty: deserializeIsarResearchStudyProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarResearchStudy(IsarWriter writer, IsarResearchStudy object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarResearchStudy deserializeIsarResearchStudy(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarResearchStudy(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarResearchStudyProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarResearchStudyUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarResearchStudyUpdateImpl implements _IsarResearchStudyUpdate {
  const _IsarResearchStudyUpdateImpl(this.collection);

  final IsarCollection<int, IsarResearchStudy> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarResearchStudyUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarResearchStudyUpdateAllImpl implements _IsarResearchStudyUpdateAll {
  const _IsarResearchStudyUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarResearchStudy> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarResearchStudyUpdate on IsarCollection<int, IsarResearchStudy> {
  _IsarResearchStudyUpdate get update => _IsarResearchStudyUpdateImpl(this);

  _IsarResearchStudyUpdateAll get updateAll =>
      _IsarResearchStudyUpdateAllImpl(this);
}

sealed class _IsarResearchStudyQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarResearchStudyQueryUpdateImpl
    implements _IsarResearchStudyQueryUpdate {
  const _IsarResearchStudyQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarResearchStudy> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarResearchStudyQueryUpdate on IsarQuery<IsarResearchStudy> {
  _IsarResearchStudyQueryUpdate get updateFirst =>
      _IsarResearchStudyQueryUpdateImpl(this, limit: 1);

  _IsarResearchStudyQueryUpdate get updateAll =>
      _IsarResearchStudyQueryUpdateImpl(this);
}

class _IsarResearchStudyQueryBuilderUpdateImpl
    implements _IsarResearchStudyQueryUpdate {
  const _IsarResearchStudyQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarResearchStudy, IsarResearchStudy, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarResearchStudyQueryBuilderUpdate
    on QueryBuilder<IsarResearchStudy, IsarResearchStudy, QOperations> {
  _IsarResearchStudyQueryUpdate get updateFirst =>
      _IsarResearchStudyQueryBuilderUpdateImpl(this, limit: 1);

  _IsarResearchStudyQueryUpdate get updateAll =>
      _IsarResearchStudyQueryBuilderUpdateImpl(this);
}

extension IsarResearchStudyQueryFilter
    on QueryBuilder<IsarResearchStudy, IsarResearchStudy, QFilterCondition> {
  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarResearchStudyQueryObject
    on QueryBuilder<IsarResearchStudy, IsarResearchStudy, QFilterCondition> {}

extension IsarResearchStudyQuerySortBy
    on QueryBuilder<IsarResearchStudy, IsarResearchStudy, QSortBy> {
  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarResearchStudyQuerySortThenBy
    on QueryBuilder<IsarResearchStudy, IsarResearchStudy, QSortThenBy> {
  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarResearchStudyQueryWhereDistinct
    on QueryBuilder<IsarResearchStudy, IsarResearchStudy, QDistinct> {
  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarResearchStudyQueryProperty1
    on QueryBuilder<IsarResearchStudy, IsarResearchStudy, QProperty> {
  QueryBuilder<IsarResearchStudy, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchStudy, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarResearchStudy, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarResearchStudyQueryProperty2<R>
    on QueryBuilder<IsarResearchStudy, R, QAfterProperty> {
  QueryBuilder<IsarResearchStudy, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchStudy, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarResearchStudy, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarResearchStudyQueryProperty3<R1, R2>
    on QueryBuilder<IsarResearchStudy, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarResearchStudy, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchStudy, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarResearchStudy, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarResearchSubjectCollection on Isar {
  IsarCollection<int, IsarResearchSubject> get isarResearchSubjects =>
      this.collection();
}

const IsarResearchSubjectSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarResearchSubject',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarResearchSubject>(
    serialize: serializeIsarResearchSubject,
    deserialize: deserializeIsarResearchSubject,
    deserializeProperty: deserializeIsarResearchSubjectProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarResearchSubject(
    IsarWriter writer, IsarResearchSubject object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarResearchSubject deserializeIsarResearchSubject(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarResearchSubject(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarResearchSubjectProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarResearchSubjectUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarResearchSubjectUpdateImpl implements _IsarResearchSubjectUpdate {
  const _IsarResearchSubjectUpdateImpl(this.collection);

  final IsarCollection<int, IsarResearchSubject> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarResearchSubjectUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarResearchSubjectUpdateAllImpl
    implements _IsarResearchSubjectUpdateAll {
  const _IsarResearchSubjectUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarResearchSubject> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarResearchSubjectUpdate
    on IsarCollection<int, IsarResearchSubject> {
  _IsarResearchSubjectUpdate get update => _IsarResearchSubjectUpdateImpl(this);

  _IsarResearchSubjectUpdateAll get updateAll =>
      _IsarResearchSubjectUpdateAllImpl(this);
}

sealed class _IsarResearchSubjectQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarResearchSubjectQueryUpdateImpl
    implements _IsarResearchSubjectQueryUpdate {
  const _IsarResearchSubjectQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarResearchSubject> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarResearchSubjectQueryUpdate on IsarQuery<IsarResearchSubject> {
  _IsarResearchSubjectQueryUpdate get updateFirst =>
      _IsarResearchSubjectQueryUpdateImpl(this, limit: 1);

  _IsarResearchSubjectQueryUpdate get updateAll =>
      _IsarResearchSubjectQueryUpdateImpl(this);
}

class _IsarResearchSubjectQueryBuilderUpdateImpl
    implements _IsarResearchSubjectQueryUpdate {
  const _IsarResearchSubjectQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarResearchSubject, IsarResearchSubject, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarResearchSubjectQueryBuilderUpdate
    on QueryBuilder<IsarResearchSubject, IsarResearchSubject, QOperations> {
  _IsarResearchSubjectQueryUpdate get updateFirst =>
      _IsarResearchSubjectQueryBuilderUpdateImpl(this, limit: 1);

  _IsarResearchSubjectQueryUpdate get updateAll =>
      _IsarResearchSubjectQueryBuilderUpdateImpl(this);
}

extension IsarResearchSubjectQueryFilter on QueryBuilder<IsarResearchSubject,
    IsarResearchSubject, QFilterCondition> {
  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarResearchSubjectQueryObject on QueryBuilder<IsarResearchSubject,
    IsarResearchSubject, QFilterCondition> {}

extension IsarResearchSubjectQuerySortBy
    on QueryBuilder<IsarResearchSubject, IsarResearchSubject, QSortBy> {
  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarResearchSubjectQuerySortThenBy
    on QueryBuilder<IsarResearchSubject, IsarResearchSubject, QSortThenBy> {
  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarResearchSubjectQueryWhereDistinct
    on QueryBuilder<IsarResearchSubject, IsarResearchSubject, QDistinct> {
  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarResearchSubjectQueryProperty1
    on QueryBuilder<IsarResearchSubject, IsarResearchSubject, QProperty> {
  QueryBuilder<IsarResearchSubject, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchSubject, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarResearchSubject, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarResearchSubjectQueryProperty2<R>
    on QueryBuilder<IsarResearchSubject, R, QAfterProperty> {
  QueryBuilder<IsarResearchSubject, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchSubject, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarResearchSubject, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarResearchSubjectQueryProperty3<R1, R2>
    on QueryBuilder<IsarResearchSubject, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarResearchSubject, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchSubject, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarResearchSubject, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarRiskAssessmentCollection on Isar {
  IsarCollection<int, IsarRiskAssessment> get isarRiskAssessments =>
      this.collection();
}

const IsarRiskAssessmentSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarRiskAssessment',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarRiskAssessment>(
    serialize: serializeIsarRiskAssessment,
    deserialize: deserializeIsarRiskAssessment,
    deserializeProperty: deserializeIsarRiskAssessmentProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarRiskAssessment(IsarWriter writer, IsarRiskAssessment object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarRiskAssessment deserializeIsarRiskAssessment(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarRiskAssessment(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarRiskAssessmentProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarRiskAssessmentUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarRiskAssessmentUpdateImpl implements _IsarRiskAssessmentUpdate {
  const _IsarRiskAssessmentUpdateImpl(this.collection);

  final IsarCollection<int, IsarRiskAssessment> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarRiskAssessmentUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarRiskAssessmentUpdateAllImpl implements _IsarRiskAssessmentUpdateAll {
  const _IsarRiskAssessmentUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarRiskAssessment> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarRiskAssessmentUpdate on IsarCollection<int, IsarRiskAssessment> {
  _IsarRiskAssessmentUpdate get update => _IsarRiskAssessmentUpdateImpl(this);

  _IsarRiskAssessmentUpdateAll get updateAll =>
      _IsarRiskAssessmentUpdateAllImpl(this);
}

sealed class _IsarRiskAssessmentQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarRiskAssessmentQueryUpdateImpl
    implements _IsarRiskAssessmentQueryUpdate {
  const _IsarRiskAssessmentQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarRiskAssessment> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarRiskAssessmentQueryUpdate on IsarQuery<IsarRiskAssessment> {
  _IsarRiskAssessmentQueryUpdate get updateFirst =>
      _IsarRiskAssessmentQueryUpdateImpl(this, limit: 1);

  _IsarRiskAssessmentQueryUpdate get updateAll =>
      _IsarRiskAssessmentQueryUpdateImpl(this);
}

class _IsarRiskAssessmentQueryBuilderUpdateImpl
    implements _IsarRiskAssessmentQueryUpdate {
  const _IsarRiskAssessmentQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarRiskAssessmentQueryBuilderUpdate
    on QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QOperations> {
  _IsarRiskAssessmentQueryUpdate get updateFirst =>
      _IsarRiskAssessmentQueryBuilderUpdateImpl(this, limit: 1);

  _IsarRiskAssessmentQueryUpdate get updateAll =>
      _IsarRiskAssessmentQueryBuilderUpdateImpl(this);
}

extension IsarRiskAssessmentQueryFilter
    on QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QFilterCondition> {
  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarRiskAssessmentQueryObject
    on QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QFilterCondition> {}

extension IsarRiskAssessmentQuerySortBy
    on QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QSortBy> {
  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarRiskAssessmentQuerySortThenBy
    on QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QSortThenBy> {
  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarRiskAssessmentQueryWhereDistinct
    on QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QDistinct> {
  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarRiskAssessmentQueryProperty1
    on QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QProperty> {
  QueryBuilder<IsarRiskAssessment, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRiskAssessment, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarRiskAssessment, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarRiskAssessmentQueryProperty2<R>
    on QueryBuilder<IsarRiskAssessment, R, QAfterProperty> {
  QueryBuilder<IsarRiskAssessment, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRiskAssessment, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarRiskAssessment, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarRiskAssessmentQueryProperty3<R1, R2>
    on QueryBuilder<IsarRiskAssessment, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarRiskAssessment, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRiskAssessment, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarRiskAssessment, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarScheduleCollection on Isar {
  IsarCollection<int, IsarSchedule> get isarSchedules => this.collection();
}

const IsarScheduleSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSchedule',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarSchedule>(
    serialize: serializeIsarSchedule,
    deserialize: deserializeIsarSchedule,
    deserializeProperty: deserializeIsarScheduleProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSchedule(IsarWriter writer, IsarSchedule object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarSchedule deserializeIsarSchedule(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarSchedule(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarScheduleProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarScheduleUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarScheduleUpdateImpl implements _IsarScheduleUpdate {
  const _IsarScheduleUpdateImpl(this.collection);

  final IsarCollection<int, IsarSchedule> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarScheduleUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarScheduleUpdateAllImpl implements _IsarScheduleUpdateAll {
  const _IsarScheduleUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarSchedule> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarScheduleUpdate on IsarCollection<int, IsarSchedule> {
  _IsarScheduleUpdate get update => _IsarScheduleUpdateImpl(this);

  _IsarScheduleUpdateAll get updateAll => _IsarScheduleUpdateAllImpl(this);
}

sealed class _IsarScheduleQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarScheduleQueryUpdateImpl implements _IsarScheduleQueryUpdate {
  const _IsarScheduleQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarSchedule> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarScheduleQueryUpdate on IsarQuery<IsarSchedule> {
  _IsarScheduleQueryUpdate get updateFirst =>
      _IsarScheduleQueryUpdateImpl(this, limit: 1);

  _IsarScheduleQueryUpdate get updateAll => _IsarScheduleQueryUpdateImpl(this);
}

class _IsarScheduleQueryBuilderUpdateImpl implements _IsarScheduleQueryUpdate {
  const _IsarScheduleQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarSchedule, IsarSchedule, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarScheduleQueryBuilderUpdate
    on QueryBuilder<IsarSchedule, IsarSchedule, QOperations> {
  _IsarScheduleQueryUpdate get updateFirst =>
      _IsarScheduleQueryBuilderUpdateImpl(this, limit: 1);

  _IsarScheduleQueryUpdate get updateAll =>
      _IsarScheduleQueryBuilderUpdateImpl(this);
}

extension IsarScheduleQueryFilter
    on QueryBuilder<IsarSchedule, IsarSchedule, QFilterCondition> {
  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarScheduleQueryObject
    on QueryBuilder<IsarSchedule, IsarSchedule, QFilterCondition> {}

extension IsarScheduleQuerySortBy
    on QueryBuilder<IsarSchedule, IsarSchedule, QSortBy> {
  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarScheduleQuerySortThenBy
    on QueryBuilder<IsarSchedule, IsarSchedule, QSortThenBy> {
  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarScheduleQueryWhereDistinct
    on QueryBuilder<IsarSchedule, IsarSchedule, QDistinct> {
  QueryBuilder<IsarSchedule, IsarSchedule, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarScheduleQueryProperty1
    on QueryBuilder<IsarSchedule, IsarSchedule, QProperty> {
  QueryBuilder<IsarSchedule, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSchedule, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSchedule, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarScheduleQueryProperty2<R>
    on QueryBuilder<IsarSchedule, R, QAfterProperty> {
  QueryBuilder<IsarSchedule, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSchedule, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSchedule, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarScheduleQueryProperty3<R1, R2>
    on QueryBuilder<IsarSchedule, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSchedule, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSchedule, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSchedule, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSearchParameterCollection on Isar {
  IsarCollection<int, IsarSearchParameter> get isarSearchParameters =>
      this.collection();
}

const IsarSearchParameterSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSearchParameter',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarSearchParameter>(
    serialize: serializeIsarSearchParameter,
    deserialize: deserializeIsarSearchParameter,
    deserializeProperty: deserializeIsarSearchParameterProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSearchParameter(
    IsarWriter writer, IsarSearchParameter object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarSearchParameter deserializeIsarSearchParameter(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarSearchParameter(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarSearchParameterProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarSearchParameterUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarSearchParameterUpdateImpl implements _IsarSearchParameterUpdate {
  const _IsarSearchParameterUpdateImpl(this.collection);

  final IsarCollection<int, IsarSearchParameter> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarSearchParameterUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarSearchParameterUpdateAllImpl
    implements _IsarSearchParameterUpdateAll {
  const _IsarSearchParameterUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarSearchParameter> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSearchParameterUpdate
    on IsarCollection<int, IsarSearchParameter> {
  _IsarSearchParameterUpdate get update => _IsarSearchParameterUpdateImpl(this);

  _IsarSearchParameterUpdateAll get updateAll =>
      _IsarSearchParameterUpdateAllImpl(this);
}

sealed class _IsarSearchParameterQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarSearchParameterQueryUpdateImpl
    implements _IsarSearchParameterQueryUpdate {
  const _IsarSearchParameterQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarSearchParameter> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSearchParameterQueryUpdate on IsarQuery<IsarSearchParameter> {
  _IsarSearchParameterQueryUpdate get updateFirst =>
      _IsarSearchParameterQueryUpdateImpl(this, limit: 1);

  _IsarSearchParameterQueryUpdate get updateAll =>
      _IsarSearchParameterQueryUpdateImpl(this);
}

class _IsarSearchParameterQueryBuilderUpdateImpl
    implements _IsarSearchParameterQueryUpdate {
  const _IsarSearchParameterQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarSearchParameter, IsarSearchParameter, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarSearchParameterQueryBuilderUpdate
    on QueryBuilder<IsarSearchParameter, IsarSearchParameter, QOperations> {
  _IsarSearchParameterQueryUpdate get updateFirst =>
      _IsarSearchParameterQueryBuilderUpdateImpl(this, limit: 1);

  _IsarSearchParameterQueryUpdate get updateAll =>
      _IsarSearchParameterQueryBuilderUpdateImpl(this);
}

extension IsarSearchParameterQueryFilter on QueryBuilder<IsarSearchParameter,
    IsarSearchParameter, QFilterCondition> {
  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarSearchParameterQueryObject on QueryBuilder<IsarSearchParameter,
    IsarSearchParameter, QFilterCondition> {}

extension IsarSearchParameterQuerySortBy
    on QueryBuilder<IsarSearchParameter, IsarSearchParameter, QSortBy> {
  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSearchParameterQuerySortThenBy
    on QueryBuilder<IsarSearchParameter, IsarSearchParameter, QSortThenBy> {
  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSearchParameterQueryWhereDistinct
    on QueryBuilder<IsarSearchParameter, IsarSearchParameter, QDistinct> {
  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarSearchParameterQueryProperty1
    on QueryBuilder<IsarSearchParameter, IsarSearchParameter, QProperty> {
  QueryBuilder<IsarSearchParameter, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSearchParameter, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSearchParameter, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSearchParameterQueryProperty2<R>
    on QueryBuilder<IsarSearchParameter, R, QAfterProperty> {
  QueryBuilder<IsarSearchParameter, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSearchParameter, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSearchParameter, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSearchParameterQueryProperty3<R1, R2>
    on QueryBuilder<IsarSearchParameter, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSearchParameter, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSearchParameter, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSearchParameter, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarServiceRequestCollection on Isar {
  IsarCollection<int, IsarServiceRequest> get isarServiceRequests =>
      this.collection();
}

const IsarServiceRequestSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarServiceRequest',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarServiceRequest>(
    serialize: serializeIsarServiceRequest,
    deserialize: deserializeIsarServiceRequest,
    deserializeProperty: deserializeIsarServiceRequestProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarServiceRequest(IsarWriter writer, IsarServiceRequest object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarServiceRequest deserializeIsarServiceRequest(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarServiceRequest(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarServiceRequestProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarServiceRequestUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarServiceRequestUpdateImpl implements _IsarServiceRequestUpdate {
  const _IsarServiceRequestUpdateImpl(this.collection);

  final IsarCollection<int, IsarServiceRequest> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarServiceRequestUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarServiceRequestUpdateAllImpl implements _IsarServiceRequestUpdateAll {
  const _IsarServiceRequestUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarServiceRequest> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarServiceRequestUpdate on IsarCollection<int, IsarServiceRequest> {
  _IsarServiceRequestUpdate get update => _IsarServiceRequestUpdateImpl(this);

  _IsarServiceRequestUpdateAll get updateAll =>
      _IsarServiceRequestUpdateAllImpl(this);
}

sealed class _IsarServiceRequestQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarServiceRequestQueryUpdateImpl
    implements _IsarServiceRequestQueryUpdate {
  const _IsarServiceRequestQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarServiceRequest> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarServiceRequestQueryUpdate on IsarQuery<IsarServiceRequest> {
  _IsarServiceRequestQueryUpdate get updateFirst =>
      _IsarServiceRequestQueryUpdateImpl(this, limit: 1);

  _IsarServiceRequestQueryUpdate get updateAll =>
      _IsarServiceRequestQueryUpdateImpl(this);
}

class _IsarServiceRequestQueryBuilderUpdateImpl
    implements _IsarServiceRequestQueryUpdate {
  const _IsarServiceRequestQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarServiceRequest, IsarServiceRequest, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarServiceRequestQueryBuilderUpdate
    on QueryBuilder<IsarServiceRequest, IsarServiceRequest, QOperations> {
  _IsarServiceRequestQueryUpdate get updateFirst =>
      _IsarServiceRequestQueryBuilderUpdateImpl(this, limit: 1);

  _IsarServiceRequestQueryUpdate get updateAll =>
      _IsarServiceRequestQueryBuilderUpdateImpl(this);
}

extension IsarServiceRequestQueryFilter
    on QueryBuilder<IsarServiceRequest, IsarServiceRequest, QFilterCondition> {
  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarServiceRequestQueryObject
    on QueryBuilder<IsarServiceRequest, IsarServiceRequest, QFilterCondition> {}

extension IsarServiceRequestQuerySortBy
    on QueryBuilder<IsarServiceRequest, IsarServiceRequest, QSortBy> {
  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarServiceRequestQuerySortThenBy
    on QueryBuilder<IsarServiceRequest, IsarServiceRequest, QSortThenBy> {
  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarServiceRequestQueryWhereDistinct
    on QueryBuilder<IsarServiceRequest, IsarServiceRequest, QDistinct> {
  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarServiceRequestQueryProperty1
    on QueryBuilder<IsarServiceRequest, IsarServiceRequest, QProperty> {
  QueryBuilder<IsarServiceRequest, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarServiceRequest, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarServiceRequest, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarServiceRequestQueryProperty2<R>
    on QueryBuilder<IsarServiceRequest, R, QAfterProperty> {
  QueryBuilder<IsarServiceRequest, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarServiceRequest, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarServiceRequest, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarServiceRequestQueryProperty3<R1, R2>
    on QueryBuilder<IsarServiceRequest, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarServiceRequest, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarServiceRequest, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarServiceRequest, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSlotCollection on Isar {
  IsarCollection<int, IsarSlot> get isarSlots => this.collection();
}

const IsarSlotSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSlot',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarSlot>(
    serialize: serializeIsarSlot,
    deserialize: deserializeIsarSlot,
    deserializeProperty: deserializeIsarSlotProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSlot(IsarWriter writer, IsarSlot object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarSlot deserializeIsarSlot(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarSlot(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarSlotProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarSlotUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarSlotUpdateImpl implements _IsarSlotUpdate {
  const _IsarSlotUpdateImpl(this.collection);

  final IsarCollection<int, IsarSlot> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarSlotUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarSlotUpdateAllImpl implements _IsarSlotUpdateAll {
  const _IsarSlotUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarSlot> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSlotUpdate on IsarCollection<int, IsarSlot> {
  _IsarSlotUpdate get update => _IsarSlotUpdateImpl(this);

  _IsarSlotUpdateAll get updateAll => _IsarSlotUpdateAllImpl(this);
}

sealed class _IsarSlotQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarSlotQueryUpdateImpl implements _IsarSlotQueryUpdate {
  const _IsarSlotQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarSlot> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSlotQueryUpdate on IsarQuery<IsarSlot> {
  _IsarSlotQueryUpdate get updateFirst =>
      _IsarSlotQueryUpdateImpl(this, limit: 1);

  _IsarSlotQueryUpdate get updateAll => _IsarSlotQueryUpdateImpl(this);
}

class _IsarSlotQueryBuilderUpdateImpl implements _IsarSlotQueryUpdate {
  const _IsarSlotQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarSlot, IsarSlot, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarSlotQueryBuilderUpdate
    on QueryBuilder<IsarSlot, IsarSlot, QOperations> {
  _IsarSlotQueryUpdate get updateFirst =>
      _IsarSlotQueryBuilderUpdateImpl(this, limit: 1);

  _IsarSlotQueryUpdate get updateAll => _IsarSlotQueryBuilderUpdateImpl(this);
}

extension IsarSlotQueryFilter
    on QueryBuilder<IsarSlot, IsarSlot, QFilterCondition> {
  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarSlotQueryObject
    on QueryBuilder<IsarSlot, IsarSlot, QFilterCondition> {}

extension IsarSlotQuerySortBy on QueryBuilder<IsarSlot, IsarSlot, QSortBy> {
  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSlotQuerySortThenBy
    on QueryBuilder<IsarSlot, IsarSlot, QSortThenBy> {
  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSlotQueryWhereDistinct
    on QueryBuilder<IsarSlot, IsarSlot, QDistinct> {
  QueryBuilder<IsarSlot, IsarSlot, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarSlotQueryProperty1
    on QueryBuilder<IsarSlot, IsarSlot, QProperty> {
  QueryBuilder<IsarSlot, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSlot, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSlot, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSlotQueryProperty2<R>
    on QueryBuilder<IsarSlot, R, QAfterProperty> {
  QueryBuilder<IsarSlot, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSlot, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSlot, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSlotQueryProperty3<R1, R2>
    on QueryBuilder<IsarSlot, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSlot, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSlot, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSlot, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSpecimenCollection on Isar {
  IsarCollection<int, IsarSpecimen> get isarSpecimens => this.collection();
}

const IsarSpecimenSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSpecimen',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarSpecimen>(
    serialize: serializeIsarSpecimen,
    deserialize: deserializeIsarSpecimen,
    deserializeProperty: deserializeIsarSpecimenProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSpecimen(IsarWriter writer, IsarSpecimen object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarSpecimen deserializeIsarSpecimen(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarSpecimen(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarSpecimenProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarSpecimenUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarSpecimenUpdateImpl implements _IsarSpecimenUpdate {
  const _IsarSpecimenUpdateImpl(this.collection);

  final IsarCollection<int, IsarSpecimen> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarSpecimenUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarSpecimenUpdateAllImpl implements _IsarSpecimenUpdateAll {
  const _IsarSpecimenUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarSpecimen> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSpecimenUpdate on IsarCollection<int, IsarSpecimen> {
  _IsarSpecimenUpdate get update => _IsarSpecimenUpdateImpl(this);

  _IsarSpecimenUpdateAll get updateAll => _IsarSpecimenUpdateAllImpl(this);
}

sealed class _IsarSpecimenQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarSpecimenQueryUpdateImpl implements _IsarSpecimenQueryUpdate {
  const _IsarSpecimenQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarSpecimen> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSpecimenQueryUpdate on IsarQuery<IsarSpecimen> {
  _IsarSpecimenQueryUpdate get updateFirst =>
      _IsarSpecimenQueryUpdateImpl(this, limit: 1);

  _IsarSpecimenQueryUpdate get updateAll => _IsarSpecimenQueryUpdateImpl(this);
}

class _IsarSpecimenQueryBuilderUpdateImpl implements _IsarSpecimenQueryUpdate {
  const _IsarSpecimenQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarSpecimen, IsarSpecimen, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarSpecimenQueryBuilderUpdate
    on QueryBuilder<IsarSpecimen, IsarSpecimen, QOperations> {
  _IsarSpecimenQueryUpdate get updateFirst =>
      _IsarSpecimenQueryBuilderUpdateImpl(this, limit: 1);

  _IsarSpecimenQueryUpdate get updateAll =>
      _IsarSpecimenQueryBuilderUpdateImpl(this);
}

extension IsarSpecimenQueryFilter
    on QueryBuilder<IsarSpecimen, IsarSpecimen, QFilterCondition> {
  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarSpecimenQueryObject
    on QueryBuilder<IsarSpecimen, IsarSpecimen, QFilterCondition> {}

extension IsarSpecimenQuerySortBy
    on QueryBuilder<IsarSpecimen, IsarSpecimen, QSortBy> {
  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSpecimenQuerySortThenBy
    on QueryBuilder<IsarSpecimen, IsarSpecimen, QSortThenBy> {
  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSpecimenQueryWhereDistinct
    on QueryBuilder<IsarSpecimen, IsarSpecimen, QDistinct> {
  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarSpecimenQueryProperty1
    on QueryBuilder<IsarSpecimen, IsarSpecimen, QProperty> {
  QueryBuilder<IsarSpecimen, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSpecimen, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSpecimen, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSpecimenQueryProperty2<R>
    on QueryBuilder<IsarSpecimen, R, QAfterProperty> {
  QueryBuilder<IsarSpecimen, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSpecimen, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSpecimen, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSpecimenQueryProperty3<R1, R2>
    on QueryBuilder<IsarSpecimen, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSpecimen, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSpecimen, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSpecimen, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSpecimenDefinitionCollection on Isar {
  IsarCollection<int, IsarSpecimenDefinition> get isarSpecimenDefinitions =>
      this.collection();
}

const IsarSpecimenDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSpecimenDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarSpecimenDefinition>(
    serialize: serializeIsarSpecimenDefinition,
    deserialize: deserializeIsarSpecimenDefinition,
    deserializeProperty: deserializeIsarSpecimenDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSpecimenDefinition(
    IsarWriter writer, IsarSpecimenDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarSpecimenDefinition deserializeIsarSpecimenDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarSpecimenDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarSpecimenDefinitionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarSpecimenDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarSpecimenDefinitionUpdateImpl
    implements _IsarSpecimenDefinitionUpdate {
  const _IsarSpecimenDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarSpecimenDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarSpecimenDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarSpecimenDefinitionUpdateAllImpl
    implements _IsarSpecimenDefinitionUpdateAll {
  const _IsarSpecimenDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarSpecimenDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSpecimenDefinitionUpdate
    on IsarCollection<int, IsarSpecimenDefinition> {
  _IsarSpecimenDefinitionUpdate get update =>
      _IsarSpecimenDefinitionUpdateImpl(this);

  _IsarSpecimenDefinitionUpdateAll get updateAll =>
      _IsarSpecimenDefinitionUpdateAllImpl(this);
}

sealed class _IsarSpecimenDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarSpecimenDefinitionQueryUpdateImpl
    implements _IsarSpecimenDefinitionQueryUpdate {
  const _IsarSpecimenDefinitionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarSpecimenDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSpecimenDefinitionQueryUpdate
    on IsarQuery<IsarSpecimenDefinition> {
  _IsarSpecimenDefinitionQueryUpdate get updateFirst =>
      _IsarSpecimenDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarSpecimenDefinitionQueryUpdate get updateAll =>
      _IsarSpecimenDefinitionQueryUpdateImpl(this);
}

class _IsarSpecimenDefinitionQueryBuilderUpdateImpl
    implements _IsarSpecimenDefinitionQueryUpdate {
  const _IsarSpecimenDefinitionQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarSpecimenDefinitionQueryBuilderUpdate on QueryBuilder<
    IsarSpecimenDefinition, IsarSpecimenDefinition, QOperations> {
  _IsarSpecimenDefinitionQueryUpdate get updateFirst =>
      _IsarSpecimenDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarSpecimenDefinitionQueryUpdate get updateAll =>
      _IsarSpecimenDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarSpecimenDefinitionQueryFilter on QueryBuilder<
    IsarSpecimenDefinition, IsarSpecimenDefinition, QFilterCondition> {
  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarSpecimenDefinitionQueryObject on QueryBuilder<
    IsarSpecimenDefinition, IsarSpecimenDefinition, QFilterCondition> {}

extension IsarSpecimenDefinitionQuerySortBy
    on QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QSortBy> {
  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSpecimenDefinitionQuerySortThenBy on QueryBuilder<
    IsarSpecimenDefinition, IsarSpecimenDefinition, QSortThenBy> {
  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSpecimenDefinitionQueryWhereDistinct
    on QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QDistinct> {
  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarSpecimenDefinitionQueryProperty1
    on QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QProperty> {
  QueryBuilder<IsarSpecimenDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSpecimenDefinitionQueryProperty2<R>
    on QueryBuilder<IsarSpecimenDefinition, R, QAfterProperty> {
  QueryBuilder<IsarSpecimenDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSpecimenDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarSpecimenDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSpecimenDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarStructureDefinitionCollection on Isar {
  IsarCollection<int, IsarStructureDefinition> get isarStructureDefinitions =>
      this.collection();
}

const IsarStructureDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarStructureDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarStructureDefinition>(
    serialize: serializeIsarStructureDefinition,
    deserialize: deserializeIsarStructureDefinition,
    deserializeProperty: deserializeIsarStructureDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarStructureDefinition(
    IsarWriter writer, IsarStructureDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarStructureDefinition deserializeIsarStructureDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarStructureDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarStructureDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarStructureDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarStructureDefinitionUpdateImpl
    implements _IsarStructureDefinitionUpdate {
  const _IsarStructureDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarStructureDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarStructureDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarStructureDefinitionUpdateAllImpl
    implements _IsarStructureDefinitionUpdateAll {
  const _IsarStructureDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarStructureDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarStructureDefinitionUpdate
    on IsarCollection<int, IsarStructureDefinition> {
  _IsarStructureDefinitionUpdate get update =>
      _IsarStructureDefinitionUpdateImpl(this);

  _IsarStructureDefinitionUpdateAll get updateAll =>
      _IsarStructureDefinitionUpdateAllImpl(this);
}

sealed class _IsarStructureDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarStructureDefinitionQueryUpdateImpl
    implements _IsarStructureDefinitionQueryUpdate {
  const _IsarStructureDefinitionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarStructureDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarStructureDefinitionQueryUpdate
    on IsarQuery<IsarStructureDefinition> {
  _IsarStructureDefinitionQueryUpdate get updateFirst =>
      _IsarStructureDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarStructureDefinitionQueryUpdate get updateAll =>
      _IsarStructureDefinitionQueryUpdateImpl(this);
}

class _IsarStructureDefinitionQueryBuilderUpdateImpl
    implements _IsarStructureDefinitionQueryUpdate {
  const _IsarStructureDefinitionQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarStructureDefinitionQueryBuilderUpdate on QueryBuilder<
    IsarStructureDefinition, IsarStructureDefinition, QOperations> {
  _IsarStructureDefinitionQueryUpdate get updateFirst =>
      _IsarStructureDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarStructureDefinitionQueryUpdate get updateAll =>
      _IsarStructureDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarStructureDefinitionQueryFilter on QueryBuilder<
    IsarStructureDefinition, IsarStructureDefinition, QFilterCondition> {
  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarStructureDefinitionQueryObject on QueryBuilder<
    IsarStructureDefinition, IsarStructureDefinition, QFilterCondition> {}

extension IsarStructureDefinitionQuerySortBy
    on QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QSortBy> {
  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarStructureDefinitionQuerySortThenBy on QueryBuilder<
    IsarStructureDefinition, IsarStructureDefinition, QSortThenBy> {
  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarStructureDefinitionQueryWhereDistinct on QueryBuilder<
    IsarStructureDefinition, IsarStructureDefinition, QDistinct> {
  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarStructureDefinitionQueryProperty1 on QueryBuilder<
    IsarStructureDefinition, IsarStructureDefinition, QProperty> {
  QueryBuilder<IsarStructureDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarStructureDefinition, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarStructureDefinition, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarStructureDefinitionQueryProperty2<R>
    on QueryBuilder<IsarStructureDefinition, R, QAfterProperty> {
  QueryBuilder<IsarStructureDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarStructureDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarStructureDefinition, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarStructureDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarStructureDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarStructureDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarStructureDefinition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarStructureDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarStructureMapCollection on Isar {
  IsarCollection<int, IsarStructureMap> get isarStructureMaps =>
      this.collection();
}

const IsarStructureMapSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarStructureMap',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarStructureMap>(
    serialize: serializeIsarStructureMap,
    deserialize: deserializeIsarStructureMap,
    deserializeProperty: deserializeIsarStructureMapProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarStructureMap(IsarWriter writer, IsarStructureMap object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarStructureMap deserializeIsarStructureMap(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarStructureMap(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarStructureMapProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarStructureMapUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarStructureMapUpdateImpl implements _IsarStructureMapUpdate {
  const _IsarStructureMapUpdateImpl(this.collection);

  final IsarCollection<int, IsarStructureMap> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarStructureMapUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarStructureMapUpdateAllImpl implements _IsarStructureMapUpdateAll {
  const _IsarStructureMapUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarStructureMap> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarStructureMapUpdate on IsarCollection<int, IsarStructureMap> {
  _IsarStructureMapUpdate get update => _IsarStructureMapUpdateImpl(this);

  _IsarStructureMapUpdateAll get updateAll =>
      _IsarStructureMapUpdateAllImpl(this);
}

sealed class _IsarStructureMapQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarStructureMapQueryUpdateImpl implements _IsarStructureMapQueryUpdate {
  const _IsarStructureMapQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarStructureMap> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarStructureMapQueryUpdate on IsarQuery<IsarStructureMap> {
  _IsarStructureMapQueryUpdate get updateFirst =>
      _IsarStructureMapQueryUpdateImpl(this, limit: 1);

  _IsarStructureMapQueryUpdate get updateAll =>
      _IsarStructureMapQueryUpdateImpl(this);
}

class _IsarStructureMapQueryBuilderUpdateImpl
    implements _IsarStructureMapQueryUpdate {
  const _IsarStructureMapQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarStructureMap, IsarStructureMap, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarStructureMapQueryBuilderUpdate
    on QueryBuilder<IsarStructureMap, IsarStructureMap, QOperations> {
  _IsarStructureMapQueryUpdate get updateFirst =>
      _IsarStructureMapQueryBuilderUpdateImpl(this, limit: 1);

  _IsarStructureMapQueryUpdate get updateAll =>
      _IsarStructureMapQueryBuilderUpdateImpl(this);
}

extension IsarStructureMapQueryFilter
    on QueryBuilder<IsarStructureMap, IsarStructureMap, QFilterCondition> {
  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarStructureMapQueryObject
    on QueryBuilder<IsarStructureMap, IsarStructureMap, QFilterCondition> {}

extension IsarStructureMapQuerySortBy
    on QueryBuilder<IsarStructureMap, IsarStructureMap, QSortBy> {
  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarStructureMapQuerySortThenBy
    on QueryBuilder<IsarStructureMap, IsarStructureMap, QSortThenBy> {
  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarStructureMapQueryWhereDistinct
    on QueryBuilder<IsarStructureMap, IsarStructureMap, QDistinct> {
  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarStructureMapQueryProperty1
    on QueryBuilder<IsarStructureMap, IsarStructureMap, QProperty> {
  QueryBuilder<IsarStructureMap, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarStructureMap, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarStructureMap, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarStructureMapQueryProperty2<R>
    on QueryBuilder<IsarStructureMap, R, QAfterProperty> {
  QueryBuilder<IsarStructureMap, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarStructureMap, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarStructureMap, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarStructureMapQueryProperty3<R1, R2>
    on QueryBuilder<IsarStructureMap, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarStructureMap, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarStructureMap, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarStructureMap, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSubscriptionCollection on Isar {
  IsarCollection<int, IsarSubscription> get isarSubscriptions =>
      this.collection();
}

const IsarSubscriptionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSubscription',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarSubscription>(
    serialize: serializeIsarSubscription,
    deserialize: deserializeIsarSubscription,
    deserializeProperty: deserializeIsarSubscriptionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSubscription(IsarWriter writer, IsarSubscription object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarSubscription deserializeIsarSubscription(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarSubscription(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarSubscriptionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarSubscriptionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarSubscriptionUpdateImpl implements _IsarSubscriptionUpdate {
  const _IsarSubscriptionUpdateImpl(this.collection);

  final IsarCollection<int, IsarSubscription> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarSubscriptionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarSubscriptionUpdateAllImpl implements _IsarSubscriptionUpdateAll {
  const _IsarSubscriptionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarSubscription> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSubscriptionUpdate on IsarCollection<int, IsarSubscription> {
  _IsarSubscriptionUpdate get update => _IsarSubscriptionUpdateImpl(this);

  _IsarSubscriptionUpdateAll get updateAll =>
      _IsarSubscriptionUpdateAllImpl(this);
}

sealed class _IsarSubscriptionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarSubscriptionQueryUpdateImpl implements _IsarSubscriptionQueryUpdate {
  const _IsarSubscriptionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarSubscription> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSubscriptionQueryUpdate on IsarQuery<IsarSubscription> {
  _IsarSubscriptionQueryUpdate get updateFirst =>
      _IsarSubscriptionQueryUpdateImpl(this, limit: 1);

  _IsarSubscriptionQueryUpdate get updateAll =>
      _IsarSubscriptionQueryUpdateImpl(this);
}

class _IsarSubscriptionQueryBuilderUpdateImpl
    implements _IsarSubscriptionQueryUpdate {
  const _IsarSubscriptionQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarSubscription, IsarSubscription, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarSubscriptionQueryBuilderUpdate
    on QueryBuilder<IsarSubscription, IsarSubscription, QOperations> {
  _IsarSubscriptionQueryUpdate get updateFirst =>
      _IsarSubscriptionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarSubscriptionQueryUpdate get updateAll =>
      _IsarSubscriptionQueryBuilderUpdateImpl(this);
}

extension IsarSubscriptionQueryFilter
    on QueryBuilder<IsarSubscription, IsarSubscription, QFilterCondition> {
  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarSubscriptionQueryObject
    on QueryBuilder<IsarSubscription, IsarSubscription, QFilterCondition> {}

extension IsarSubscriptionQuerySortBy
    on QueryBuilder<IsarSubscription, IsarSubscription, QSortBy> {
  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSubscriptionQuerySortThenBy
    on QueryBuilder<IsarSubscription, IsarSubscription, QSortThenBy> {
  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSubscriptionQueryWhereDistinct
    on QueryBuilder<IsarSubscription, IsarSubscription, QDistinct> {
  QueryBuilder<IsarSubscription, IsarSubscription, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarSubscriptionQueryProperty1
    on QueryBuilder<IsarSubscription, IsarSubscription, QProperty> {
  QueryBuilder<IsarSubscription, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubscription, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSubscription, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSubscriptionQueryProperty2<R>
    on QueryBuilder<IsarSubscription, R, QAfterProperty> {
  QueryBuilder<IsarSubscription, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubscription, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSubscription, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSubscriptionQueryProperty3<R1, R2>
    on QueryBuilder<IsarSubscription, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSubscription, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubscription, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSubscription, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSubscriptionStatusCollection on Isar {
  IsarCollection<int, IsarSubscriptionStatus> get isarSubscriptionStatus =>
      this.collection();
}

const IsarSubscriptionStatusSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSubscriptionStatus',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarSubscriptionStatus>(
    serialize: serializeIsarSubscriptionStatus,
    deserialize: deserializeIsarSubscriptionStatus,
    deserializeProperty: deserializeIsarSubscriptionStatusProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSubscriptionStatus(
    IsarWriter writer, IsarSubscriptionStatus object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarSubscriptionStatus deserializeIsarSubscriptionStatus(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarSubscriptionStatus(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarSubscriptionStatusProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarSubscriptionStatusUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarSubscriptionStatusUpdateImpl
    implements _IsarSubscriptionStatusUpdate {
  const _IsarSubscriptionStatusUpdateImpl(this.collection);

  final IsarCollection<int, IsarSubscriptionStatus> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarSubscriptionStatusUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarSubscriptionStatusUpdateAllImpl
    implements _IsarSubscriptionStatusUpdateAll {
  const _IsarSubscriptionStatusUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarSubscriptionStatus> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSubscriptionStatusUpdate
    on IsarCollection<int, IsarSubscriptionStatus> {
  _IsarSubscriptionStatusUpdate get update =>
      _IsarSubscriptionStatusUpdateImpl(this);

  _IsarSubscriptionStatusUpdateAll get updateAll =>
      _IsarSubscriptionStatusUpdateAllImpl(this);
}

sealed class _IsarSubscriptionStatusQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarSubscriptionStatusQueryUpdateImpl
    implements _IsarSubscriptionStatusQueryUpdate {
  const _IsarSubscriptionStatusQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarSubscriptionStatus> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSubscriptionStatusQueryUpdate
    on IsarQuery<IsarSubscriptionStatus> {
  _IsarSubscriptionStatusQueryUpdate get updateFirst =>
      _IsarSubscriptionStatusQueryUpdateImpl(this, limit: 1);

  _IsarSubscriptionStatusQueryUpdate get updateAll =>
      _IsarSubscriptionStatusQueryUpdateImpl(this);
}

class _IsarSubscriptionStatusQueryBuilderUpdateImpl
    implements _IsarSubscriptionStatusQueryUpdate {
  const _IsarSubscriptionStatusQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarSubscriptionStatusQueryBuilderUpdate on QueryBuilder<
    IsarSubscriptionStatus, IsarSubscriptionStatus, QOperations> {
  _IsarSubscriptionStatusQueryUpdate get updateFirst =>
      _IsarSubscriptionStatusQueryBuilderUpdateImpl(this, limit: 1);

  _IsarSubscriptionStatusQueryUpdate get updateAll =>
      _IsarSubscriptionStatusQueryBuilderUpdateImpl(this);
}

extension IsarSubscriptionStatusQueryFilter on QueryBuilder<
    IsarSubscriptionStatus, IsarSubscriptionStatus, QFilterCondition> {
  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarSubscriptionStatusQueryObject on QueryBuilder<
    IsarSubscriptionStatus, IsarSubscriptionStatus, QFilterCondition> {}

extension IsarSubscriptionStatusQuerySortBy
    on QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QSortBy> {
  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSubscriptionStatusQuerySortThenBy on QueryBuilder<
    IsarSubscriptionStatus, IsarSubscriptionStatus, QSortThenBy> {
  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSubscriptionStatusQueryWhereDistinct
    on QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QDistinct> {
  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarSubscriptionStatusQueryProperty1
    on QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QProperty> {
  QueryBuilder<IsarSubscriptionStatus, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSubscriptionStatusQueryProperty2<R>
    on QueryBuilder<IsarSubscriptionStatus, R, QAfterProperty> {
  QueryBuilder<IsarSubscriptionStatus, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSubscriptionStatusQueryProperty3<R1, R2>
    on QueryBuilder<IsarSubscriptionStatus, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSubscriptionStatus, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSubscriptionTopicCollection on Isar {
  IsarCollection<int, IsarSubscriptionTopic> get isarSubscriptionTopics =>
      this.collection();
}

const IsarSubscriptionTopicSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSubscriptionTopic',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarSubscriptionTopic>(
    serialize: serializeIsarSubscriptionTopic,
    deserialize: deserializeIsarSubscriptionTopic,
    deserializeProperty: deserializeIsarSubscriptionTopicProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSubscriptionTopic(
    IsarWriter writer, IsarSubscriptionTopic object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarSubscriptionTopic deserializeIsarSubscriptionTopic(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarSubscriptionTopic(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarSubscriptionTopicProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarSubscriptionTopicUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarSubscriptionTopicUpdateImpl implements _IsarSubscriptionTopicUpdate {
  const _IsarSubscriptionTopicUpdateImpl(this.collection);

  final IsarCollection<int, IsarSubscriptionTopic> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarSubscriptionTopicUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarSubscriptionTopicUpdateAllImpl
    implements _IsarSubscriptionTopicUpdateAll {
  const _IsarSubscriptionTopicUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarSubscriptionTopic> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSubscriptionTopicUpdate
    on IsarCollection<int, IsarSubscriptionTopic> {
  _IsarSubscriptionTopicUpdate get update =>
      _IsarSubscriptionTopicUpdateImpl(this);

  _IsarSubscriptionTopicUpdateAll get updateAll =>
      _IsarSubscriptionTopicUpdateAllImpl(this);
}

sealed class _IsarSubscriptionTopicQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarSubscriptionTopicQueryUpdateImpl
    implements _IsarSubscriptionTopicQueryUpdate {
  const _IsarSubscriptionTopicQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarSubscriptionTopic> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSubscriptionTopicQueryUpdate on IsarQuery<IsarSubscriptionTopic> {
  _IsarSubscriptionTopicQueryUpdate get updateFirst =>
      _IsarSubscriptionTopicQueryUpdateImpl(this, limit: 1);

  _IsarSubscriptionTopicQueryUpdate get updateAll =>
      _IsarSubscriptionTopicQueryUpdateImpl(this);
}

class _IsarSubscriptionTopicQueryBuilderUpdateImpl
    implements _IsarSubscriptionTopicQueryUpdate {
  const _IsarSubscriptionTopicQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QOperations>
      query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarSubscriptionTopicQueryBuilderUpdate
    on QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QOperations> {
  _IsarSubscriptionTopicQueryUpdate get updateFirst =>
      _IsarSubscriptionTopicQueryBuilderUpdateImpl(this, limit: 1);

  _IsarSubscriptionTopicQueryUpdate get updateAll =>
      _IsarSubscriptionTopicQueryBuilderUpdateImpl(this);
}

extension IsarSubscriptionTopicQueryFilter on QueryBuilder<
    IsarSubscriptionTopic, IsarSubscriptionTopic, QFilterCondition> {
  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarSubscriptionTopicQueryObject on QueryBuilder<
    IsarSubscriptionTopic, IsarSubscriptionTopic, QFilterCondition> {}

extension IsarSubscriptionTopicQuerySortBy
    on QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QSortBy> {
  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSubscriptionTopicQuerySortThenBy
    on QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QSortThenBy> {
  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSubscriptionTopicQueryWhereDistinct
    on QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QDistinct> {
  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarSubscriptionTopicQueryProperty1
    on QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QProperty> {
  QueryBuilder<IsarSubscriptionTopic, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSubscriptionTopicQueryProperty2<R>
    on QueryBuilder<IsarSubscriptionTopic, R, QAfterProperty> {
  QueryBuilder<IsarSubscriptionTopic, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSubscriptionTopicQueryProperty3<R1, R2>
    on QueryBuilder<IsarSubscriptionTopic, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSubscriptionTopic, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSubstanceCollection on Isar {
  IsarCollection<int, IsarSubstance> get isarSubstances => this.collection();
}

const IsarSubstanceSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSubstance',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarSubstance>(
    serialize: serializeIsarSubstance,
    deserialize: deserializeIsarSubstance,
    deserializeProperty: deserializeIsarSubstanceProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSubstance(IsarWriter writer, IsarSubstance object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarSubstance deserializeIsarSubstance(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarSubstance(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarSubstanceProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarSubstanceUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarSubstanceUpdateImpl implements _IsarSubstanceUpdate {
  const _IsarSubstanceUpdateImpl(this.collection);

  final IsarCollection<int, IsarSubstance> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarSubstanceUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarSubstanceUpdateAllImpl implements _IsarSubstanceUpdateAll {
  const _IsarSubstanceUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarSubstance> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSubstanceUpdate on IsarCollection<int, IsarSubstance> {
  _IsarSubstanceUpdate get update => _IsarSubstanceUpdateImpl(this);

  _IsarSubstanceUpdateAll get updateAll => _IsarSubstanceUpdateAllImpl(this);
}

sealed class _IsarSubstanceQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarSubstanceQueryUpdateImpl implements _IsarSubstanceQueryUpdate {
  const _IsarSubstanceQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarSubstance> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSubstanceQueryUpdate on IsarQuery<IsarSubstance> {
  _IsarSubstanceQueryUpdate get updateFirst =>
      _IsarSubstanceQueryUpdateImpl(this, limit: 1);

  _IsarSubstanceQueryUpdate get updateAll =>
      _IsarSubstanceQueryUpdateImpl(this);
}

class _IsarSubstanceQueryBuilderUpdateImpl
    implements _IsarSubstanceQueryUpdate {
  const _IsarSubstanceQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarSubstance, IsarSubstance, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarSubstanceQueryBuilderUpdate
    on QueryBuilder<IsarSubstance, IsarSubstance, QOperations> {
  _IsarSubstanceQueryUpdate get updateFirst =>
      _IsarSubstanceQueryBuilderUpdateImpl(this, limit: 1);

  _IsarSubstanceQueryUpdate get updateAll =>
      _IsarSubstanceQueryBuilderUpdateImpl(this);
}

extension IsarSubstanceQueryFilter
    on QueryBuilder<IsarSubstance, IsarSubstance, QFilterCondition> {
  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarSubstanceQueryObject
    on QueryBuilder<IsarSubstance, IsarSubstance, QFilterCondition> {}

extension IsarSubstanceQuerySortBy
    on QueryBuilder<IsarSubstance, IsarSubstance, QSortBy> {
  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSubstanceQuerySortThenBy
    on QueryBuilder<IsarSubstance, IsarSubstance, QSortThenBy> {
  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSubstanceQueryWhereDistinct
    on QueryBuilder<IsarSubstance, IsarSubstance, QDistinct> {
  QueryBuilder<IsarSubstance, IsarSubstance, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarSubstanceQueryProperty1
    on QueryBuilder<IsarSubstance, IsarSubstance, QProperty> {
  QueryBuilder<IsarSubstance, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubstance, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSubstance, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSubstanceQueryProperty2<R>
    on QueryBuilder<IsarSubstance, R, QAfterProperty> {
  QueryBuilder<IsarSubstance, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubstance, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSubstance, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSubstanceQueryProperty3<R1, R2>
    on QueryBuilder<IsarSubstance, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSubstance, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubstance, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSubstance, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSubstanceDefinitionCollection on Isar {
  IsarCollection<int, IsarSubstanceDefinition> get isarSubstanceDefinitions =>
      this.collection();
}

const IsarSubstanceDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSubstanceDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarSubstanceDefinition>(
    serialize: serializeIsarSubstanceDefinition,
    deserialize: deserializeIsarSubstanceDefinition,
    deserializeProperty: deserializeIsarSubstanceDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSubstanceDefinition(
    IsarWriter writer, IsarSubstanceDefinition object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarSubstanceDefinition deserializeIsarSubstanceDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarSubstanceDefinition(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarSubstanceDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarSubstanceDefinitionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarSubstanceDefinitionUpdateImpl
    implements _IsarSubstanceDefinitionUpdate {
  const _IsarSubstanceDefinitionUpdateImpl(this.collection);

  final IsarCollection<int, IsarSubstanceDefinition> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarSubstanceDefinitionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarSubstanceDefinitionUpdateAllImpl
    implements _IsarSubstanceDefinitionUpdateAll {
  const _IsarSubstanceDefinitionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarSubstanceDefinition> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSubstanceDefinitionUpdate
    on IsarCollection<int, IsarSubstanceDefinition> {
  _IsarSubstanceDefinitionUpdate get update =>
      _IsarSubstanceDefinitionUpdateImpl(this);

  _IsarSubstanceDefinitionUpdateAll get updateAll =>
      _IsarSubstanceDefinitionUpdateAllImpl(this);
}

sealed class _IsarSubstanceDefinitionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarSubstanceDefinitionQueryUpdateImpl
    implements _IsarSubstanceDefinitionQueryUpdate {
  const _IsarSubstanceDefinitionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarSubstanceDefinition> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSubstanceDefinitionQueryUpdate
    on IsarQuery<IsarSubstanceDefinition> {
  _IsarSubstanceDefinitionQueryUpdate get updateFirst =>
      _IsarSubstanceDefinitionQueryUpdateImpl(this, limit: 1);

  _IsarSubstanceDefinitionQueryUpdate get updateAll =>
      _IsarSubstanceDefinitionQueryUpdateImpl(this);
}

class _IsarSubstanceDefinitionQueryBuilderUpdateImpl
    implements _IsarSubstanceDefinitionQueryUpdate {
  const _IsarSubstanceDefinitionQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarSubstanceDefinitionQueryBuilderUpdate on QueryBuilder<
    IsarSubstanceDefinition, IsarSubstanceDefinition, QOperations> {
  _IsarSubstanceDefinitionQueryUpdate get updateFirst =>
      _IsarSubstanceDefinitionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarSubstanceDefinitionQueryUpdate get updateAll =>
      _IsarSubstanceDefinitionQueryBuilderUpdateImpl(this);
}

extension IsarSubstanceDefinitionQueryFilter on QueryBuilder<
    IsarSubstanceDefinition, IsarSubstanceDefinition, QFilterCondition> {
  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarSubstanceDefinitionQueryObject on QueryBuilder<
    IsarSubstanceDefinition, IsarSubstanceDefinition, QFilterCondition> {}

extension IsarSubstanceDefinitionQuerySortBy
    on QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QSortBy> {
  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSubstanceDefinitionQuerySortThenBy on QueryBuilder<
    IsarSubstanceDefinition, IsarSubstanceDefinition, QSortThenBy> {
  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSubstanceDefinitionQueryWhereDistinct on QueryBuilder<
    IsarSubstanceDefinition, IsarSubstanceDefinition, QDistinct> {
  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarSubstanceDefinitionQueryProperty1 on QueryBuilder<
    IsarSubstanceDefinition, IsarSubstanceDefinition, QProperty> {
  QueryBuilder<IsarSubstanceDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSubstanceDefinitionQueryProperty2<R>
    on QueryBuilder<IsarSubstanceDefinition, R, QAfterProperty> {
  QueryBuilder<IsarSubstanceDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSubstanceDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarSubstanceDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSubstanceDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSupplyDeliveryCollection on Isar {
  IsarCollection<int, IsarSupplyDelivery> get isarSupplyDeliverys =>
      this.collection();
}

const IsarSupplyDeliverySchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSupplyDelivery',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarSupplyDelivery>(
    serialize: serializeIsarSupplyDelivery,
    deserialize: deserializeIsarSupplyDelivery,
    deserializeProperty: deserializeIsarSupplyDeliveryProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSupplyDelivery(IsarWriter writer, IsarSupplyDelivery object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarSupplyDelivery deserializeIsarSupplyDelivery(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarSupplyDelivery(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarSupplyDeliveryProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarSupplyDeliveryUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarSupplyDeliveryUpdateImpl implements _IsarSupplyDeliveryUpdate {
  const _IsarSupplyDeliveryUpdateImpl(this.collection);

  final IsarCollection<int, IsarSupplyDelivery> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarSupplyDeliveryUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarSupplyDeliveryUpdateAllImpl implements _IsarSupplyDeliveryUpdateAll {
  const _IsarSupplyDeliveryUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarSupplyDelivery> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSupplyDeliveryUpdate on IsarCollection<int, IsarSupplyDelivery> {
  _IsarSupplyDeliveryUpdate get update => _IsarSupplyDeliveryUpdateImpl(this);

  _IsarSupplyDeliveryUpdateAll get updateAll =>
      _IsarSupplyDeliveryUpdateAllImpl(this);
}

sealed class _IsarSupplyDeliveryQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarSupplyDeliveryQueryUpdateImpl
    implements _IsarSupplyDeliveryQueryUpdate {
  const _IsarSupplyDeliveryQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarSupplyDelivery> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSupplyDeliveryQueryUpdate on IsarQuery<IsarSupplyDelivery> {
  _IsarSupplyDeliveryQueryUpdate get updateFirst =>
      _IsarSupplyDeliveryQueryUpdateImpl(this, limit: 1);

  _IsarSupplyDeliveryQueryUpdate get updateAll =>
      _IsarSupplyDeliveryQueryUpdateImpl(this);
}

class _IsarSupplyDeliveryQueryBuilderUpdateImpl
    implements _IsarSupplyDeliveryQueryUpdate {
  const _IsarSupplyDeliveryQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarSupplyDeliveryQueryBuilderUpdate
    on QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QOperations> {
  _IsarSupplyDeliveryQueryUpdate get updateFirst =>
      _IsarSupplyDeliveryQueryBuilderUpdateImpl(this, limit: 1);

  _IsarSupplyDeliveryQueryUpdate get updateAll =>
      _IsarSupplyDeliveryQueryBuilderUpdateImpl(this);
}

extension IsarSupplyDeliveryQueryFilter
    on QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QFilterCondition> {
  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarSupplyDeliveryQueryObject
    on QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QFilterCondition> {}

extension IsarSupplyDeliveryQuerySortBy
    on QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QSortBy> {
  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSupplyDeliveryQuerySortThenBy
    on QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QSortThenBy> {
  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSupplyDeliveryQueryWhereDistinct
    on QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QDistinct> {
  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarSupplyDeliveryQueryProperty1
    on QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QProperty> {
  QueryBuilder<IsarSupplyDelivery, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSupplyDelivery, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSupplyDelivery, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSupplyDeliveryQueryProperty2<R>
    on QueryBuilder<IsarSupplyDelivery, R, QAfterProperty> {
  QueryBuilder<IsarSupplyDelivery, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSupplyDelivery, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSupplyDelivery, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSupplyDeliveryQueryProperty3<R1, R2>
    on QueryBuilder<IsarSupplyDelivery, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSupplyDelivery, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSupplyDelivery, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSupplyDelivery, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSupplyRequestCollection on Isar {
  IsarCollection<int, IsarSupplyRequest> get isarSupplyRequests =>
      this.collection();
}

const IsarSupplyRequestSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSupplyRequest',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarSupplyRequest>(
    serialize: serializeIsarSupplyRequest,
    deserialize: deserializeIsarSupplyRequest,
    deserializeProperty: deserializeIsarSupplyRequestProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSupplyRequest(IsarWriter writer, IsarSupplyRequest object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarSupplyRequest deserializeIsarSupplyRequest(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarSupplyRequest(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarSupplyRequestProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarSupplyRequestUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarSupplyRequestUpdateImpl implements _IsarSupplyRequestUpdate {
  const _IsarSupplyRequestUpdateImpl(this.collection);

  final IsarCollection<int, IsarSupplyRequest> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarSupplyRequestUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarSupplyRequestUpdateAllImpl implements _IsarSupplyRequestUpdateAll {
  const _IsarSupplyRequestUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarSupplyRequest> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSupplyRequestUpdate on IsarCollection<int, IsarSupplyRequest> {
  _IsarSupplyRequestUpdate get update => _IsarSupplyRequestUpdateImpl(this);

  _IsarSupplyRequestUpdateAll get updateAll =>
      _IsarSupplyRequestUpdateAllImpl(this);
}

sealed class _IsarSupplyRequestQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarSupplyRequestQueryUpdateImpl
    implements _IsarSupplyRequestQueryUpdate {
  const _IsarSupplyRequestQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarSupplyRequest> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarSupplyRequestQueryUpdate on IsarQuery<IsarSupplyRequest> {
  _IsarSupplyRequestQueryUpdate get updateFirst =>
      _IsarSupplyRequestQueryUpdateImpl(this, limit: 1);

  _IsarSupplyRequestQueryUpdate get updateAll =>
      _IsarSupplyRequestQueryUpdateImpl(this);
}

class _IsarSupplyRequestQueryBuilderUpdateImpl
    implements _IsarSupplyRequestQueryUpdate {
  const _IsarSupplyRequestQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarSupplyRequestQueryBuilderUpdate
    on QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QOperations> {
  _IsarSupplyRequestQueryUpdate get updateFirst =>
      _IsarSupplyRequestQueryBuilderUpdateImpl(this, limit: 1);

  _IsarSupplyRequestQueryUpdate get updateAll =>
      _IsarSupplyRequestQueryBuilderUpdateImpl(this);
}

extension IsarSupplyRequestQueryFilter
    on QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QFilterCondition> {
  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarSupplyRequestQueryObject
    on QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QFilterCondition> {}

extension IsarSupplyRequestQuerySortBy
    on QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QSortBy> {
  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSupplyRequestQuerySortThenBy
    on QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QSortThenBy> {
  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarSupplyRequestQueryWhereDistinct
    on QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QDistinct> {
  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarSupplyRequestQueryProperty1
    on QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QProperty> {
  QueryBuilder<IsarSupplyRequest, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSupplyRequest, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSupplyRequest, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSupplyRequestQueryProperty2<R>
    on QueryBuilder<IsarSupplyRequest, R, QAfterProperty> {
  QueryBuilder<IsarSupplyRequest, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSupplyRequest, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSupplyRequest, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarSupplyRequestQueryProperty3<R1, R2>
    on QueryBuilder<IsarSupplyRequest, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSupplyRequest, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSupplyRequest, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarSupplyRequest, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarTaskCollection on Isar {
  IsarCollection<int, IsarTask> get isarTasks => this.collection();
}

const IsarTaskSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarTask',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarTask>(
    serialize: serializeIsarTask,
    deserialize: deserializeIsarTask,
    deserializeProperty: deserializeIsarTaskProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarTask(IsarWriter writer, IsarTask object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarTask deserializeIsarTask(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarTask(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarTaskProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarTaskUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarTaskUpdateImpl implements _IsarTaskUpdate {
  const _IsarTaskUpdateImpl(this.collection);

  final IsarCollection<int, IsarTask> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarTaskUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarTaskUpdateAllImpl implements _IsarTaskUpdateAll {
  const _IsarTaskUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarTask> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarTaskUpdate on IsarCollection<int, IsarTask> {
  _IsarTaskUpdate get update => _IsarTaskUpdateImpl(this);

  _IsarTaskUpdateAll get updateAll => _IsarTaskUpdateAllImpl(this);
}

sealed class _IsarTaskQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarTaskQueryUpdateImpl implements _IsarTaskQueryUpdate {
  const _IsarTaskQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarTask> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarTaskQueryUpdate on IsarQuery<IsarTask> {
  _IsarTaskQueryUpdate get updateFirst =>
      _IsarTaskQueryUpdateImpl(this, limit: 1);

  _IsarTaskQueryUpdate get updateAll => _IsarTaskQueryUpdateImpl(this);
}

class _IsarTaskQueryBuilderUpdateImpl implements _IsarTaskQueryUpdate {
  const _IsarTaskQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarTask, IsarTask, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarTaskQueryBuilderUpdate
    on QueryBuilder<IsarTask, IsarTask, QOperations> {
  _IsarTaskQueryUpdate get updateFirst =>
      _IsarTaskQueryBuilderUpdateImpl(this, limit: 1);

  _IsarTaskQueryUpdate get updateAll => _IsarTaskQueryBuilderUpdateImpl(this);
}

extension IsarTaskQueryFilter
    on QueryBuilder<IsarTask, IsarTask, QFilterCondition> {
  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> fhirIdContains(
      String value,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarTaskQueryObject
    on QueryBuilder<IsarTask, IsarTask, QFilterCondition> {}

extension IsarTaskQuerySortBy on QueryBuilder<IsarTask, IsarTask, QSortBy> {
  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarTaskQuerySortThenBy
    on QueryBuilder<IsarTask, IsarTask, QSortThenBy> {
  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarTaskQueryWhereDistinct
    on QueryBuilder<IsarTask, IsarTask, QDistinct> {
  QueryBuilder<IsarTask, IsarTask, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarTaskQueryProperty1
    on QueryBuilder<IsarTask, IsarTask, QProperty> {
  QueryBuilder<IsarTask, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTask, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarTask, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarTaskQueryProperty2<R>
    on QueryBuilder<IsarTask, R, QAfterProperty> {
  QueryBuilder<IsarTask, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTask, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarTask, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarTaskQueryProperty3<R1, R2>
    on QueryBuilder<IsarTask, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarTask, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTask, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarTask, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarTerminologyCapabilitiesCollection on Isar {
  IsarCollection<int, IsarTerminologyCapabilities>
      get isarTerminologyCapabilities => this.collection();
}

const IsarTerminologyCapabilitiesSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarTerminologyCapabilities',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarTerminologyCapabilities>(
    serialize: serializeIsarTerminologyCapabilities,
    deserialize: deserializeIsarTerminologyCapabilities,
    deserializeProperty: deserializeIsarTerminologyCapabilitiesProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarTerminologyCapabilities(
    IsarWriter writer, IsarTerminologyCapabilities object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarTerminologyCapabilities deserializeIsarTerminologyCapabilities(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarTerminologyCapabilities(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarTerminologyCapabilitiesProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarTerminologyCapabilitiesUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarTerminologyCapabilitiesUpdateImpl
    implements _IsarTerminologyCapabilitiesUpdate {
  const _IsarTerminologyCapabilitiesUpdateImpl(this.collection);

  final IsarCollection<int, IsarTerminologyCapabilities> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarTerminologyCapabilitiesUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarTerminologyCapabilitiesUpdateAllImpl
    implements _IsarTerminologyCapabilitiesUpdateAll {
  const _IsarTerminologyCapabilitiesUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarTerminologyCapabilities> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarTerminologyCapabilitiesUpdate
    on IsarCollection<int, IsarTerminologyCapabilities> {
  _IsarTerminologyCapabilitiesUpdate get update =>
      _IsarTerminologyCapabilitiesUpdateImpl(this);

  _IsarTerminologyCapabilitiesUpdateAll get updateAll =>
      _IsarTerminologyCapabilitiesUpdateAllImpl(this);
}

sealed class _IsarTerminologyCapabilitiesQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarTerminologyCapabilitiesQueryUpdateImpl
    implements _IsarTerminologyCapabilitiesQueryUpdate {
  const _IsarTerminologyCapabilitiesQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarTerminologyCapabilities> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarTerminologyCapabilitiesQueryUpdate
    on IsarQuery<IsarTerminologyCapabilities> {
  _IsarTerminologyCapabilitiesQueryUpdate get updateFirst =>
      _IsarTerminologyCapabilitiesQueryUpdateImpl(this, limit: 1);

  _IsarTerminologyCapabilitiesQueryUpdate get updateAll =>
      _IsarTerminologyCapabilitiesQueryUpdateImpl(this);
}

class _IsarTerminologyCapabilitiesQueryBuilderUpdateImpl
    implements _IsarTerminologyCapabilitiesQueryUpdate {
  const _IsarTerminologyCapabilitiesQueryBuilderUpdateImpl(this.query,
      {this.limit});

  final QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarTerminologyCapabilitiesQueryBuilderUpdate on QueryBuilder<
    IsarTerminologyCapabilities, IsarTerminologyCapabilities, QOperations> {
  _IsarTerminologyCapabilitiesQueryUpdate get updateFirst =>
      _IsarTerminologyCapabilitiesQueryBuilderUpdateImpl(this, limit: 1);

  _IsarTerminologyCapabilitiesQueryUpdate get updateAll =>
      _IsarTerminologyCapabilitiesQueryBuilderUpdateImpl(this);
}

extension IsarTerminologyCapabilitiesQueryFilter on QueryBuilder<
    IsarTerminologyCapabilities,
    IsarTerminologyCapabilities,
    QFilterCondition> {
  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarTerminologyCapabilitiesQueryObject on QueryBuilder<
    IsarTerminologyCapabilities,
    IsarTerminologyCapabilities,
    QFilterCondition> {}

extension IsarTerminologyCapabilitiesQuerySortBy on QueryBuilder<
    IsarTerminologyCapabilities, IsarTerminologyCapabilities, QSortBy> {
  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarTerminologyCapabilitiesQuerySortThenBy on QueryBuilder<
    IsarTerminologyCapabilities, IsarTerminologyCapabilities, QSortThenBy> {
  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarTerminologyCapabilitiesQueryWhereDistinct on QueryBuilder<
    IsarTerminologyCapabilities, IsarTerminologyCapabilities, QDistinct> {
  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterDistinct> distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterDistinct> distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarTerminologyCapabilitiesQueryProperty1 on QueryBuilder<
    IsarTerminologyCapabilities, IsarTerminologyCapabilities, QProperty> {
  QueryBuilder<IsarTerminologyCapabilities, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, Map<String, dynamic>,
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarTerminologyCapabilitiesQueryProperty2<R>
    on QueryBuilder<IsarTerminologyCapabilities, R, QAfterProperty> {
  QueryBuilder<IsarTerminologyCapabilities, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarTerminologyCapabilitiesQueryProperty3<R1, R2>
    on QueryBuilder<IsarTerminologyCapabilities, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarTerminologyCapabilities, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarTestReportCollection on Isar {
  IsarCollection<int, IsarTestReport> get isarTestReports => this.collection();
}

const IsarTestReportSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarTestReport',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarTestReport>(
    serialize: serializeIsarTestReport,
    deserialize: deserializeIsarTestReport,
    deserializeProperty: deserializeIsarTestReportProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarTestReport(IsarWriter writer, IsarTestReport object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarTestReport deserializeIsarTestReport(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarTestReport(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarTestReportProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarTestReportUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarTestReportUpdateImpl implements _IsarTestReportUpdate {
  const _IsarTestReportUpdateImpl(this.collection);

  final IsarCollection<int, IsarTestReport> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarTestReportUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarTestReportUpdateAllImpl implements _IsarTestReportUpdateAll {
  const _IsarTestReportUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarTestReport> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarTestReportUpdate on IsarCollection<int, IsarTestReport> {
  _IsarTestReportUpdate get update => _IsarTestReportUpdateImpl(this);

  _IsarTestReportUpdateAll get updateAll => _IsarTestReportUpdateAllImpl(this);
}

sealed class _IsarTestReportQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarTestReportQueryUpdateImpl implements _IsarTestReportQueryUpdate {
  const _IsarTestReportQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarTestReport> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarTestReportQueryUpdate on IsarQuery<IsarTestReport> {
  _IsarTestReportQueryUpdate get updateFirst =>
      _IsarTestReportQueryUpdateImpl(this, limit: 1);

  _IsarTestReportQueryUpdate get updateAll =>
      _IsarTestReportQueryUpdateImpl(this);
}

class _IsarTestReportQueryBuilderUpdateImpl
    implements _IsarTestReportQueryUpdate {
  const _IsarTestReportQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarTestReport, IsarTestReport, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarTestReportQueryBuilderUpdate
    on QueryBuilder<IsarTestReport, IsarTestReport, QOperations> {
  _IsarTestReportQueryUpdate get updateFirst =>
      _IsarTestReportQueryBuilderUpdateImpl(this, limit: 1);

  _IsarTestReportQueryUpdate get updateAll =>
      _IsarTestReportQueryBuilderUpdateImpl(this);
}

extension IsarTestReportQueryFilter
    on QueryBuilder<IsarTestReport, IsarTestReport, QFilterCondition> {
  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarTestReportQueryObject
    on QueryBuilder<IsarTestReport, IsarTestReport, QFilterCondition> {}

extension IsarTestReportQuerySortBy
    on QueryBuilder<IsarTestReport, IsarTestReport, QSortBy> {
  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarTestReportQuerySortThenBy
    on QueryBuilder<IsarTestReport, IsarTestReport, QSortThenBy> {
  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarTestReportQueryWhereDistinct
    on QueryBuilder<IsarTestReport, IsarTestReport, QDistinct> {
  QueryBuilder<IsarTestReport, IsarTestReport, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarTestReportQueryProperty1
    on QueryBuilder<IsarTestReport, IsarTestReport, QProperty> {
  QueryBuilder<IsarTestReport, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTestReport, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarTestReport, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarTestReportQueryProperty2<R>
    on QueryBuilder<IsarTestReport, R, QAfterProperty> {
  QueryBuilder<IsarTestReport, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTestReport, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarTestReport, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarTestReportQueryProperty3<R1, R2>
    on QueryBuilder<IsarTestReport, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarTestReport, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTestReport, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarTestReport, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarTestScriptCollection on Isar {
  IsarCollection<int, IsarTestScript> get isarTestScripts => this.collection();
}

const IsarTestScriptSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarTestScript',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarTestScript>(
    serialize: serializeIsarTestScript,
    deserialize: deserializeIsarTestScript,
    deserializeProperty: deserializeIsarTestScriptProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarTestScript(IsarWriter writer, IsarTestScript object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarTestScript deserializeIsarTestScript(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarTestScript(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarTestScriptProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarTestScriptUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarTestScriptUpdateImpl implements _IsarTestScriptUpdate {
  const _IsarTestScriptUpdateImpl(this.collection);

  final IsarCollection<int, IsarTestScript> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarTestScriptUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarTestScriptUpdateAllImpl implements _IsarTestScriptUpdateAll {
  const _IsarTestScriptUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarTestScript> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarTestScriptUpdate on IsarCollection<int, IsarTestScript> {
  _IsarTestScriptUpdate get update => _IsarTestScriptUpdateImpl(this);

  _IsarTestScriptUpdateAll get updateAll => _IsarTestScriptUpdateAllImpl(this);
}

sealed class _IsarTestScriptQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarTestScriptQueryUpdateImpl implements _IsarTestScriptQueryUpdate {
  const _IsarTestScriptQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarTestScript> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarTestScriptQueryUpdate on IsarQuery<IsarTestScript> {
  _IsarTestScriptQueryUpdate get updateFirst =>
      _IsarTestScriptQueryUpdateImpl(this, limit: 1);

  _IsarTestScriptQueryUpdate get updateAll =>
      _IsarTestScriptQueryUpdateImpl(this);
}

class _IsarTestScriptQueryBuilderUpdateImpl
    implements _IsarTestScriptQueryUpdate {
  const _IsarTestScriptQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarTestScript, IsarTestScript, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarTestScriptQueryBuilderUpdate
    on QueryBuilder<IsarTestScript, IsarTestScript, QOperations> {
  _IsarTestScriptQueryUpdate get updateFirst =>
      _IsarTestScriptQueryBuilderUpdateImpl(this, limit: 1);

  _IsarTestScriptQueryUpdate get updateAll =>
      _IsarTestScriptQueryBuilderUpdateImpl(this);
}

extension IsarTestScriptQueryFilter
    on QueryBuilder<IsarTestScript, IsarTestScript, QFilterCondition> {
  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarTestScriptQueryObject
    on QueryBuilder<IsarTestScript, IsarTestScript, QFilterCondition> {}

extension IsarTestScriptQuerySortBy
    on QueryBuilder<IsarTestScript, IsarTestScript, QSortBy> {
  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarTestScriptQuerySortThenBy
    on QueryBuilder<IsarTestScript, IsarTestScript, QSortThenBy> {
  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarTestScriptQueryWhereDistinct
    on QueryBuilder<IsarTestScript, IsarTestScript, QDistinct> {
  QueryBuilder<IsarTestScript, IsarTestScript, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarTestScriptQueryProperty1
    on QueryBuilder<IsarTestScript, IsarTestScript, QProperty> {
  QueryBuilder<IsarTestScript, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTestScript, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarTestScript, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarTestScriptQueryProperty2<R>
    on QueryBuilder<IsarTestScript, R, QAfterProperty> {
  QueryBuilder<IsarTestScript, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTestScript, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarTestScript, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarTestScriptQueryProperty3<R1, R2>
    on QueryBuilder<IsarTestScript, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarTestScript, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTestScript, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarTestScript, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarValueSetCollection on Isar {
  IsarCollection<int, IsarValueSet> get isarValueSets => this.collection();
}

const IsarValueSetSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarValueSet',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarValueSet>(
    serialize: serializeIsarValueSet,
    deserialize: deserializeIsarValueSet,
    deserializeProperty: deserializeIsarValueSetProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarValueSet(IsarWriter writer, IsarValueSet object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarValueSet deserializeIsarValueSet(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarValueSet(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarValueSetProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarValueSetUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarValueSetUpdateImpl implements _IsarValueSetUpdate {
  const _IsarValueSetUpdateImpl(this.collection);

  final IsarCollection<int, IsarValueSet> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarValueSetUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarValueSetUpdateAllImpl implements _IsarValueSetUpdateAll {
  const _IsarValueSetUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarValueSet> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarValueSetUpdate on IsarCollection<int, IsarValueSet> {
  _IsarValueSetUpdate get update => _IsarValueSetUpdateImpl(this);

  _IsarValueSetUpdateAll get updateAll => _IsarValueSetUpdateAllImpl(this);
}

sealed class _IsarValueSetQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarValueSetQueryUpdateImpl implements _IsarValueSetQueryUpdate {
  const _IsarValueSetQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarValueSet> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarValueSetQueryUpdate on IsarQuery<IsarValueSet> {
  _IsarValueSetQueryUpdate get updateFirst =>
      _IsarValueSetQueryUpdateImpl(this, limit: 1);

  _IsarValueSetQueryUpdate get updateAll => _IsarValueSetQueryUpdateImpl(this);
}

class _IsarValueSetQueryBuilderUpdateImpl implements _IsarValueSetQueryUpdate {
  const _IsarValueSetQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarValueSet, IsarValueSet, QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarValueSetQueryBuilderUpdate
    on QueryBuilder<IsarValueSet, IsarValueSet, QOperations> {
  _IsarValueSetQueryUpdate get updateFirst =>
      _IsarValueSetQueryBuilderUpdateImpl(this, limit: 1);

  _IsarValueSetQueryUpdate get updateAll =>
      _IsarValueSetQueryBuilderUpdateImpl(this);
}

extension IsarValueSetQueryFilter
    on QueryBuilder<IsarValueSet, IsarValueSet, QFilterCondition> {
  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition>
      fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition>
      fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition>
      fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition>
      fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition>
      fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition>
      fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition> fhirIdMatches(
      String pattern,
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition>
      fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition>
      fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarValueSetQueryObject
    on QueryBuilder<IsarValueSet, IsarValueSet, QFilterCondition> {}

extension IsarValueSetQuerySortBy
    on QueryBuilder<IsarValueSet, IsarValueSet, QSortBy> {
  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> sortByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> sortByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarValueSetQuerySortThenBy
    on QueryBuilder<IsarValueSet, IsarValueSet, QSortThenBy> {
  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> thenByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> thenByFhirIdDesc(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarValueSetQueryWhereDistinct
    on QueryBuilder<IsarValueSet, IsarValueSet, QDistinct> {
  QueryBuilder<IsarValueSet, IsarValueSet, QAfterDistinct> distinctByFhirId(
      {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarValueSetQueryProperty1
    on QueryBuilder<IsarValueSet, IsarValueSet, QProperty> {
  QueryBuilder<IsarValueSet, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarValueSet, String, QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarValueSet, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarValueSetQueryProperty2<R>
    on QueryBuilder<IsarValueSet, R, QAfterProperty> {
  QueryBuilder<IsarValueSet, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarValueSet, (R, String), QAfterProperty> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarValueSet, (R, Map<String, dynamic>), QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarValueSetQueryProperty3<R1, R2>
    on QueryBuilder<IsarValueSet, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarValueSet, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarValueSet, (R1, R2, String), QOperations> fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarValueSet, (R1, R2, Map<String, dynamic>), QOperations>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarVerificationResultCollection on Isar {
  IsarCollection<int, IsarVerificationResult> get isarVerificationResults =>
      this.collection();
}

const IsarVerificationResultSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarVerificationResult',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarVerificationResult>(
    serialize: serializeIsarVerificationResult,
    deserialize: deserializeIsarVerificationResult,
    deserializeProperty: deserializeIsarVerificationResultProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarVerificationResult(
    IsarWriter writer, IsarVerificationResult object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarVerificationResult deserializeIsarVerificationResult(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarVerificationResult(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarVerificationResultProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarVerificationResultUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarVerificationResultUpdateImpl
    implements _IsarVerificationResultUpdate {
  const _IsarVerificationResultUpdateImpl(this.collection);

  final IsarCollection<int, IsarVerificationResult> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarVerificationResultUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarVerificationResultUpdateAllImpl
    implements _IsarVerificationResultUpdateAll {
  const _IsarVerificationResultUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarVerificationResult> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarVerificationResultUpdate
    on IsarCollection<int, IsarVerificationResult> {
  _IsarVerificationResultUpdate get update =>
      _IsarVerificationResultUpdateImpl(this);

  _IsarVerificationResultUpdateAll get updateAll =>
      _IsarVerificationResultUpdateAllImpl(this);
}

sealed class _IsarVerificationResultQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarVerificationResultQueryUpdateImpl
    implements _IsarVerificationResultQueryUpdate {
  const _IsarVerificationResultQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarVerificationResult> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarVerificationResultQueryUpdate
    on IsarQuery<IsarVerificationResult> {
  _IsarVerificationResultQueryUpdate get updateFirst =>
      _IsarVerificationResultQueryUpdateImpl(this, limit: 1);

  _IsarVerificationResultQueryUpdate get updateAll =>
      _IsarVerificationResultQueryUpdateImpl(this);
}

class _IsarVerificationResultQueryBuilderUpdateImpl
    implements _IsarVerificationResultQueryUpdate {
  const _IsarVerificationResultQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarVerificationResultQueryBuilderUpdate on QueryBuilder<
    IsarVerificationResult, IsarVerificationResult, QOperations> {
  _IsarVerificationResultQueryUpdate get updateFirst =>
      _IsarVerificationResultQueryBuilderUpdateImpl(this, limit: 1);

  _IsarVerificationResultQueryUpdate get updateAll =>
      _IsarVerificationResultQueryBuilderUpdateImpl(this);
}

extension IsarVerificationResultQueryFilter on QueryBuilder<
    IsarVerificationResult, IsarVerificationResult, QFilterCondition> {
  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarVerificationResultQueryObject on QueryBuilder<
    IsarVerificationResult, IsarVerificationResult, QFilterCondition> {}

extension IsarVerificationResultQuerySortBy
    on QueryBuilder<IsarVerificationResult, IsarVerificationResult, QSortBy> {
  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarVerificationResultQuerySortThenBy on QueryBuilder<
    IsarVerificationResult, IsarVerificationResult, QSortThenBy> {
  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarVerificationResultQueryWhereDistinct
    on QueryBuilder<IsarVerificationResult, IsarVerificationResult, QDistinct> {
  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarVerificationResultQueryProperty1
    on QueryBuilder<IsarVerificationResult, IsarVerificationResult, QProperty> {
  QueryBuilder<IsarVerificationResult, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarVerificationResult, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarVerificationResult, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarVerificationResultQueryProperty2<R>
    on QueryBuilder<IsarVerificationResult, R, QAfterProperty> {
  QueryBuilder<IsarVerificationResult, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarVerificationResult, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarVerificationResult, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarVerificationResultQueryProperty3<R1, R2>
    on QueryBuilder<IsarVerificationResult, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarVerificationResult, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarVerificationResult, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarVerificationResult, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarVisionPrescriptionCollection on Isar {
  IsarCollection<int, IsarVisionPrescription> get isarVisionPrescriptions =>
      this.collection();
}

const IsarVisionPrescriptionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarVisionPrescription',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'fhirId',
        type: IsarType.string,
      ),
      IsarPropertySchema(
        name: 'resource',
        type: IsarType.json,
      ),
    ],
    indexes: [
      IsarIndexSchema(
        name: 'fhirId',
        properties: [
          "fhirId",
        ],
        unique: false,
        hash: false,
      ),
    ],
  ),
  converter: IsarObjectConverter<int, IsarVisionPrescription>(
    serialize: serializeIsarVisionPrescription,
    deserialize: deserializeIsarVisionPrescription,
    deserializeProperty: deserializeIsarVisionPrescriptionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarVisionPrescription(
    IsarWriter writer, IsarVisionPrescription object) {
  IsarCore.writeString(writer, 1, object.fhirId);
  IsarCore.writeString(writer, 2, isarJsonEncode(object.resource));
  return object.id;
}

@isarProtected
IsarVisionPrescription deserializeIsarVisionPrescription(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _resource;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
    if (json is Map<String, dynamic>) {
      _resource = json;
    } else {
      _resource = const <String, dynamic>{};
    }
  }
  final object = IsarVisionPrescription(
    id: _id,
    resource: _resource,
  );
  object.fhirId = IsarCore.readString(reader, 1) ?? '';
  return object;
}

@isarProtected
dynamic deserializeIsarVisionPrescriptionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      return IsarCore.readString(reader, 1) ?? '';
    case 2:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 2) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

sealed class _IsarVisionPrescriptionUpdate {
  bool call({
    required int id,
    String? fhirId,
  });
}

class _IsarVisionPrescriptionUpdateImpl
    implements _IsarVisionPrescriptionUpdate {
  const _IsarVisionPrescriptionUpdateImpl(this.collection);

  final IsarCollection<int, IsarVisionPrescription> collection;

  @override
  bool call({
    required int id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties([
          id
        ], {
          if (fhirId != ignore) 1: fhirId as String?,
        }) >
        0;
  }
}

sealed class _IsarVisionPrescriptionUpdateAll {
  int call({
    required List<int> id,
    String? fhirId,
  });
}

class _IsarVisionPrescriptionUpdateAllImpl
    implements _IsarVisionPrescriptionUpdateAll {
  const _IsarVisionPrescriptionUpdateAllImpl(this.collection);

  final IsarCollection<int, IsarVisionPrescription> collection;

  @override
  int call({
    required List<int> id,
    Object? fhirId = ignore,
  }) {
    return collection.updateProperties(id, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarVisionPrescriptionUpdate
    on IsarCollection<int, IsarVisionPrescription> {
  _IsarVisionPrescriptionUpdate get update =>
      _IsarVisionPrescriptionUpdateImpl(this);

  _IsarVisionPrescriptionUpdateAll get updateAll =>
      _IsarVisionPrescriptionUpdateAllImpl(this);
}

sealed class _IsarVisionPrescriptionQueryUpdate {
  int call({
    String? fhirId,
  });
}

class _IsarVisionPrescriptionQueryUpdateImpl
    implements _IsarVisionPrescriptionQueryUpdate {
  const _IsarVisionPrescriptionQueryUpdateImpl(this.query, {this.limit});

  final IsarQuery<IsarVisionPrescription> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    return query.updateProperties(limit: limit, {
      if (fhirId != ignore) 1: fhirId as String?,
    });
  }
}

extension IsarVisionPrescriptionQueryUpdate
    on IsarQuery<IsarVisionPrescription> {
  _IsarVisionPrescriptionQueryUpdate get updateFirst =>
      _IsarVisionPrescriptionQueryUpdateImpl(this, limit: 1);

  _IsarVisionPrescriptionQueryUpdate get updateAll =>
      _IsarVisionPrescriptionQueryUpdateImpl(this);
}

class _IsarVisionPrescriptionQueryBuilderUpdateImpl
    implements _IsarVisionPrescriptionQueryUpdate {
  const _IsarVisionPrescriptionQueryBuilderUpdateImpl(this.query, {this.limit});

  final QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QOperations> query;
  final int? limit;

  @override
  int call({
    Object? fhirId = ignore,
  }) {
    final q = query.build();
    try {
      return q.updateProperties(limit: limit, {
        if (fhirId != ignore) 1: fhirId as String?,
      });
    } finally {
      q.close();
    }
  }
}

extension IsarVisionPrescriptionQueryBuilderUpdate on QueryBuilder<
    IsarVisionPrescription, IsarVisionPrescription, QOperations> {
  _IsarVisionPrescriptionQueryUpdate get updateFirst =>
      _IsarVisionPrescriptionQueryBuilderUpdateImpl(this, limit: 1);

  _IsarVisionPrescriptionQueryUpdate get updateAll =>
      _IsarVisionPrescriptionQueryBuilderUpdateImpl(this);
}

extension IsarVisionPrescriptionQueryFilter on QueryBuilder<
    IsarVisionPrescription, IsarVisionPrescription, QFilterCondition> {
  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> fhirIdEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> fhirIdGreaterThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> fhirIdGreaterThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> fhirIdLessThan(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> fhirIdLessThanOrEqualTo(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> fhirIdBetween(
    String lower,
    String upper, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 1,
          lower: lower,
          upper: upper,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> fhirIdStartsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        StartsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> fhirIdEndsWith(
    String value, {
    bool caseSensitive = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EndsWithCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
          QAfterFilterCondition>
      fhirIdContains(String value, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        ContainsCondition(
          property: 1,
          value: value,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
          QAfterFilterCondition>
      fhirIdMatches(String pattern, {bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        MatchesCondition(
          property: 1,
          wildcard: pattern,
          caseSensitive: caseSensitive,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> fhirIdIsEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const EqualCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> fhirIdIsNotEmpty() {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        const GreaterCondition(
          property: 1,
          value: '',
        ),
      );
    });
  }
}

extension IsarVisionPrescriptionQueryObject on QueryBuilder<
    IsarVisionPrescription, IsarVisionPrescription, QFilterCondition> {}

extension IsarVisionPrescriptionQuerySortBy
    on QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QSortBy> {
  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      sortByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      sortByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(
        1,
        sort: Sort.desc,
        caseSensitive: caseSensitive,
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      sortByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      sortByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarVisionPrescriptionQuerySortThenBy on QueryBuilder<
    IsarVisionPrescription, IsarVisionPrescription, QSortThenBy> {
  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      thenByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      thenByFhirIdDesc({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      thenByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2);
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      thenByResourceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(2, sort: Sort.desc);
    });
  }
}

extension IsarVisionPrescriptionQueryWhereDistinct
    on QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QDistinct> {
  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterDistinct>
      distinctByFhirId({bool caseSensitive = true}) {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1, caseSensitive: caseSensitive);
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterDistinct>
      distinctByResource() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(2);
    });
  }
}

extension IsarVisionPrescriptionQueryProperty1
    on QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QProperty> {
  QueryBuilder<IsarVisionPrescription, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarVisionPrescription, String, QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarVisionPrescription, Map<String, dynamic>, QAfterProperty>
      resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarVisionPrescriptionQueryProperty2<R>
    on QueryBuilder<IsarVisionPrescription, R, QAfterProperty> {
  QueryBuilder<IsarVisionPrescription, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarVisionPrescription, (R, String), QAfterProperty>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarVisionPrescription, (R, Map<String, dynamic>),
      QAfterProperty> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}

extension IsarVisionPrescriptionQueryProperty3<R1, R2>
    on QueryBuilder<IsarVisionPrescription, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarVisionPrescription, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarVisionPrescription, (R1, R2, String), QOperations>
      fhirIdProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }

  QueryBuilder<IsarVisionPrescription, (R1, R2, Map<String, dynamic>),
      QOperations> resourceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(2);
    });
  }
}
