// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'resources.dart';

// **************************************************************************
// _IsarCollectionGenerator
// **************************************************************************

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarAccountCollection on Isar {
  IsarCollection<int, IsarAccount> get isarAccounts => this.collection();
}

const IsarAccountSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarAccount',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'account',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarAccount>(
    serialize: serializeIsarAccount,
    deserialize: deserializeIsarAccount,
    deserializeProperty: deserializeIsarAccountProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarAccount(IsarWriter writer, IsarAccount object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.account));
  return object.id;
}

@isarProtected
IsarAccount deserializeIsarAccount(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _account;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _account = json;
    } else {
      _account = const <String, dynamic>{};
    }
  }
  final object = IsarAccount(
    id: _id,
    account: _account,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarAccountProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarAccountQueryFilter
    on QueryBuilder<IsarAccount, IsarAccount, QFilterCondition> {
  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarAccountQueryObject
    on QueryBuilder<IsarAccount, IsarAccount, QFilterCondition> {}

extension IsarAccountQuerySortBy
    on QueryBuilder<IsarAccount, IsarAccount, QSortBy> {
  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> sortByAccount() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> sortByAccountDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarAccountQuerySortThenBy
    on QueryBuilder<IsarAccount, IsarAccount, QSortThenBy> {
  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> thenByAccount() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarAccount, IsarAccount, QAfterSortBy> thenByAccountDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarAccountQueryWhereDistinct
    on QueryBuilder<IsarAccount, IsarAccount, QDistinct> {
  QueryBuilder<IsarAccount, IsarAccount, QAfterDistinct> distinctByAccount() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarAccountQueryProperty1
    on QueryBuilder<IsarAccount, IsarAccount, QProperty> {
  QueryBuilder<IsarAccount, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAccount, Map<String, dynamic>, QAfterProperty>
      accountProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarAccountQueryProperty2<R>
    on QueryBuilder<IsarAccount, R, QAfterProperty> {
  QueryBuilder<IsarAccount, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAccount, (R, Map<String, dynamic>), QAfterProperty>
      accountProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarAccountQueryProperty3<R1, R2>
    on QueryBuilder<IsarAccount, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarAccount, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAccount, (R1, R2, Map<String, dynamic>), QOperations>
      accountProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarActivityDefinitionCollection on Isar {
  IsarCollection<int, IsarActivityDefinition> get isarActivityDefinitions =>
      this.collection();
}

const IsarActivityDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarActivityDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'activityDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarActivityDefinition>(
    serialize: serializeIsarActivityDefinition,
    deserialize: deserializeIsarActivityDefinition,
    deserializeProperty: deserializeIsarActivityDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarActivityDefinition(
    IsarWriter writer, IsarActivityDefinition object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.activityDefinition));
  return object.id;
}

@isarProtected
IsarActivityDefinition deserializeIsarActivityDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _activityDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _activityDefinition = json;
    } else {
      _activityDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarActivityDefinition(
    id: _id,
    activityDefinition: _activityDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarActivityDefinitionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarActivityDefinitionQueryFilter on QueryBuilder<
    IsarActivityDefinition, IsarActivityDefinition, QFilterCondition> {
  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarActivityDefinitionQueryObject on QueryBuilder<
    IsarActivityDefinition, IsarActivityDefinition, QFilterCondition> {}

extension IsarActivityDefinitionQuerySortBy
    on QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QSortBy> {
  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      sortByActivityDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      sortByActivityDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarActivityDefinitionQuerySortThenBy on QueryBuilder<
    IsarActivityDefinition, IsarActivityDefinition, QSortThenBy> {
  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      thenByActivityDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterSortBy>
      thenByActivityDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarActivityDefinitionQueryWhereDistinct
    on QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QDistinct> {
  QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QAfterDistinct>
      distinctByActivityDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarActivityDefinitionQueryProperty1
    on QueryBuilder<IsarActivityDefinition, IsarActivityDefinition, QProperty> {
  QueryBuilder<IsarActivityDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarActivityDefinition, Map<String, dynamic>, QAfterProperty>
      activityDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarActivityDefinitionQueryProperty2<R>
    on QueryBuilder<IsarActivityDefinition, R, QAfterProperty> {
  QueryBuilder<IsarActivityDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarActivityDefinition, (R, Map<String, dynamic>),
      QAfterProperty> activityDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarActivityDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarActivityDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarActivityDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarActivityDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> activityDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarAdministrableProductDefinitionCollection on Isar {
  IsarCollection<int, IsarAdministrableProductDefinition>
      get isarAdministrableProductDefinitions => this.collection();
}

const IsarAdministrableProductDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarAdministrableProductDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'administrableProductDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarAdministrableProductDefinition>(
    serialize: serializeIsarAdministrableProductDefinition,
    deserialize: deserializeIsarAdministrableProductDefinition,
    deserializeProperty: deserializeIsarAdministrableProductDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarAdministrableProductDefinition(
    IsarWriter writer, IsarAdministrableProductDefinition object) {
  IsarCore.writeString(
      writer, 1, isarJsonEncode(object.administrableProductDefinition));
  return object.id;
}

@isarProtected
IsarAdministrableProductDefinition
    deserializeIsarAdministrableProductDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _administrableProductDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _administrableProductDefinition = json;
    } else {
      _administrableProductDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarAdministrableProductDefinition(
    id: _id,
    administrableProductDefinition: _administrableProductDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarAdministrableProductDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarAdministrableProductDefinitionQueryFilter on QueryBuilder<
    IsarAdministrableProductDefinition,
    IsarAdministrableProductDefinition,
    QFilterCondition> {
  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarAdministrableProductDefinitionQueryObject on QueryBuilder<
    IsarAdministrableProductDefinition,
    IsarAdministrableProductDefinition,
    QFilterCondition> {}

extension IsarAdministrableProductDefinitionQuerySortBy on QueryBuilder<
    IsarAdministrableProductDefinition,
    IsarAdministrableProductDefinition,
    QSortBy> {
  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterSortBy> sortByAdministrableProductDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterSortBy> sortByAdministrableProductDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarAdministrableProductDefinitionQuerySortThenBy on QueryBuilder<
    IsarAdministrableProductDefinition,
    IsarAdministrableProductDefinition,
    QSortThenBy> {
  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterSortBy> thenByAdministrableProductDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterSortBy> thenByAdministrableProductDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarAdministrableProductDefinitionQueryWhereDistinct on QueryBuilder<
    IsarAdministrableProductDefinition,
    IsarAdministrableProductDefinition,
    QDistinct> {
  QueryBuilder<
      IsarAdministrableProductDefinition,
      IsarAdministrableProductDefinition,
      QAfterDistinct> distinctByAdministrableProductDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarAdministrableProductDefinitionQueryProperty1 on QueryBuilder<
    IsarAdministrableProductDefinition,
    IsarAdministrableProductDefinition,
    QProperty> {
  QueryBuilder<IsarAdministrableProductDefinition, int, QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition, Map<String, dynamic>,
      QAfterProperty> administrableProductDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarAdministrableProductDefinitionQueryProperty2<R>
    on QueryBuilder<IsarAdministrableProductDefinition, R, QAfterProperty> {
  QueryBuilder<IsarAdministrableProductDefinition, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAdministrableProductDefinition, (R, Map<String, dynamic>),
      QAfterProperty> administrableProductDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarAdministrableProductDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarAdministrableProductDefinition, (R1, R2),
        QAfterProperty> {
  QueryBuilder<IsarAdministrableProductDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<
      IsarAdministrableProductDefinition,
      (R1, R2, Map<String, dynamic>),
      QOperations> administrableProductDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarAdverseEventCollection on Isar {
  IsarCollection<int, IsarAdverseEvent> get isarAdverseEvents =>
      this.collection();
}

const IsarAdverseEventSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarAdverseEvent',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'adverseEvent',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarAdverseEvent>(
    serialize: serializeIsarAdverseEvent,
    deserialize: deserializeIsarAdverseEvent,
    deserializeProperty: deserializeIsarAdverseEventProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarAdverseEvent(IsarWriter writer, IsarAdverseEvent object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.adverseEvent));
  return object.id;
}

@isarProtected
IsarAdverseEvent deserializeIsarAdverseEvent(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _adverseEvent;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _adverseEvent = json;
    } else {
      _adverseEvent = const <String, dynamic>{};
    }
  }
  final object = IsarAdverseEvent(
    id: _id,
    adverseEvent: _adverseEvent,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarAdverseEventProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarAdverseEventQueryFilter
    on QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QFilterCondition> {
  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarAdverseEventQueryObject
    on QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QFilterCondition> {}

extension IsarAdverseEventQuerySortBy
    on QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QSortBy> {
  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy>
      sortByAdverseEvent() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy>
      sortByAdverseEventDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarAdverseEventQuerySortThenBy
    on QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QSortThenBy> {
  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy>
      thenByAdverseEvent() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterSortBy>
      thenByAdverseEventDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarAdverseEventQueryWhereDistinct
    on QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QDistinct> {
  QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QAfterDistinct>
      distinctByAdverseEvent() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarAdverseEventQueryProperty1
    on QueryBuilder<IsarAdverseEvent, IsarAdverseEvent, QProperty> {
  QueryBuilder<IsarAdverseEvent, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAdverseEvent, Map<String, dynamic>, QAfterProperty>
      adverseEventProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarAdverseEventQueryProperty2<R>
    on QueryBuilder<IsarAdverseEvent, R, QAfterProperty> {
  QueryBuilder<IsarAdverseEvent, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAdverseEvent, (R, Map<String, dynamic>), QAfterProperty>
      adverseEventProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarAdverseEventQueryProperty3<R1, R2>
    on QueryBuilder<IsarAdverseEvent, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarAdverseEvent, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAdverseEvent, (R1, R2, Map<String, dynamic>), QOperations>
      adverseEventProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarAllergyIntoleranceCollection on Isar {
  IsarCollection<int, IsarAllergyIntolerance> get isarAllergyIntolerances =>
      this.collection();
}

const IsarAllergyIntoleranceSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarAllergyIntolerance',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'allergyIntolerance',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarAllergyIntolerance>(
    serialize: serializeIsarAllergyIntolerance,
    deserialize: deserializeIsarAllergyIntolerance,
    deserializeProperty: deserializeIsarAllergyIntoleranceProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarAllergyIntolerance(
    IsarWriter writer, IsarAllergyIntolerance object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.allergyIntolerance));
  return object.id;
}

@isarProtected
IsarAllergyIntolerance deserializeIsarAllergyIntolerance(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _allergyIntolerance;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _allergyIntolerance = json;
    } else {
      _allergyIntolerance = const <String, dynamic>{};
    }
  }
  final object = IsarAllergyIntolerance(
    id: _id,
    allergyIntolerance: _allergyIntolerance,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarAllergyIntoleranceProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarAllergyIntoleranceQueryFilter on QueryBuilder<
    IsarAllergyIntolerance, IsarAllergyIntolerance, QFilterCondition> {
  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarAllergyIntoleranceQueryObject on QueryBuilder<
    IsarAllergyIntolerance, IsarAllergyIntolerance, QFilterCondition> {}

extension IsarAllergyIntoleranceQuerySortBy
    on QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QSortBy> {
  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      sortByAllergyIntolerance() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      sortByAllergyIntoleranceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarAllergyIntoleranceQuerySortThenBy on QueryBuilder<
    IsarAllergyIntolerance, IsarAllergyIntolerance, QSortThenBy> {
  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      thenByAllergyIntolerance() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterSortBy>
      thenByAllergyIntoleranceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarAllergyIntoleranceQueryWhereDistinct
    on QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QDistinct> {
  QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QAfterDistinct>
      distinctByAllergyIntolerance() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarAllergyIntoleranceQueryProperty1
    on QueryBuilder<IsarAllergyIntolerance, IsarAllergyIntolerance, QProperty> {
  QueryBuilder<IsarAllergyIntolerance, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, Map<String, dynamic>, QAfterProperty>
      allergyIntoleranceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarAllergyIntoleranceQueryProperty2<R>
    on QueryBuilder<IsarAllergyIntolerance, R, QAfterProperty> {
  QueryBuilder<IsarAllergyIntolerance, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, (R, Map<String, dynamic>),
      QAfterProperty> allergyIntoleranceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarAllergyIntoleranceQueryProperty3<R1, R2>
    on QueryBuilder<IsarAllergyIntolerance, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarAllergyIntolerance, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAllergyIntolerance, (R1, R2, Map<String, dynamic>),
      QOperations> allergyIntoleranceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarAppointmentCollection on Isar {
  IsarCollection<int, IsarAppointment> get isarAppointments =>
      this.collection();
}

const IsarAppointmentSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarAppointment',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'appointment',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarAppointment>(
    serialize: serializeIsarAppointment,
    deserialize: deserializeIsarAppointment,
    deserializeProperty: deserializeIsarAppointmentProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarAppointment(IsarWriter writer, IsarAppointment object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.appointment));
  return object.id;
}

@isarProtected
IsarAppointment deserializeIsarAppointment(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _appointment;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _appointment = json;
    } else {
      _appointment = const <String, dynamic>{};
    }
  }
  final object = IsarAppointment(
    id: _id,
    appointment: _appointment,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarAppointmentProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarAppointmentQueryFilter
    on QueryBuilder<IsarAppointment, IsarAppointment, QFilterCondition> {
  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarAppointmentQueryObject
    on QueryBuilder<IsarAppointment, IsarAppointment, QFilterCondition> {}

extension IsarAppointmentQuerySortBy
    on QueryBuilder<IsarAppointment, IsarAppointment, QSortBy> {
  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy>
      sortByAppointment() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy>
      sortByAppointmentDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarAppointmentQuerySortThenBy
    on QueryBuilder<IsarAppointment, IsarAppointment, QSortThenBy> {
  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy>
      thenByAppointment() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarAppointment, IsarAppointment, QAfterSortBy>
      thenByAppointmentDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarAppointmentQueryWhereDistinct
    on QueryBuilder<IsarAppointment, IsarAppointment, QDistinct> {
  QueryBuilder<IsarAppointment, IsarAppointment, QAfterDistinct>
      distinctByAppointment() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarAppointmentQueryProperty1
    on QueryBuilder<IsarAppointment, IsarAppointment, QProperty> {
  QueryBuilder<IsarAppointment, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAppointment, Map<String, dynamic>, QAfterProperty>
      appointmentProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarAppointmentQueryProperty2<R>
    on QueryBuilder<IsarAppointment, R, QAfterProperty> {
  QueryBuilder<IsarAppointment, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAppointment, (R, Map<String, dynamic>), QAfterProperty>
      appointmentProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarAppointmentQueryProperty3<R1, R2>
    on QueryBuilder<IsarAppointment, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarAppointment, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAppointment, (R1, R2, Map<String, dynamic>), QOperations>
      appointmentProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarAppointmentResponseCollection on Isar {
  IsarCollection<int, IsarAppointmentResponse> get isarAppointmentResponses =>
      this.collection();
}

const IsarAppointmentResponseSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarAppointmentResponse',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'appointmentResponse',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarAppointmentResponse>(
    serialize: serializeIsarAppointmentResponse,
    deserialize: deserializeIsarAppointmentResponse,
    deserializeProperty: deserializeIsarAppointmentResponseProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarAppointmentResponse(
    IsarWriter writer, IsarAppointmentResponse object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.appointmentResponse));
  return object.id;
}

@isarProtected
IsarAppointmentResponse deserializeIsarAppointmentResponse(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _appointmentResponse;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _appointmentResponse = json;
    } else {
      _appointmentResponse = const <String, dynamic>{};
    }
  }
  final object = IsarAppointmentResponse(
    id: _id,
    appointmentResponse: _appointmentResponse,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarAppointmentResponseProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarAppointmentResponseQueryFilter on QueryBuilder<
    IsarAppointmentResponse, IsarAppointmentResponse, QFilterCondition> {
  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarAppointmentResponseQueryObject on QueryBuilder<
    IsarAppointmentResponse, IsarAppointmentResponse, QFilterCondition> {}

extension IsarAppointmentResponseQuerySortBy
    on QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QSortBy> {
  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      sortByAppointmentResponse() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      sortByAppointmentResponseDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarAppointmentResponseQuerySortThenBy on QueryBuilder<
    IsarAppointmentResponse, IsarAppointmentResponse, QSortThenBy> {
  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      thenByAppointmentResponse() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterSortBy>
      thenByAppointmentResponseDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarAppointmentResponseQueryWhereDistinct on QueryBuilder<
    IsarAppointmentResponse, IsarAppointmentResponse, QDistinct> {
  QueryBuilder<IsarAppointmentResponse, IsarAppointmentResponse, QAfterDistinct>
      distinctByAppointmentResponse() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarAppointmentResponseQueryProperty1 on QueryBuilder<
    IsarAppointmentResponse, IsarAppointmentResponse, QProperty> {
  QueryBuilder<IsarAppointmentResponse, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAppointmentResponse, Map<String, dynamic>, QAfterProperty>
      appointmentResponseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarAppointmentResponseQueryProperty2<R>
    on QueryBuilder<IsarAppointmentResponse, R, QAfterProperty> {
  QueryBuilder<IsarAppointmentResponse, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAppointmentResponse, (R, Map<String, dynamic>),
      QAfterProperty> appointmentResponseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarAppointmentResponseQueryProperty3<R1, R2>
    on QueryBuilder<IsarAppointmentResponse, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarAppointmentResponse, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAppointmentResponse, (R1, R2, Map<String, dynamic>),
      QOperations> appointmentResponseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarAuditEventCollection on Isar {
  IsarCollection<int, IsarAuditEvent> get isarAuditEvents => this.collection();
}

const IsarAuditEventSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarAuditEvent',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'auditEvent',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarAuditEvent>(
    serialize: serializeIsarAuditEvent,
    deserialize: deserializeIsarAuditEvent,
    deserializeProperty: deserializeIsarAuditEventProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarAuditEvent(IsarWriter writer, IsarAuditEvent object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.auditEvent));
  return object.id;
}

@isarProtected
IsarAuditEvent deserializeIsarAuditEvent(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _auditEvent;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _auditEvent = json;
    } else {
      _auditEvent = const <String, dynamic>{};
    }
  }
  final object = IsarAuditEvent(
    id: _id,
    auditEvent: _auditEvent,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarAuditEventProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarAuditEventQueryFilter
    on QueryBuilder<IsarAuditEvent, IsarAuditEvent, QFilterCondition> {
  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarAuditEventQueryObject
    on QueryBuilder<IsarAuditEvent, IsarAuditEvent, QFilterCondition> {}

extension IsarAuditEventQuerySortBy
    on QueryBuilder<IsarAuditEvent, IsarAuditEvent, QSortBy> {
  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy>
      sortByAuditEvent() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy>
      sortByAuditEventDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarAuditEventQuerySortThenBy
    on QueryBuilder<IsarAuditEvent, IsarAuditEvent, QSortThenBy> {
  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy>
      thenByAuditEvent() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterSortBy>
      thenByAuditEventDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarAuditEventQueryWhereDistinct
    on QueryBuilder<IsarAuditEvent, IsarAuditEvent, QDistinct> {
  QueryBuilder<IsarAuditEvent, IsarAuditEvent, QAfterDistinct>
      distinctByAuditEvent() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarAuditEventQueryProperty1
    on QueryBuilder<IsarAuditEvent, IsarAuditEvent, QProperty> {
  QueryBuilder<IsarAuditEvent, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAuditEvent, Map<String, dynamic>, QAfterProperty>
      auditEventProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarAuditEventQueryProperty2<R>
    on QueryBuilder<IsarAuditEvent, R, QAfterProperty> {
  QueryBuilder<IsarAuditEvent, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAuditEvent, (R, Map<String, dynamic>), QAfterProperty>
      auditEventProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarAuditEventQueryProperty3<R1, R2>
    on QueryBuilder<IsarAuditEvent, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarAuditEvent, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarAuditEvent, (R1, R2, Map<String, dynamic>), QOperations>
      auditEventProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarBasicCollection on Isar {
  IsarCollection<int, IsarBasic> get isarBasics => this.collection();
}

const IsarBasicSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarBasic',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'basic',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarBasic>(
    serialize: serializeIsarBasic,
    deserialize: deserializeIsarBasic,
    deserializeProperty: deserializeIsarBasicProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarBasic(IsarWriter writer, IsarBasic object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.basic));
  return object.id;
}

@isarProtected
IsarBasic deserializeIsarBasic(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _basic;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _basic = json;
    } else {
      _basic = const <String, dynamic>{};
    }
  }
  final object = IsarBasic(
    id: _id,
    basic: _basic,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarBasicProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarBasicQueryFilter
    on QueryBuilder<IsarBasic, IsarBasic, QFilterCondition> {
  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarBasicQueryObject
    on QueryBuilder<IsarBasic, IsarBasic, QFilterCondition> {}

extension IsarBasicQuerySortBy on QueryBuilder<IsarBasic, IsarBasic, QSortBy> {
  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> sortByBasic() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> sortByBasicDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarBasicQuerySortThenBy
    on QueryBuilder<IsarBasic, IsarBasic, QSortThenBy> {
  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> thenByBasic() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarBasic, IsarBasic, QAfterSortBy> thenByBasicDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarBasicQueryWhereDistinct
    on QueryBuilder<IsarBasic, IsarBasic, QDistinct> {
  QueryBuilder<IsarBasic, IsarBasic, QAfterDistinct> distinctByBasic() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarBasicQueryProperty1
    on QueryBuilder<IsarBasic, IsarBasic, QProperty> {
  QueryBuilder<IsarBasic, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBasic, Map<String, dynamic>, QAfterProperty>
      basicProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarBasicQueryProperty2<R>
    on QueryBuilder<IsarBasic, R, QAfterProperty> {
  QueryBuilder<IsarBasic, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBasic, (R, Map<String, dynamic>), QAfterProperty>
      basicProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarBasicQueryProperty3<R1, R2>
    on QueryBuilder<IsarBasic, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarBasic, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBasic, (R1, R2, Map<String, dynamic>), QOperations>
      basicProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarBinaryCollection on Isar {
  IsarCollection<int, IsarBinary> get isarBinarys => this.collection();
}

const IsarBinarySchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarBinary',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'binary',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarBinary>(
    serialize: serializeIsarBinary,
    deserialize: deserializeIsarBinary,
    deserializeProperty: deserializeIsarBinaryProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarBinary(IsarWriter writer, IsarBinary object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.binary));
  return object.id;
}

@isarProtected
IsarBinary deserializeIsarBinary(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _binary;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _binary = json;
    } else {
      _binary = const <String, dynamic>{};
    }
  }
  final object = IsarBinary(
    id: _id,
    binary: _binary,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarBinaryProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarBinaryQueryFilter
    on QueryBuilder<IsarBinary, IsarBinary, QFilterCondition> {
  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarBinaryQueryObject
    on QueryBuilder<IsarBinary, IsarBinary, QFilterCondition> {}

extension IsarBinaryQuerySortBy
    on QueryBuilder<IsarBinary, IsarBinary, QSortBy> {
  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> sortByBinary() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> sortByBinaryDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarBinaryQuerySortThenBy
    on QueryBuilder<IsarBinary, IsarBinary, QSortThenBy> {
  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> thenByBinary() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarBinary, IsarBinary, QAfterSortBy> thenByBinaryDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarBinaryQueryWhereDistinct
    on QueryBuilder<IsarBinary, IsarBinary, QDistinct> {
  QueryBuilder<IsarBinary, IsarBinary, QAfterDistinct> distinctByBinary() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarBinaryQueryProperty1
    on QueryBuilder<IsarBinary, IsarBinary, QProperty> {
  QueryBuilder<IsarBinary, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBinary, Map<String, dynamic>, QAfterProperty>
      binaryProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarBinaryQueryProperty2<R>
    on QueryBuilder<IsarBinary, R, QAfterProperty> {
  QueryBuilder<IsarBinary, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBinary, (R, Map<String, dynamic>), QAfterProperty>
      binaryProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarBinaryQueryProperty3<R1, R2>
    on QueryBuilder<IsarBinary, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarBinary, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBinary, (R1, R2, Map<String, dynamic>), QOperations>
      binaryProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarBiologicallyDerivedProductCollection on Isar {
  IsarCollection<int, IsarBiologicallyDerivedProduct>
      get isarBiologicallyDerivedProducts => this.collection();
}

const IsarBiologicallyDerivedProductSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarBiologicallyDerivedProduct',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'biologicallyDerivedProduct',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarBiologicallyDerivedProduct>(
    serialize: serializeIsarBiologicallyDerivedProduct,
    deserialize: deserializeIsarBiologicallyDerivedProduct,
    deserializeProperty: deserializeIsarBiologicallyDerivedProductProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarBiologicallyDerivedProduct(
    IsarWriter writer, IsarBiologicallyDerivedProduct object) {
  IsarCore.writeString(
      writer, 1, isarJsonEncode(object.biologicallyDerivedProduct));
  return object.id;
}

@isarProtected
IsarBiologicallyDerivedProduct deserializeIsarBiologicallyDerivedProduct(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _biologicallyDerivedProduct;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _biologicallyDerivedProduct = json;
    } else {
      _biologicallyDerivedProduct = const <String, dynamic>{};
    }
  }
  final object = IsarBiologicallyDerivedProduct(
    id: _id,
    biologicallyDerivedProduct: _biologicallyDerivedProduct,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarBiologicallyDerivedProductProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarBiologicallyDerivedProductQueryFilter on QueryBuilder<
    IsarBiologicallyDerivedProduct,
    IsarBiologicallyDerivedProduct,
    QFilterCondition> {
  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarBiologicallyDerivedProductQueryObject on QueryBuilder<
    IsarBiologicallyDerivedProduct,
    IsarBiologicallyDerivedProduct,
    QFilterCondition> {}

extension IsarBiologicallyDerivedProductQuerySortBy on QueryBuilder<
    IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct, QSortBy> {
  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> sortByBiologicallyDerivedProduct() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> sortByBiologicallyDerivedProductDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarBiologicallyDerivedProductQuerySortThenBy on QueryBuilder<
    IsarBiologicallyDerivedProduct,
    IsarBiologicallyDerivedProduct,
    QSortThenBy> {
  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> thenByBiologicallyDerivedProduct() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterSortBy> thenByBiologicallyDerivedProductDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarBiologicallyDerivedProductQueryWhereDistinct on QueryBuilder<
    IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct, QDistinct> {
  QueryBuilder<IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct,
      QAfterDistinct> distinctByBiologicallyDerivedProduct() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarBiologicallyDerivedProductQueryProperty1 on QueryBuilder<
    IsarBiologicallyDerivedProduct, IsarBiologicallyDerivedProduct, QProperty> {
  QueryBuilder<IsarBiologicallyDerivedProduct, int, QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, Map<String, dynamic>,
      QAfterProperty> biologicallyDerivedProductProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarBiologicallyDerivedProductQueryProperty2<R>
    on QueryBuilder<IsarBiologicallyDerivedProduct, R, QAfterProperty> {
  QueryBuilder<IsarBiologicallyDerivedProduct, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, (R, Map<String, dynamic>),
      QAfterProperty> biologicallyDerivedProductProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarBiologicallyDerivedProductQueryProperty3<R1, R2>
    on QueryBuilder<IsarBiologicallyDerivedProduct, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarBiologicallyDerivedProduct, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBiologicallyDerivedProduct, (R1, R2, Map<String, dynamic>),
      QOperations> biologicallyDerivedProductProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarBodyStructureCollection on Isar {
  IsarCollection<int, IsarBodyStructure> get isarBodyStructures =>
      this.collection();
}

const IsarBodyStructureSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarBodyStructure',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'bodyStructure',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarBodyStructure>(
    serialize: serializeIsarBodyStructure,
    deserialize: deserializeIsarBodyStructure,
    deserializeProperty: deserializeIsarBodyStructureProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarBodyStructure(IsarWriter writer, IsarBodyStructure object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.bodyStructure));
  return object.id;
}

@isarProtected
IsarBodyStructure deserializeIsarBodyStructure(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _bodyStructure;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _bodyStructure = json;
    } else {
      _bodyStructure = const <String, dynamic>{};
    }
  }
  final object = IsarBodyStructure(
    id: _id,
    bodyStructure: _bodyStructure,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarBodyStructureProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarBodyStructureQueryFilter
    on QueryBuilder<IsarBodyStructure, IsarBodyStructure, QFilterCondition> {
  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarBodyStructureQueryObject
    on QueryBuilder<IsarBodyStructure, IsarBodyStructure, QFilterCondition> {}

extension IsarBodyStructureQuerySortBy
    on QueryBuilder<IsarBodyStructure, IsarBodyStructure, QSortBy> {
  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy>
      sortByBodyStructure() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy>
      sortByBodyStructureDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarBodyStructureQuerySortThenBy
    on QueryBuilder<IsarBodyStructure, IsarBodyStructure, QSortThenBy> {
  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy>
      thenByBodyStructure() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterSortBy>
      thenByBodyStructureDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarBodyStructureQueryWhereDistinct
    on QueryBuilder<IsarBodyStructure, IsarBodyStructure, QDistinct> {
  QueryBuilder<IsarBodyStructure, IsarBodyStructure, QAfterDistinct>
      distinctByBodyStructure() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarBodyStructureQueryProperty1
    on QueryBuilder<IsarBodyStructure, IsarBodyStructure, QProperty> {
  QueryBuilder<IsarBodyStructure, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBodyStructure, Map<String, dynamic>, QAfterProperty>
      bodyStructureProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarBodyStructureQueryProperty2<R>
    on QueryBuilder<IsarBodyStructure, R, QAfterProperty> {
  QueryBuilder<IsarBodyStructure, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBodyStructure, (R, Map<String, dynamic>), QAfterProperty>
      bodyStructureProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarBodyStructureQueryProperty3<R1, R2>
    on QueryBuilder<IsarBodyStructure, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarBodyStructure, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBodyStructure, (R1, R2, Map<String, dynamic>), QOperations>
      bodyStructureProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarBundleCollection on Isar {
  IsarCollection<int, IsarBundle> get isarBundles => this.collection();
}

const IsarBundleSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarBundle',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'bundle',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarBundle>(
    serialize: serializeIsarBundle,
    deserialize: deserializeIsarBundle,
    deserializeProperty: deserializeIsarBundleProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarBundle(IsarWriter writer, IsarBundle object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.bundle));
  return object.id;
}

@isarProtected
IsarBundle deserializeIsarBundle(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _bundle;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _bundle = json;
    } else {
      _bundle = const <String, dynamic>{};
    }
  }
  final object = IsarBundle(
    id: _id,
    bundle: _bundle,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarBundleProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarBundleQueryFilter
    on QueryBuilder<IsarBundle, IsarBundle, QFilterCondition> {
  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarBundleQueryObject
    on QueryBuilder<IsarBundle, IsarBundle, QFilterCondition> {}

extension IsarBundleQuerySortBy
    on QueryBuilder<IsarBundle, IsarBundle, QSortBy> {
  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> sortByBundle() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> sortByBundleDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarBundleQuerySortThenBy
    on QueryBuilder<IsarBundle, IsarBundle, QSortThenBy> {
  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> thenByBundle() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarBundle, IsarBundle, QAfterSortBy> thenByBundleDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarBundleQueryWhereDistinct
    on QueryBuilder<IsarBundle, IsarBundle, QDistinct> {
  QueryBuilder<IsarBundle, IsarBundle, QAfterDistinct> distinctByBundle() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarBundleQueryProperty1
    on QueryBuilder<IsarBundle, IsarBundle, QProperty> {
  QueryBuilder<IsarBundle, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBundle, Map<String, dynamic>, QAfterProperty>
      bundleProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarBundleQueryProperty2<R>
    on QueryBuilder<IsarBundle, R, QAfterProperty> {
  QueryBuilder<IsarBundle, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBundle, (R, Map<String, dynamic>), QAfterProperty>
      bundleProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarBundleQueryProperty3<R1, R2>
    on QueryBuilder<IsarBundle, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarBundle, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarBundle, (R1, R2, Map<String, dynamic>), QOperations>
      bundleProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCapabilityStatementCollection on Isar {
  IsarCollection<int, IsarCapabilityStatement> get isarCapabilityStatements =>
      this.collection();
}

const IsarCapabilityStatementSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCapabilityStatement',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'capabilityStatement',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarCapabilityStatement>(
    serialize: serializeIsarCapabilityStatement,
    deserialize: deserializeIsarCapabilityStatement,
    deserializeProperty: deserializeIsarCapabilityStatementProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCapabilityStatement(
    IsarWriter writer, IsarCapabilityStatement object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.capabilityStatement));
  return object.id;
}

@isarProtected
IsarCapabilityStatement deserializeIsarCapabilityStatement(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _capabilityStatement;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _capabilityStatement = json;
    } else {
      _capabilityStatement = const <String, dynamic>{};
    }
  }
  final object = IsarCapabilityStatement(
    id: _id,
    capabilityStatement: _capabilityStatement,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarCapabilityStatementProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarCapabilityStatementQueryFilter on QueryBuilder<
    IsarCapabilityStatement, IsarCapabilityStatement, QFilterCondition> {
  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarCapabilityStatementQueryObject on QueryBuilder<
    IsarCapabilityStatement, IsarCapabilityStatement, QFilterCondition> {}

extension IsarCapabilityStatementQuerySortBy
    on QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QSortBy> {
  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      sortByCapabilityStatement() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      sortByCapabilityStatementDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCapabilityStatementQuerySortThenBy on QueryBuilder<
    IsarCapabilityStatement, IsarCapabilityStatement, QSortThenBy> {
  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      thenByCapabilityStatement() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterSortBy>
      thenByCapabilityStatementDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCapabilityStatementQueryWhereDistinct on QueryBuilder<
    IsarCapabilityStatement, IsarCapabilityStatement, QDistinct> {
  QueryBuilder<IsarCapabilityStatement, IsarCapabilityStatement, QAfterDistinct>
      distinctByCapabilityStatement() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarCapabilityStatementQueryProperty1 on QueryBuilder<
    IsarCapabilityStatement, IsarCapabilityStatement, QProperty> {
  QueryBuilder<IsarCapabilityStatement, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCapabilityStatement, Map<String, dynamic>, QAfterProperty>
      capabilityStatementProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCapabilityStatementQueryProperty2<R>
    on QueryBuilder<IsarCapabilityStatement, R, QAfterProperty> {
  QueryBuilder<IsarCapabilityStatement, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCapabilityStatement, (R, Map<String, dynamic>),
      QAfterProperty> capabilityStatementProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCapabilityStatementQueryProperty3<R1, R2>
    on QueryBuilder<IsarCapabilityStatement, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCapabilityStatement, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCapabilityStatement, (R1, R2, Map<String, dynamic>),
      QOperations> capabilityStatementProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCarePlanCollection on Isar {
  IsarCollection<int, IsarCarePlan> get isarCarePlans => this.collection();
}

const IsarCarePlanSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCarePlan',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'carePlan',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarCarePlan>(
    serialize: serializeIsarCarePlan,
    deserialize: deserializeIsarCarePlan,
    deserializeProperty: deserializeIsarCarePlanProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCarePlan(IsarWriter writer, IsarCarePlan object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.carePlan));
  return object.id;
}

@isarProtected
IsarCarePlan deserializeIsarCarePlan(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _carePlan;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _carePlan = json;
    } else {
      _carePlan = const <String, dynamic>{};
    }
  }
  final object = IsarCarePlan(
    id: _id,
    carePlan: _carePlan,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarCarePlanProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarCarePlanQueryFilter
    on QueryBuilder<IsarCarePlan, IsarCarePlan, QFilterCondition> {
  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarCarePlanQueryObject
    on QueryBuilder<IsarCarePlan, IsarCarePlan, QFilterCondition> {}

extension IsarCarePlanQuerySortBy
    on QueryBuilder<IsarCarePlan, IsarCarePlan, QSortBy> {
  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> sortByCarePlan() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> sortByCarePlanDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCarePlanQuerySortThenBy
    on QueryBuilder<IsarCarePlan, IsarCarePlan, QSortThenBy> {
  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> thenByCarePlan() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterSortBy> thenByCarePlanDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCarePlanQueryWhereDistinct
    on QueryBuilder<IsarCarePlan, IsarCarePlan, QDistinct> {
  QueryBuilder<IsarCarePlan, IsarCarePlan, QAfterDistinct>
      distinctByCarePlan() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarCarePlanQueryProperty1
    on QueryBuilder<IsarCarePlan, IsarCarePlan, QProperty> {
  QueryBuilder<IsarCarePlan, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCarePlan, Map<String, dynamic>, QAfterProperty>
      carePlanProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCarePlanQueryProperty2<R>
    on QueryBuilder<IsarCarePlan, R, QAfterProperty> {
  QueryBuilder<IsarCarePlan, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCarePlan, (R, Map<String, dynamic>), QAfterProperty>
      carePlanProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCarePlanQueryProperty3<R1, R2>
    on QueryBuilder<IsarCarePlan, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCarePlan, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCarePlan, (R1, R2, Map<String, dynamic>), QOperations>
      carePlanProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCareTeamCollection on Isar {
  IsarCollection<int, IsarCareTeam> get isarCareTeams => this.collection();
}

const IsarCareTeamSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCareTeam',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'careTeam',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarCareTeam>(
    serialize: serializeIsarCareTeam,
    deserialize: deserializeIsarCareTeam,
    deserializeProperty: deserializeIsarCareTeamProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCareTeam(IsarWriter writer, IsarCareTeam object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.careTeam));
  return object.id;
}

@isarProtected
IsarCareTeam deserializeIsarCareTeam(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _careTeam;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _careTeam = json;
    } else {
      _careTeam = const <String, dynamic>{};
    }
  }
  final object = IsarCareTeam(
    id: _id,
    careTeam: _careTeam,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarCareTeamProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarCareTeamQueryFilter
    on QueryBuilder<IsarCareTeam, IsarCareTeam, QFilterCondition> {
  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarCareTeamQueryObject
    on QueryBuilder<IsarCareTeam, IsarCareTeam, QFilterCondition> {}

extension IsarCareTeamQuerySortBy
    on QueryBuilder<IsarCareTeam, IsarCareTeam, QSortBy> {
  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> sortByCareTeam() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> sortByCareTeamDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCareTeamQuerySortThenBy
    on QueryBuilder<IsarCareTeam, IsarCareTeam, QSortThenBy> {
  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> thenByCareTeam() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterSortBy> thenByCareTeamDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCareTeamQueryWhereDistinct
    on QueryBuilder<IsarCareTeam, IsarCareTeam, QDistinct> {
  QueryBuilder<IsarCareTeam, IsarCareTeam, QAfterDistinct>
      distinctByCareTeam() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarCareTeamQueryProperty1
    on QueryBuilder<IsarCareTeam, IsarCareTeam, QProperty> {
  QueryBuilder<IsarCareTeam, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCareTeam, Map<String, dynamic>, QAfterProperty>
      careTeamProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCareTeamQueryProperty2<R>
    on QueryBuilder<IsarCareTeam, R, QAfterProperty> {
  QueryBuilder<IsarCareTeam, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCareTeam, (R, Map<String, dynamic>), QAfterProperty>
      careTeamProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCareTeamQueryProperty3<R1, R2>
    on QueryBuilder<IsarCareTeam, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCareTeam, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCareTeam, (R1, R2, Map<String, dynamic>), QOperations>
      careTeamProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCatalogEntryCollection on Isar {
  IsarCollection<int, IsarCatalogEntry> get isarCatalogEntrys =>
      this.collection();
}

const IsarCatalogEntrySchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCatalogEntry',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'catalogEntry',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarCatalogEntry>(
    serialize: serializeIsarCatalogEntry,
    deserialize: deserializeIsarCatalogEntry,
    deserializeProperty: deserializeIsarCatalogEntryProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCatalogEntry(IsarWriter writer, IsarCatalogEntry object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.catalogEntry));
  return object.id;
}

@isarProtected
IsarCatalogEntry deserializeIsarCatalogEntry(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _catalogEntry;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _catalogEntry = json;
    } else {
      _catalogEntry = const <String, dynamic>{};
    }
  }
  final object = IsarCatalogEntry(
    id: _id,
    catalogEntry: _catalogEntry,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarCatalogEntryProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarCatalogEntryQueryFilter
    on QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QFilterCondition> {
  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarCatalogEntryQueryObject
    on QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QFilterCondition> {}

extension IsarCatalogEntryQuerySortBy
    on QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QSortBy> {
  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy>
      sortByCatalogEntry() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy>
      sortByCatalogEntryDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCatalogEntryQuerySortThenBy
    on QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QSortThenBy> {
  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy>
      thenByCatalogEntry() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterSortBy>
      thenByCatalogEntryDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCatalogEntryQueryWhereDistinct
    on QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QDistinct> {
  QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QAfterDistinct>
      distinctByCatalogEntry() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarCatalogEntryQueryProperty1
    on QueryBuilder<IsarCatalogEntry, IsarCatalogEntry, QProperty> {
  QueryBuilder<IsarCatalogEntry, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCatalogEntry, Map<String, dynamic>, QAfterProperty>
      catalogEntryProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCatalogEntryQueryProperty2<R>
    on QueryBuilder<IsarCatalogEntry, R, QAfterProperty> {
  QueryBuilder<IsarCatalogEntry, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCatalogEntry, (R, Map<String, dynamic>), QAfterProperty>
      catalogEntryProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCatalogEntryQueryProperty3<R1, R2>
    on QueryBuilder<IsarCatalogEntry, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCatalogEntry, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCatalogEntry, (R1, R2, Map<String, dynamic>), QOperations>
      catalogEntryProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarChargeItemCollection on Isar {
  IsarCollection<int, IsarChargeItem> get isarChargeItems => this.collection();
}

const IsarChargeItemSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarChargeItem',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'chargeItem',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarChargeItem>(
    serialize: serializeIsarChargeItem,
    deserialize: deserializeIsarChargeItem,
    deserializeProperty: deserializeIsarChargeItemProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarChargeItem(IsarWriter writer, IsarChargeItem object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.chargeItem));
  return object.id;
}

@isarProtected
IsarChargeItem deserializeIsarChargeItem(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _chargeItem;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _chargeItem = json;
    } else {
      _chargeItem = const <String, dynamic>{};
    }
  }
  final object = IsarChargeItem(
    id: _id,
    chargeItem: _chargeItem,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarChargeItemProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarChargeItemQueryFilter
    on QueryBuilder<IsarChargeItem, IsarChargeItem, QFilterCondition> {
  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarChargeItemQueryObject
    on QueryBuilder<IsarChargeItem, IsarChargeItem, QFilterCondition> {}

extension IsarChargeItemQuerySortBy
    on QueryBuilder<IsarChargeItem, IsarChargeItem, QSortBy> {
  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy>
      sortByChargeItem() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy>
      sortByChargeItemDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarChargeItemQuerySortThenBy
    on QueryBuilder<IsarChargeItem, IsarChargeItem, QSortThenBy> {
  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy>
      thenByChargeItem() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterSortBy>
      thenByChargeItemDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarChargeItemQueryWhereDistinct
    on QueryBuilder<IsarChargeItem, IsarChargeItem, QDistinct> {
  QueryBuilder<IsarChargeItem, IsarChargeItem, QAfterDistinct>
      distinctByChargeItem() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarChargeItemQueryProperty1
    on QueryBuilder<IsarChargeItem, IsarChargeItem, QProperty> {
  QueryBuilder<IsarChargeItem, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarChargeItem, Map<String, dynamic>, QAfterProperty>
      chargeItemProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarChargeItemQueryProperty2<R>
    on QueryBuilder<IsarChargeItem, R, QAfterProperty> {
  QueryBuilder<IsarChargeItem, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarChargeItem, (R, Map<String, dynamic>), QAfterProperty>
      chargeItemProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarChargeItemQueryProperty3<R1, R2>
    on QueryBuilder<IsarChargeItem, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarChargeItem, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarChargeItem, (R1, R2, Map<String, dynamic>), QOperations>
      chargeItemProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarChargeItemDefinitionCollection on Isar {
  IsarCollection<int, IsarChargeItemDefinition> get isarChargeItemDefinitions =>
      this.collection();
}

const IsarChargeItemDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarChargeItemDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'chargeItemDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarChargeItemDefinition>(
    serialize: serializeIsarChargeItemDefinition,
    deserialize: deserializeIsarChargeItemDefinition,
    deserializeProperty: deserializeIsarChargeItemDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarChargeItemDefinition(
    IsarWriter writer, IsarChargeItemDefinition object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.chargeItemDefinition));
  return object.id;
}

@isarProtected
IsarChargeItemDefinition deserializeIsarChargeItemDefinition(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _chargeItemDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _chargeItemDefinition = json;
    } else {
      _chargeItemDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarChargeItemDefinition(
    id: _id,
    chargeItemDefinition: _chargeItemDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarChargeItemDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarChargeItemDefinitionQueryFilter on QueryBuilder<
    IsarChargeItemDefinition, IsarChargeItemDefinition, QFilterCondition> {
  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarChargeItemDefinitionQueryObject on QueryBuilder<
    IsarChargeItemDefinition, IsarChargeItemDefinition, QFilterCondition> {}

extension IsarChargeItemDefinitionQuerySortBy on QueryBuilder<
    IsarChargeItemDefinition, IsarChargeItemDefinition, QSortBy> {
  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      sortByChargeItemDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      sortByChargeItemDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarChargeItemDefinitionQuerySortThenBy on QueryBuilder<
    IsarChargeItemDefinition, IsarChargeItemDefinition, QSortThenBy> {
  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      thenByChargeItemDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition, QAfterSortBy>
      thenByChargeItemDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarChargeItemDefinitionQueryWhereDistinct on QueryBuilder<
    IsarChargeItemDefinition, IsarChargeItemDefinition, QDistinct> {
  QueryBuilder<IsarChargeItemDefinition, IsarChargeItemDefinition,
      QAfterDistinct> distinctByChargeItemDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarChargeItemDefinitionQueryProperty1 on QueryBuilder<
    IsarChargeItemDefinition, IsarChargeItemDefinition, QProperty> {
  QueryBuilder<IsarChargeItemDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, Map<String, dynamic>, QAfterProperty>
      chargeItemDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarChargeItemDefinitionQueryProperty2<R>
    on QueryBuilder<IsarChargeItemDefinition, R, QAfterProperty> {
  QueryBuilder<IsarChargeItemDefinition, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, (R, Map<String, dynamic>),
      QAfterProperty> chargeItemDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarChargeItemDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarChargeItemDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarChargeItemDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarChargeItemDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> chargeItemDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCitationCollection on Isar {
  IsarCollection<int, IsarCitation> get isarCitations => this.collection();
}

const IsarCitationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCitation',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'citation',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarCitation>(
    serialize: serializeIsarCitation,
    deserialize: deserializeIsarCitation,
    deserializeProperty: deserializeIsarCitationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCitation(IsarWriter writer, IsarCitation object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.citation));
  return object.id;
}

@isarProtected
IsarCitation deserializeIsarCitation(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _citation;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _citation = json;
    } else {
      _citation = const <String, dynamic>{};
    }
  }
  final object = IsarCitation(
    id: _id,
    citation: _citation,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarCitationProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarCitationQueryFilter
    on QueryBuilder<IsarCitation, IsarCitation, QFilterCondition> {
  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarCitationQueryObject
    on QueryBuilder<IsarCitation, IsarCitation, QFilterCondition> {}

extension IsarCitationQuerySortBy
    on QueryBuilder<IsarCitation, IsarCitation, QSortBy> {
  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> sortByCitation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> sortByCitationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCitationQuerySortThenBy
    on QueryBuilder<IsarCitation, IsarCitation, QSortThenBy> {
  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> thenByCitation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCitation, IsarCitation, QAfterSortBy> thenByCitationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCitationQueryWhereDistinct
    on QueryBuilder<IsarCitation, IsarCitation, QDistinct> {
  QueryBuilder<IsarCitation, IsarCitation, QAfterDistinct>
      distinctByCitation() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarCitationQueryProperty1
    on QueryBuilder<IsarCitation, IsarCitation, QProperty> {
  QueryBuilder<IsarCitation, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCitation, Map<String, dynamic>, QAfterProperty>
      citationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCitationQueryProperty2<R>
    on QueryBuilder<IsarCitation, R, QAfterProperty> {
  QueryBuilder<IsarCitation, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCitation, (R, Map<String, dynamic>), QAfterProperty>
      citationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCitationQueryProperty3<R1, R2>
    on QueryBuilder<IsarCitation, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCitation, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCitation, (R1, R2, Map<String, dynamic>), QOperations>
      citationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarClaimCollection on Isar {
  IsarCollection<int, IsarClaim> get isarClaims => this.collection();
}

const IsarClaimSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarClaim',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'claim',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarClaim>(
    serialize: serializeIsarClaim,
    deserialize: deserializeIsarClaim,
    deserializeProperty: deserializeIsarClaimProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarClaim(IsarWriter writer, IsarClaim object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.claim));
  return object.id;
}

@isarProtected
IsarClaim deserializeIsarClaim(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _claim;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _claim = json;
    } else {
      _claim = const <String, dynamic>{};
    }
  }
  final object = IsarClaim(
    id: _id,
    claim: _claim,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarClaimProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarClaimQueryFilter
    on QueryBuilder<IsarClaim, IsarClaim, QFilterCondition> {
  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarClaimQueryObject
    on QueryBuilder<IsarClaim, IsarClaim, QFilterCondition> {}

extension IsarClaimQuerySortBy on QueryBuilder<IsarClaim, IsarClaim, QSortBy> {
  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> sortByClaim() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> sortByClaimDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarClaimQuerySortThenBy
    on QueryBuilder<IsarClaim, IsarClaim, QSortThenBy> {
  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> thenByClaim() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarClaim, IsarClaim, QAfterSortBy> thenByClaimDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarClaimQueryWhereDistinct
    on QueryBuilder<IsarClaim, IsarClaim, QDistinct> {
  QueryBuilder<IsarClaim, IsarClaim, QAfterDistinct> distinctByClaim() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarClaimQueryProperty1
    on QueryBuilder<IsarClaim, IsarClaim, QProperty> {
  QueryBuilder<IsarClaim, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClaim, Map<String, dynamic>, QAfterProperty>
      claimProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarClaimQueryProperty2<R>
    on QueryBuilder<IsarClaim, R, QAfterProperty> {
  QueryBuilder<IsarClaim, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClaim, (R, Map<String, dynamic>), QAfterProperty>
      claimProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarClaimQueryProperty3<R1, R2>
    on QueryBuilder<IsarClaim, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarClaim, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClaim, (R1, R2, Map<String, dynamic>), QOperations>
      claimProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarClaimResponseCollection on Isar {
  IsarCollection<int, IsarClaimResponse> get isarClaimResponses =>
      this.collection();
}

const IsarClaimResponseSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarClaimResponse',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'claimResponse',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarClaimResponse>(
    serialize: serializeIsarClaimResponse,
    deserialize: deserializeIsarClaimResponse,
    deserializeProperty: deserializeIsarClaimResponseProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarClaimResponse(IsarWriter writer, IsarClaimResponse object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.claimResponse));
  return object.id;
}

@isarProtected
IsarClaimResponse deserializeIsarClaimResponse(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _claimResponse;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _claimResponse = json;
    } else {
      _claimResponse = const <String, dynamic>{};
    }
  }
  final object = IsarClaimResponse(
    id: _id,
    claimResponse: _claimResponse,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarClaimResponseProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarClaimResponseQueryFilter
    on QueryBuilder<IsarClaimResponse, IsarClaimResponse, QFilterCondition> {
  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarClaimResponseQueryObject
    on QueryBuilder<IsarClaimResponse, IsarClaimResponse, QFilterCondition> {}

extension IsarClaimResponseQuerySortBy
    on QueryBuilder<IsarClaimResponse, IsarClaimResponse, QSortBy> {
  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy>
      sortByClaimResponse() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy>
      sortByClaimResponseDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarClaimResponseQuerySortThenBy
    on QueryBuilder<IsarClaimResponse, IsarClaimResponse, QSortThenBy> {
  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy>
      thenByClaimResponse() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterSortBy>
      thenByClaimResponseDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarClaimResponseQueryWhereDistinct
    on QueryBuilder<IsarClaimResponse, IsarClaimResponse, QDistinct> {
  QueryBuilder<IsarClaimResponse, IsarClaimResponse, QAfterDistinct>
      distinctByClaimResponse() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarClaimResponseQueryProperty1
    on QueryBuilder<IsarClaimResponse, IsarClaimResponse, QProperty> {
  QueryBuilder<IsarClaimResponse, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClaimResponse, Map<String, dynamic>, QAfterProperty>
      claimResponseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarClaimResponseQueryProperty2<R>
    on QueryBuilder<IsarClaimResponse, R, QAfterProperty> {
  QueryBuilder<IsarClaimResponse, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClaimResponse, (R, Map<String, dynamic>), QAfterProperty>
      claimResponseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarClaimResponseQueryProperty3<R1, R2>
    on QueryBuilder<IsarClaimResponse, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarClaimResponse, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClaimResponse, (R1, R2, Map<String, dynamic>), QOperations>
      claimResponseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarClinicalImpressionCollection on Isar {
  IsarCollection<int, IsarClinicalImpression> get isarClinicalImpressions =>
      this.collection();
}

const IsarClinicalImpressionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarClinicalImpression',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'clinicalImpression',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarClinicalImpression>(
    serialize: serializeIsarClinicalImpression,
    deserialize: deserializeIsarClinicalImpression,
    deserializeProperty: deserializeIsarClinicalImpressionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarClinicalImpression(
    IsarWriter writer, IsarClinicalImpression object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.clinicalImpression));
  return object.id;
}

@isarProtected
IsarClinicalImpression deserializeIsarClinicalImpression(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _clinicalImpression;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _clinicalImpression = json;
    } else {
      _clinicalImpression = const <String, dynamic>{};
    }
  }
  final object = IsarClinicalImpression(
    id: _id,
    clinicalImpression: _clinicalImpression,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarClinicalImpressionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarClinicalImpressionQueryFilter on QueryBuilder<
    IsarClinicalImpression, IsarClinicalImpression, QFilterCondition> {
  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarClinicalImpressionQueryObject on QueryBuilder<
    IsarClinicalImpression, IsarClinicalImpression, QFilterCondition> {}

extension IsarClinicalImpressionQuerySortBy
    on QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QSortBy> {
  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      sortByClinicalImpression() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      sortByClinicalImpressionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarClinicalImpressionQuerySortThenBy on QueryBuilder<
    IsarClinicalImpression, IsarClinicalImpression, QSortThenBy> {
  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      thenByClinicalImpression() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterSortBy>
      thenByClinicalImpressionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarClinicalImpressionQueryWhereDistinct
    on QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QDistinct> {
  QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QAfterDistinct>
      distinctByClinicalImpression() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarClinicalImpressionQueryProperty1
    on QueryBuilder<IsarClinicalImpression, IsarClinicalImpression, QProperty> {
  QueryBuilder<IsarClinicalImpression, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClinicalImpression, Map<String, dynamic>, QAfterProperty>
      clinicalImpressionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarClinicalImpressionQueryProperty2<R>
    on QueryBuilder<IsarClinicalImpression, R, QAfterProperty> {
  QueryBuilder<IsarClinicalImpression, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClinicalImpression, (R, Map<String, dynamic>),
      QAfterProperty> clinicalImpressionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarClinicalImpressionQueryProperty3<R1, R2>
    on QueryBuilder<IsarClinicalImpression, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarClinicalImpression, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClinicalImpression, (R1, R2, Map<String, dynamic>),
      QOperations> clinicalImpressionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarClinicalUseDefinitionCollection on Isar {
  IsarCollection<int, IsarClinicalUseDefinition>
      get isarClinicalUseDefinitions => this.collection();
}

const IsarClinicalUseDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarClinicalUseDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'clinicalUseDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarClinicalUseDefinition>(
    serialize: serializeIsarClinicalUseDefinition,
    deserialize: deserializeIsarClinicalUseDefinition,
    deserializeProperty: deserializeIsarClinicalUseDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarClinicalUseDefinition(
    IsarWriter writer, IsarClinicalUseDefinition object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.clinicalUseDefinition));
  return object.id;
}

@isarProtected
IsarClinicalUseDefinition deserializeIsarClinicalUseDefinition(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _clinicalUseDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _clinicalUseDefinition = json;
    } else {
      _clinicalUseDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarClinicalUseDefinition(
    id: _id,
    clinicalUseDefinition: _clinicalUseDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarClinicalUseDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarClinicalUseDefinitionQueryFilter on QueryBuilder<
    IsarClinicalUseDefinition, IsarClinicalUseDefinition, QFilterCondition> {
  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarClinicalUseDefinitionQueryObject on QueryBuilder<
    IsarClinicalUseDefinition, IsarClinicalUseDefinition, QFilterCondition> {}

extension IsarClinicalUseDefinitionQuerySortBy on QueryBuilder<
    IsarClinicalUseDefinition, IsarClinicalUseDefinition, QSortBy> {
  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> sortByClinicalUseDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> sortByClinicalUseDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarClinicalUseDefinitionQuerySortThenBy on QueryBuilder<
    IsarClinicalUseDefinition, IsarClinicalUseDefinition, QSortThenBy> {
  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> thenByClinicalUseDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterSortBy> thenByClinicalUseDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarClinicalUseDefinitionQueryWhereDistinct on QueryBuilder<
    IsarClinicalUseDefinition, IsarClinicalUseDefinition, QDistinct> {
  QueryBuilder<IsarClinicalUseDefinition, IsarClinicalUseDefinition,
      QAfterDistinct> distinctByClinicalUseDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarClinicalUseDefinitionQueryProperty1 on QueryBuilder<
    IsarClinicalUseDefinition, IsarClinicalUseDefinition, QProperty> {
  QueryBuilder<IsarClinicalUseDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, Map<String, dynamic>, QAfterProperty>
      clinicalUseDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarClinicalUseDefinitionQueryProperty2<R>
    on QueryBuilder<IsarClinicalUseDefinition, R, QAfterProperty> {
  QueryBuilder<IsarClinicalUseDefinition, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, (R, Map<String, dynamic>),
      QAfterProperty> clinicalUseDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarClinicalUseDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarClinicalUseDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarClinicalUseDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarClinicalUseDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> clinicalUseDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCodeSystemCollection on Isar {
  IsarCollection<int, IsarCodeSystem> get isarCodeSystems => this.collection();
}

const IsarCodeSystemSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCodeSystem',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'codeSystem',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarCodeSystem>(
    serialize: serializeIsarCodeSystem,
    deserialize: deserializeIsarCodeSystem,
    deserializeProperty: deserializeIsarCodeSystemProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCodeSystem(IsarWriter writer, IsarCodeSystem object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.codeSystem));
  return object.id;
}

@isarProtected
IsarCodeSystem deserializeIsarCodeSystem(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _codeSystem;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _codeSystem = json;
    } else {
      _codeSystem = const <String, dynamic>{};
    }
  }
  final object = IsarCodeSystem(
    id: _id,
    codeSystem: _codeSystem,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarCodeSystemProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarCodeSystemQueryFilter
    on QueryBuilder<IsarCodeSystem, IsarCodeSystem, QFilterCondition> {
  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarCodeSystemQueryObject
    on QueryBuilder<IsarCodeSystem, IsarCodeSystem, QFilterCondition> {}

extension IsarCodeSystemQuerySortBy
    on QueryBuilder<IsarCodeSystem, IsarCodeSystem, QSortBy> {
  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy>
      sortByCodeSystem() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy>
      sortByCodeSystemDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCodeSystemQuerySortThenBy
    on QueryBuilder<IsarCodeSystem, IsarCodeSystem, QSortThenBy> {
  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy>
      thenByCodeSystem() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterSortBy>
      thenByCodeSystemDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCodeSystemQueryWhereDistinct
    on QueryBuilder<IsarCodeSystem, IsarCodeSystem, QDistinct> {
  QueryBuilder<IsarCodeSystem, IsarCodeSystem, QAfterDistinct>
      distinctByCodeSystem() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarCodeSystemQueryProperty1
    on QueryBuilder<IsarCodeSystem, IsarCodeSystem, QProperty> {
  QueryBuilder<IsarCodeSystem, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCodeSystem, Map<String, dynamic>, QAfterProperty>
      codeSystemProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCodeSystemQueryProperty2<R>
    on QueryBuilder<IsarCodeSystem, R, QAfterProperty> {
  QueryBuilder<IsarCodeSystem, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCodeSystem, (R, Map<String, dynamic>), QAfterProperty>
      codeSystemProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCodeSystemQueryProperty3<R1, R2>
    on QueryBuilder<IsarCodeSystem, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCodeSystem, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCodeSystem, (R1, R2, Map<String, dynamic>), QOperations>
      codeSystemProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCommunicationCollection on Isar {
  IsarCollection<int, IsarCommunication> get isarCommunications =>
      this.collection();
}

const IsarCommunicationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCommunication',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'communication',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarCommunication>(
    serialize: serializeIsarCommunication,
    deserialize: deserializeIsarCommunication,
    deserializeProperty: deserializeIsarCommunicationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCommunication(IsarWriter writer, IsarCommunication object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.communication));
  return object.id;
}

@isarProtected
IsarCommunication deserializeIsarCommunication(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _communication;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _communication = json;
    } else {
      _communication = const <String, dynamic>{};
    }
  }
  final object = IsarCommunication(
    id: _id,
    communication: _communication,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarCommunicationProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarCommunicationQueryFilter
    on QueryBuilder<IsarCommunication, IsarCommunication, QFilterCondition> {
  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarCommunicationQueryObject
    on QueryBuilder<IsarCommunication, IsarCommunication, QFilterCondition> {}

extension IsarCommunicationQuerySortBy
    on QueryBuilder<IsarCommunication, IsarCommunication, QSortBy> {
  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy>
      sortByCommunication() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy>
      sortByCommunicationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCommunicationQuerySortThenBy
    on QueryBuilder<IsarCommunication, IsarCommunication, QSortThenBy> {
  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy>
      thenByCommunication() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCommunication, IsarCommunication, QAfterSortBy>
      thenByCommunicationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCommunicationQueryWhereDistinct
    on QueryBuilder<IsarCommunication, IsarCommunication, QDistinct> {
  QueryBuilder<IsarCommunication, IsarCommunication, QAfterDistinct>
      distinctByCommunication() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarCommunicationQueryProperty1
    on QueryBuilder<IsarCommunication, IsarCommunication, QProperty> {
  QueryBuilder<IsarCommunication, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCommunication, Map<String, dynamic>, QAfterProperty>
      communicationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCommunicationQueryProperty2<R>
    on QueryBuilder<IsarCommunication, R, QAfterProperty> {
  QueryBuilder<IsarCommunication, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCommunication, (R, Map<String, dynamic>), QAfterProperty>
      communicationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCommunicationQueryProperty3<R1, R2>
    on QueryBuilder<IsarCommunication, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCommunication, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCommunication, (R1, R2, Map<String, dynamic>), QOperations>
      communicationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCommunicationRequestCollection on Isar {
  IsarCollection<int, IsarCommunicationRequest> get isarCommunicationRequests =>
      this.collection();
}

const IsarCommunicationRequestSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCommunicationRequest',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'communicationRequest',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarCommunicationRequest>(
    serialize: serializeIsarCommunicationRequest,
    deserialize: deserializeIsarCommunicationRequest,
    deserializeProperty: deserializeIsarCommunicationRequestProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCommunicationRequest(
    IsarWriter writer, IsarCommunicationRequest object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.communicationRequest));
  return object.id;
}

@isarProtected
IsarCommunicationRequest deserializeIsarCommunicationRequest(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _communicationRequest;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _communicationRequest = json;
    } else {
      _communicationRequest = const <String, dynamic>{};
    }
  }
  final object = IsarCommunicationRequest(
    id: _id,
    communicationRequest: _communicationRequest,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarCommunicationRequestProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarCommunicationRequestQueryFilter on QueryBuilder<
    IsarCommunicationRequest, IsarCommunicationRequest, QFilterCondition> {
  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarCommunicationRequestQueryObject on QueryBuilder<
    IsarCommunicationRequest, IsarCommunicationRequest, QFilterCondition> {}

extension IsarCommunicationRequestQuerySortBy on QueryBuilder<
    IsarCommunicationRequest, IsarCommunicationRequest, QSortBy> {
  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      sortByCommunicationRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      sortByCommunicationRequestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCommunicationRequestQuerySortThenBy on QueryBuilder<
    IsarCommunicationRequest, IsarCommunicationRequest, QSortThenBy> {
  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      thenByCommunicationRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest, QAfterSortBy>
      thenByCommunicationRequestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCommunicationRequestQueryWhereDistinct on QueryBuilder<
    IsarCommunicationRequest, IsarCommunicationRequest, QDistinct> {
  QueryBuilder<IsarCommunicationRequest, IsarCommunicationRequest,
      QAfterDistinct> distinctByCommunicationRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarCommunicationRequestQueryProperty1 on QueryBuilder<
    IsarCommunicationRequest, IsarCommunicationRequest, QProperty> {
  QueryBuilder<IsarCommunicationRequest, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCommunicationRequest, Map<String, dynamic>, QAfterProperty>
      communicationRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCommunicationRequestQueryProperty2<R>
    on QueryBuilder<IsarCommunicationRequest, R, QAfterProperty> {
  QueryBuilder<IsarCommunicationRequest, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCommunicationRequest, (R, Map<String, dynamic>),
      QAfterProperty> communicationRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCommunicationRequestQueryProperty3<R1, R2>
    on QueryBuilder<IsarCommunicationRequest, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCommunicationRequest, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCommunicationRequest, (R1, R2, Map<String, dynamic>),
      QOperations> communicationRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCompartmentDefinitionCollection on Isar {
  IsarCollection<int, IsarCompartmentDefinition>
      get isarCompartmentDefinitions => this.collection();
}

const IsarCompartmentDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCompartmentDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'compartmentDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarCompartmentDefinition>(
    serialize: serializeIsarCompartmentDefinition,
    deserialize: deserializeIsarCompartmentDefinition,
    deserializeProperty: deserializeIsarCompartmentDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCompartmentDefinition(
    IsarWriter writer, IsarCompartmentDefinition object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.compartmentDefinition));
  return object.id;
}

@isarProtected
IsarCompartmentDefinition deserializeIsarCompartmentDefinition(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _compartmentDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _compartmentDefinition = json;
    } else {
      _compartmentDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarCompartmentDefinition(
    id: _id,
    compartmentDefinition: _compartmentDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarCompartmentDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarCompartmentDefinitionQueryFilter on QueryBuilder<
    IsarCompartmentDefinition, IsarCompartmentDefinition, QFilterCondition> {
  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarCompartmentDefinitionQueryObject on QueryBuilder<
    IsarCompartmentDefinition, IsarCompartmentDefinition, QFilterCondition> {}

extension IsarCompartmentDefinitionQuerySortBy on QueryBuilder<
    IsarCompartmentDefinition, IsarCompartmentDefinition, QSortBy> {
  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> sortByCompartmentDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> sortByCompartmentDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCompartmentDefinitionQuerySortThenBy on QueryBuilder<
    IsarCompartmentDefinition, IsarCompartmentDefinition, QSortThenBy> {
  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> thenByCompartmentDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterSortBy> thenByCompartmentDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCompartmentDefinitionQueryWhereDistinct on QueryBuilder<
    IsarCompartmentDefinition, IsarCompartmentDefinition, QDistinct> {
  QueryBuilder<IsarCompartmentDefinition, IsarCompartmentDefinition,
      QAfterDistinct> distinctByCompartmentDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarCompartmentDefinitionQueryProperty1 on QueryBuilder<
    IsarCompartmentDefinition, IsarCompartmentDefinition, QProperty> {
  QueryBuilder<IsarCompartmentDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, Map<String, dynamic>, QAfterProperty>
      compartmentDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCompartmentDefinitionQueryProperty2<R>
    on QueryBuilder<IsarCompartmentDefinition, R, QAfterProperty> {
  QueryBuilder<IsarCompartmentDefinition, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, (R, Map<String, dynamic>),
      QAfterProperty> compartmentDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCompartmentDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarCompartmentDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCompartmentDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCompartmentDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> compartmentDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCompositionCollection on Isar {
  IsarCollection<int, IsarComposition> get isarCompositions =>
      this.collection();
}

const IsarCompositionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarComposition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'composition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarComposition>(
    serialize: serializeIsarComposition,
    deserialize: deserializeIsarComposition,
    deserializeProperty: deserializeIsarCompositionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarComposition(IsarWriter writer, IsarComposition object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.composition));
  return object.id;
}

@isarProtected
IsarComposition deserializeIsarComposition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _composition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _composition = json;
    } else {
      _composition = const <String, dynamic>{};
    }
  }
  final object = IsarComposition(
    id: _id,
    composition: _composition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarCompositionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarCompositionQueryFilter
    on QueryBuilder<IsarComposition, IsarComposition, QFilterCondition> {
  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarCompositionQueryObject
    on QueryBuilder<IsarComposition, IsarComposition, QFilterCondition> {}

extension IsarCompositionQuerySortBy
    on QueryBuilder<IsarComposition, IsarComposition, QSortBy> {
  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy>
      sortByComposition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy>
      sortByCompositionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCompositionQuerySortThenBy
    on QueryBuilder<IsarComposition, IsarComposition, QSortThenBy> {
  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy>
      thenByComposition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarComposition, IsarComposition, QAfterSortBy>
      thenByCompositionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCompositionQueryWhereDistinct
    on QueryBuilder<IsarComposition, IsarComposition, QDistinct> {
  QueryBuilder<IsarComposition, IsarComposition, QAfterDistinct>
      distinctByComposition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarCompositionQueryProperty1
    on QueryBuilder<IsarComposition, IsarComposition, QProperty> {
  QueryBuilder<IsarComposition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarComposition, Map<String, dynamic>, QAfterProperty>
      compositionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCompositionQueryProperty2<R>
    on QueryBuilder<IsarComposition, R, QAfterProperty> {
  QueryBuilder<IsarComposition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarComposition, (R, Map<String, dynamic>), QAfterProperty>
      compositionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCompositionQueryProperty3<R1, R2>
    on QueryBuilder<IsarComposition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarComposition, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarComposition, (R1, R2, Map<String, dynamic>), QOperations>
      compositionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarConceptMapCollection on Isar {
  IsarCollection<int, IsarConceptMap> get isarConceptMaps => this.collection();
}

const IsarConceptMapSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarConceptMap',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'conceptMap',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarConceptMap>(
    serialize: serializeIsarConceptMap,
    deserialize: deserializeIsarConceptMap,
    deserializeProperty: deserializeIsarConceptMapProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarConceptMap(IsarWriter writer, IsarConceptMap object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.conceptMap));
  return object.id;
}

@isarProtected
IsarConceptMap deserializeIsarConceptMap(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _conceptMap;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _conceptMap = json;
    } else {
      _conceptMap = const <String, dynamic>{};
    }
  }
  final object = IsarConceptMap(
    id: _id,
    conceptMap: _conceptMap,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarConceptMapProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarConceptMapQueryFilter
    on QueryBuilder<IsarConceptMap, IsarConceptMap, QFilterCondition> {
  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarConceptMapQueryObject
    on QueryBuilder<IsarConceptMap, IsarConceptMap, QFilterCondition> {}

extension IsarConceptMapQuerySortBy
    on QueryBuilder<IsarConceptMap, IsarConceptMap, QSortBy> {
  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy>
      sortByConceptMap() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy>
      sortByConceptMapDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarConceptMapQuerySortThenBy
    on QueryBuilder<IsarConceptMap, IsarConceptMap, QSortThenBy> {
  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy>
      thenByConceptMap() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterSortBy>
      thenByConceptMapDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarConceptMapQueryWhereDistinct
    on QueryBuilder<IsarConceptMap, IsarConceptMap, QDistinct> {
  QueryBuilder<IsarConceptMap, IsarConceptMap, QAfterDistinct>
      distinctByConceptMap() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarConceptMapQueryProperty1
    on QueryBuilder<IsarConceptMap, IsarConceptMap, QProperty> {
  QueryBuilder<IsarConceptMap, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarConceptMap, Map<String, dynamic>, QAfterProperty>
      conceptMapProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarConceptMapQueryProperty2<R>
    on QueryBuilder<IsarConceptMap, R, QAfterProperty> {
  QueryBuilder<IsarConceptMap, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarConceptMap, (R, Map<String, dynamic>), QAfterProperty>
      conceptMapProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarConceptMapQueryProperty3<R1, R2>
    on QueryBuilder<IsarConceptMap, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarConceptMap, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarConceptMap, (R1, R2, Map<String, dynamic>), QOperations>
      conceptMapProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarConditionCollection on Isar {
  IsarCollection<int, IsarCondition> get isarConditions => this.collection();
}

const IsarConditionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCondition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'condition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarCondition>(
    serialize: serializeIsarCondition,
    deserialize: deserializeIsarCondition,
    deserializeProperty: deserializeIsarConditionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCondition(IsarWriter writer, IsarCondition object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.condition));
  return object.id;
}

@isarProtected
IsarCondition deserializeIsarCondition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _condition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _condition = json;
    } else {
      _condition = const <String, dynamic>{};
    }
  }
  final object = IsarCondition(
    id: _id,
    condition: _condition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarConditionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarConditionQueryFilter
    on QueryBuilder<IsarCondition, IsarCondition, QFilterCondition> {
  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarConditionQueryObject
    on QueryBuilder<IsarCondition, IsarCondition, QFilterCondition> {}

extension IsarConditionQuerySortBy
    on QueryBuilder<IsarCondition, IsarCondition, QSortBy> {
  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy> sortByCondition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy>
      sortByConditionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarConditionQuerySortThenBy
    on QueryBuilder<IsarCondition, IsarCondition, QSortThenBy> {
  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy> thenByCondition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCondition, IsarCondition, QAfterSortBy>
      thenByConditionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarConditionQueryWhereDistinct
    on QueryBuilder<IsarCondition, IsarCondition, QDistinct> {
  QueryBuilder<IsarCondition, IsarCondition, QAfterDistinct>
      distinctByCondition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarConditionQueryProperty1
    on QueryBuilder<IsarCondition, IsarCondition, QProperty> {
  QueryBuilder<IsarCondition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCondition, Map<String, dynamic>, QAfterProperty>
      conditionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarConditionQueryProperty2<R>
    on QueryBuilder<IsarCondition, R, QAfterProperty> {
  QueryBuilder<IsarCondition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCondition, (R, Map<String, dynamic>), QAfterProperty>
      conditionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarConditionQueryProperty3<R1, R2>
    on QueryBuilder<IsarCondition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCondition, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCondition, (R1, R2, Map<String, dynamic>), QOperations>
      conditionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarConsentCollection on Isar {
  IsarCollection<int, IsarConsent> get isarConsents => this.collection();
}

const IsarConsentSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarConsent',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'consent',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarConsent>(
    serialize: serializeIsarConsent,
    deserialize: deserializeIsarConsent,
    deserializeProperty: deserializeIsarConsentProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarConsent(IsarWriter writer, IsarConsent object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.consent));
  return object.id;
}

@isarProtected
IsarConsent deserializeIsarConsent(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _consent;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _consent = json;
    } else {
      _consent = const <String, dynamic>{};
    }
  }
  final object = IsarConsent(
    id: _id,
    consent: _consent,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarConsentProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarConsentQueryFilter
    on QueryBuilder<IsarConsent, IsarConsent, QFilterCondition> {
  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarConsentQueryObject
    on QueryBuilder<IsarConsent, IsarConsent, QFilterCondition> {}

extension IsarConsentQuerySortBy
    on QueryBuilder<IsarConsent, IsarConsent, QSortBy> {
  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> sortByConsent() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> sortByConsentDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarConsentQuerySortThenBy
    on QueryBuilder<IsarConsent, IsarConsent, QSortThenBy> {
  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> thenByConsent() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarConsent, IsarConsent, QAfterSortBy> thenByConsentDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarConsentQueryWhereDistinct
    on QueryBuilder<IsarConsent, IsarConsent, QDistinct> {
  QueryBuilder<IsarConsent, IsarConsent, QAfterDistinct> distinctByConsent() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarConsentQueryProperty1
    on QueryBuilder<IsarConsent, IsarConsent, QProperty> {
  QueryBuilder<IsarConsent, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarConsent, Map<String, dynamic>, QAfterProperty>
      consentProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarConsentQueryProperty2<R>
    on QueryBuilder<IsarConsent, R, QAfterProperty> {
  QueryBuilder<IsarConsent, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarConsent, (R, Map<String, dynamic>), QAfterProperty>
      consentProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarConsentQueryProperty3<R1, R2>
    on QueryBuilder<IsarConsent, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarConsent, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarConsent, (R1, R2, Map<String, dynamic>), QOperations>
      consentProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarContractCollection on Isar {
  IsarCollection<int, IsarContract> get isarContracts => this.collection();
}

const IsarContractSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarContract',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'contract',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarContract>(
    serialize: serializeIsarContract,
    deserialize: deserializeIsarContract,
    deserializeProperty: deserializeIsarContractProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarContract(IsarWriter writer, IsarContract object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.contract));
  return object.id;
}

@isarProtected
IsarContract deserializeIsarContract(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _contract;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _contract = json;
    } else {
      _contract = const <String, dynamic>{};
    }
  }
  final object = IsarContract(
    id: _id,
    contract: _contract,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarContractProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarContractQueryFilter
    on QueryBuilder<IsarContract, IsarContract, QFilterCondition> {
  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarContractQueryObject
    on QueryBuilder<IsarContract, IsarContract, QFilterCondition> {}

extension IsarContractQuerySortBy
    on QueryBuilder<IsarContract, IsarContract, QSortBy> {
  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> sortByContract() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> sortByContractDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarContractQuerySortThenBy
    on QueryBuilder<IsarContract, IsarContract, QSortThenBy> {
  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> thenByContract() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarContract, IsarContract, QAfterSortBy> thenByContractDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarContractQueryWhereDistinct
    on QueryBuilder<IsarContract, IsarContract, QDistinct> {
  QueryBuilder<IsarContract, IsarContract, QAfterDistinct>
      distinctByContract() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarContractQueryProperty1
    on QueryBuilder<IsarContract, IsarContract, QProperty> {
  QueryBuilder<IsarContract, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarContract, Map<String, dynamic>, QAfterProperty>
      contractProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarContractQueryProperty2<R>
    on QueryBuilder<IsarContract, R, QAfterProperty> {
  QueryBuilder<IsarContract, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarContract, (R, Map<String, dynamic>), QAfterProperty>
      contractProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarContractQueryProperty3<R1, R2>
    on QueryBuilder<IsarContract, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarContract, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarContract, (R1, R2, Map<String, dynamic>), QOperations>
      contractProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCoverageCollection on Isar {
  IsarCollection<int, IsarCoverage> get isarCoverages => this.collection();
}

const IsarCoverageSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCoverage',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'coverage',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarCoverage>(
    serialize: serializeIsarCoverage,
    deserialize: deserializeIsarCoverage,
    deserializeProperty: deserializeIsarCoverageProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCoverage(IsarWriter writer, IsarCoverage object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.coverage));
  return object.id;
}

@isarProtected
IsarCoverage deserializeIsarCoverage(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _coverage;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _coverage = json;
    } else {
      _coverage = const <String, dynamic>{};
    }
  }
  final object = IsarCoverage(
    id: _id,
    coverage: _coverage,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarCoverageProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarCoverageQueryFilter
    on QueryBuilder<IsarCoverage, IsarCoverage, QFilterCondition> {
  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarCoverageQueryObject
    on QueryBuilder<IsarCoverage, IsarCoverage, QFilterCondition> {}

extension IsarCoverageQuerySortBy
    on QueryBuilder<IsarCoverage, IsarCoverage, QSortBy> {
  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> sortByCoverage() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> sortByCoverageDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCoverageQuerySortThenBy
    on QueryBuilder<IsarCoverage, IsarCoverage, QSortThenBy> {
  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> thenByCoverage() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCoverage, IsarCoverage, QAfterSortBy> thenByCoverageDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCoverageQueryWhereDistinct
    on QueryBuilder<IsarCoverage, IsarCoverage, QDistinct> {
  QueryBuilder<IsarCoverage, IsarCoverage, QAfterDistinct>
      distinctByCoverage() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarCoverageQueryProperty1
    on QueryBuilder<IsarCoverage, IsarCoverage, QProperty> {
  QueryBuilder<IsarCoverage, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCoverage, Map<String, dynamic>, QAfterProperty>
      coverageProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCoverageQueryProperty2<R>
    on QueryBuilder<IsarCoverage, R, QAfterProperty> {
  QueryBuilder<IsarCoverage, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCoverage, (R, Map<String, dynamic>), QAfterProperty>
      coverageProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCoverageQueryProperty3<R1, R2>
    on QueryBuilder<IsarCoverage, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCoverage, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCoverage, (R1, R2, Map<String, dynamic>), QOperations>
      coverageProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCoverageEligibilityRequestCollection on Isar {
  IsarCollection<int, IsarCoverageEligibilityRequest>
      get isarCoverageEligibilityRequests => this.collection();
}

const IsarCoverageEligibilityRequestSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCoverageEligibilityRequest',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'coverageEligibilityRequest',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarCoverageEligibilityRequest>(
    serialize: serializeIsarCoverageEligibilityRequest,
    deserialize: deserializeIsarCoverageEligibilityRequest,
    deserializeProperty: deserializeIsarCoverageEligibilityRequestProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCoverageEligibilityRequest(
    IsarWriter writer, IsarCoverageEligibilityRequest object) {
  IsarCore.writeString(
      writer, 1, isarJsonEncode(object.coverageEligibilityRequest));
  return object.id;
}

@isarProtected
IsarCoverageEligibilityRequest deserializeIsarCoverageEligibilityRequest(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _coverageEligibilityRequest;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _coverageEligibilityRequest = json;
    } else {
      _coverageEligibilityRequest = const <String, dynamic>{};
    }
  }
  final object = IsarCoverageEligibilityRequest(
    id: _id,
    coverageEligibilityRequest: _coverageEligibilityRequest,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarCoverageEligibilityRequestProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarCoverageEligibilityRequestQueryFilter on QueryBuilder<
    IsarCoverageEligibilityRequest,
    IsarCoverageEligibilityRequest,
    QFilterCondition> {
  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarCoverageEligibilityRequestQueryObject on QueryBuilder<
    IsarCoverageEligibilityRequest,
    IsarCoverageEligibilityRequest,
    QFilterCondition> {}

extension IsarCoverageEligibilityRequestQuerySortBy on QueryBuilder<
    IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest, QSortBy> {
  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> sortByCoverageEligibilityRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> sortByCoverageEligibilityRequestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCoverageEligibilityRequestQuerySortThenBy on QueryBuilder<
    IsarCoverageEligibilityRequest,
    IsarCoverageEligibilityRequest,
    QSortThenBy> {
  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> thenByCoverageEligibilityRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterSortBy> thenByCoverageEligibilityRequestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCoverageEligibilityRequestQueryWhereDistinct on QueryBuilder<
    IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest, QDistinct> {
  QueryBuilder<IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest,
      QAfterDistinct> distinctByCoverageEligibilityRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarCoverageEligibilityRequestQueryProperty1 on QueryBuilder<
    IsarCoverageEligibilityRequest, IsarCoverageEligibilityRequest, QProperty> {
  QueryBuilder<IsarCoverageEligibilityRequest, int, QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, Map<String, dynamic>,
      QAfterProperty> coverageEligibilityRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCoverageEligibilityRequestQueryProperty2<R>
    on QueryBuilder<IsarCoverageEligibilityRequest, R, QAfterProperty> {
  QueryBuilder<IsarCoverageEligibilityRequest, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, (R, Map<String, dynamic>),
      QAfterProperty> coverageEligibilityRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCoverageEligibilityRequestQueryProperty3<R1, R2>
    on QueryBuilder<IsarCoverageEligibilityRequest, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCoverageEligibilityRequest, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityRequest, (R1, R2, Map<String, dynamic>),
      QOperations> coverageEligibilityRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarCoverageEligibilityResponseCollection on Isar {
  IsarCollection<int, IsarCoverageEligibilityResponse>
      get isarCoverageEligibilityResponses => this.collection();
}

const IsarCoverageEligibilityResponseSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarCoverageEligibilityResponse',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'coverageEligibilityResponse',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarCoverageEligibilityResponse>(
    serialize: serializeIsarCoverageEligibilityResponse,
    deserialize: deserializeIsarCoverageEligibilityResponse,
    deserializeProperty: deserializeIsarCoverageEligibilityResponseProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarCoverageEligibilityResponse(
    IsarWriter writer, IsarCoverageEligibilityResponse object) {
  IsarCore.writeString(
      writer, 1, isarJsonEncode(object.coverageEligibilityResponse));
  return object.id;
}

@isarProtected
IsarCoverageEligibilityResponse deserializeIsarCoverageEligibilityResponse(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _coverageEligibilityResponse;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _coverageEligibilityResponse = json;
    } else {
      _coverageEligibilityResponse = const <String, dynamic>{};
    }
  }
  final object = IsarCoverageEligibilityResponse(
    id: _id,
    coverageEligibilityResponse: _coverageEligibilityResponse,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarCoverageEligibilityResponseProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarCoverageEligibilityResponseQueryFilter on QueryBuilder<
    IsarCoverageEligibilityResponse,
    IsarCoverageEligibilityResponse,
    QFilterCondition> {
  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarCoverageEligibilityResponseQueryObject on QueryBuilder<
    IsarCoverageEligibilityResponse,
    IsarCoverageEligibilityResponse,
    QFilterCondition> {}

extension IsarCoverageEligibilityResponseQuerySortBy on QueryBuilder<
    IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse, QSortBy> {
  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> sortByCoverageEligibilityResponse() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> sortByCoverageEligibilityResponseDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCoverageEligibilityResponseQuerySortThenBy on QueryBuilder<
    IsarCoverageEligibilityResponse,
    IsarCoverageEligibilityResponse,
    QSortThenBy> {
  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> thenByCoverageEligibilityResponse() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterSortBy> thenByCoverageEligibilityResponseDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarCoverageEligibilityResponseQueryWhereDistinct on QueryBuilder<
    IsarCoverageEligibilityResponse,
    IsarCoverageEligibilityResponse,
    QDistinct> {
  QueryBuilder<IsarCoverageEligibilityResponse, IsarCoverageEligibilityResponse,
      QAfterDistinct> distinctByCoverageEligibilityResponse() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarCoverageEligibilityResponseQueryProperty1 on QueryBuilder<
    IsarCoverageEligibilityResponse,
    IsarCoverageEligibilityResponse,
    QProperty> {
  QueryBuilder<IsarCoverageEligibilityResponse, int, QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, Map<String, dynamic>,
      QAfterProperty> coverageEligibilityResponseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCoverageEligibilityResponseQueryProperty2<R>
    on QueryBuilder<IsarCoverageEligibilityResponse, R, QAfterProperty> {
  QueryBuilder<IsarCoverageEligibilityResponse, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, (R, Map<String, dynamic>),
      QAfterProperty> coverageEligibilityResponseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarCoverageEligibilityResponseQueryProperty3<R1, R2>
    on QueryBuilder<IsarCoverageEligibilityResponse, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarCoverageEligibilityResponse, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarCoverageEligibilityResponse, (R1, R2, Map<String, dynamic>),
      QOperations> coverageEligibilityResponseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarDetectedIssueCollection on Isar {
  IsarCollection<int, IsarDetectedIssue> get isarDetectedIssues =>
      this.collection();
}

const IsarDetectedIssueSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarDetectedIssue',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'detectedIssue',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarDetectedIssue>(
    serialize: serializeIsarDetectedIssue,
    deserialize: deserializeIsarDetectedIssue,
    deserializeProperty: deserializeIsarDetectedIssueProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarDetectedIssue(IsarWriter writer, IsarDetectedIssue object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.detectedIssue));
  return object.id;
}

@isarProtected
IsarDetectedIssue deserializeIsarDetectedIssue(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _detectedIssue;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _detectedIssue = json;
    } else {
      _detectedIssue = const <String, dynamic>{};
    }
  }
  final object = IsarDetectedIssue(
    id: _id,
    detectedIssue: _detectedIssue,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarDetectedIssueProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarDetectedIssueQueryFilter
    on QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QFilterCondition> {
  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarDetectedIssueQueryObject
    on QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QFilterCondition> {}

extension IsarDetectedIssueQuerySortBy
    on QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QSortBy> {
  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy>
      sortByDetectedIssue() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy>
      sortByDetectedIssueDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarDetectedIssueQuerySortThenBy
    on QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QSortThenBy> {
  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy>
      thenByDetectedIssue() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterSortBy>
      thenByDetectedIssueDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarDetectedIssueQueryWhereDistinct
    on QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QDistinct> {
  QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QAfterDistinct>
      distinctByDetectedIssue() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarDetectedIssueQueryProperty1
    on QueryBuilder<IsarDetectedIssue, IsarDetectedIssue, QProperty> {
  QueryBuilder<IsarDetectedIssue, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDetectedIssue, Map<String, dynamic>, QAfterProperty>
      detectedIssueProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarDetectedIssueQueryProperty2<R>
    on QueryBuilder<IsarDetectedIssue, R, QAfterProperty> {
  QueryBuilder<IsarDetectedIssue, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDetectedIssue, (R, Map<String, dynamic>), QAfterProperty>
      detectedIssueProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarDetectedIssueQueryProperty3<R1, R2>
    on QueryBuilder<IsarDetectedIssue, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarDetectedIssue, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDetectedIssue, (R1, R2, Map<String, dynamic>), QOperations>
      detectedIssueProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarDeviceCollection on Isar {
  IsarCollection<int, IsarDevice> get isarDevices => this.collection();
}

const IsarDeviceSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarDevice',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'device',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarDevice>(
    serialize: serializeIsarDevice,
    deserialize: deserializeIsarDevice,
    deserializeProperty: deserializeIsarDeviceProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarDevice(IsarWriter writer, IsarDevice object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.device));
  return object.id;
}

@isarProtected
IsarDevice deserializeIsarDevice(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _device;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _device = json;
    } else {
      _device = const <String, dynamic>{};
    }
  }
  final object = IsarDevice(
    id: _id,
    device: _device,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarDeviceProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarDeviceQueryFilter
    on QueryBuilder<IsarDevice, IsarDevice, QFilterCondition> {
  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarDeviceQueryObject
    on QueryBuilder<IsarDevice, IsarDevice, QFilterCondition> {}

extension IsarDeviceQuerySortBy
    on QueryBuilder<IsarDevice, IsarDevice, QSortBy> {
  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> sortByDevice() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> sortByDeviceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarDeviceQuerySortThenBy
    on QueryBuilder<IsarDevice, IsarDevice, QSortThenBy> {
  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> thenByDevice() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarDevice, IsarDevice, QAfterSortBy> thenByDeviceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarDeviceQueryWhereDistinct
    on QueryBuilder<IsarDevice, IsarDevice, QDistinct> {
  QueryBuilder<IsarDevice, IsarDevice, QAfterDistinct> distinctByDevice() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarDeviceQueryProperty1
    on QueryBuilder<IsarDevice, IsarDevice, QProperty> {
  QueryBuilder<IsarDevice, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDevice, Map<String, dynamic>, QAfterProperty>
      deviceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarDeviceQueryProperty2<R>
    on QueryBuilder<IsarDevice, R, QAfterProperty> {
  QueryBuilder<IsarDevice, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDevice, (R, Map<String, dynamic>), QAfterProperty>
      deviceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarDeviceQueryProperty3<R1, R2>
    on QueryBuilder<IsarDevice, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarDevice, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDevice, (R1, R2, Map<String, dynamic>), QOperations>
      deviceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarDeviceDefinitionCollection on Isar {
  IsarCollection<int, IsarDeviceDefinition> get isarDeviceDefinitions =>
      this.collection();
}

const IsarDeviceDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarDeviceDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'deviceDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarDeviceDefinition>(
    serialize: serializeIsarDeviceDefinition,
    deserialize: deserializeIsarDeviceDefinition,
    deserializeProperty: deserializeIsarDeviceDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarDeviceDefinition(
    IsarWriter writer, IsarDeviceDefinition object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.deviceDefinition));
  return object.id;
}

@isarProtected
IsarDeviceDefinition deserializeIsarDeviceDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _deviceDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _deviceDefinition = json;
    } else {
      _deviceDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarDeviceDefinition(
    id: _id,
    deviceDefinition: _deviceDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarDeviceDefinitionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarDeviceDefinitionQueryFilter on QueryBuilder<IsarDeviceDefinition,
    IsarDeviceDefinition, QFilterCondition> {
  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarDeviceDefinitionQueryObject on QueryBuilder<IsarDeviceDefinition,
    IsarDeviceDefinition, QFilterCondition> {}

extension IsarDeviceDefinitionQuerySortBy
    on QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QSortBy> {
  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      sortByDeviceDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      sortByDeviceDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarDeviceDefinitionQuerySortThenBy
    on QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QSortThenBy> {
  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      thenByDeviceDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterSortBy>
      thenByDeviceDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarDeviceDefinitionQueryWhereDistinct
    on QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QDistinct> {
  QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QAfterDistinct>
      distinctByDeviceDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarDeviceDefinitionQueryProperty1
    on QueryBuilder<IsarDeviceDefinition, IsarDeviceDefinition, QProperty> {
  QueryBuilder<IsarDeviceDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceDefinition, Map<String, dynamic>, QAfterProperty>
      deviceDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarDeviceDefinitionQueryProperty2<R>
    on QueryBuilder<IsarDeviceDefinition, R, QAfterProperty> {
  QueryBuilder<IsarDeviceDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceDefinition, (R, Map<String, dynamic>), QAfterProperty>
      deviceDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarDeviceDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarDeviceDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarDeviceDefinition, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> deviceDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarDeviceMetricCollection on Isar {
  IsarCollection<int, IsarDeviceMetric> get isarDeviceMetrics =>
      this.collection();
}

const IsarDeviceMetricSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarDeviceMetric',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'deviceMetric',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarDeviceMetric>(
    serialize: serializeIsarDeviceMetric,
    deserialize: deserializeIsarDeviceMetric,
    deserializeProperty: deserializeIsarDeviceMetricProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarDeviceMetric(IsarWriter writer, IsarDeviceMetric object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.deviceMetric));
  return object.id;
}

@isarProtected
IsarDeviceMetric deserializeIsarDeviceMetric(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _deviceMetric;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _deviceMetric = json;
    } else {
      _deviceMetric = const <String, dynamic>{};
    }
  }
  final object = IsarDeviceMetric(
    id: _id,
    deviceMetric: _deviceMetric,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarDeviceMetricProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarDeviceMetricQueryFilter
    on QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QFilterCondition> {
  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarDeviceMetricQueryObject
    on QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QFilterCondition> {}

extension IsarDeviceMetricQuerySortBy
    on QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QSortBy> {
  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy>
      sortByDeviceMetric() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy>
      sortByDeviceMetricDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarDeviceMetricQuerySortThenBy
    on QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QSortThenBy> {
  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy>
      thenByDeviceMetric() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterSortBy>
      thenByDeviceMetricDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarDeviceMetricQueryWhereDistinct
    on QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QDistinct> {
  QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QAfterDistinct>
      distinctByDeviceMetric() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarDeviceMetricQueryProperty1
    on QueryBuilder<IsarDeviceMetric, IsarDeviceMetric, QProperty> {
  QueryBuilder<IsarDeviceMetric, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceMetric, Map<String, dynamic>, QAfterProperty>
      deviceMetricProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarDeviceMetricQueryProperty2<R>
    on QueryBuilder<IsarDeviceMetric, R, QAfterProperty> {
  QueryBuilder<IsarDeviceMetric, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceMetric, (R, Map<String, dynamic>), QAfterProperty>
      deviceMetricProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarDeviceMetricQueryProperty3<R1, R2>
    on QueryBuilder<IsarDeviceMetric, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarDeviceMetric, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceMetric, (R1, R2, Map<String, dynamic>), QOperations>
      deviceMetricProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarDeviceRequestCollection on Isar {
  IsarCollection<int, IsarDeviceRequest> get isarDeviceRequests =>
      this.collection();
}

const IsarDeviceRequestSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarDeviceRequest',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'deviceRequest',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarDeviceRequest>(
    serialize: serializeIsarDeviceRequest,
    deserialize: deserializeIsarDeviceRequest,
    deserializeProperty: deserializeIsarDeviceRequestProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarDeviceRequest(IsarWriter writer, IsarDeviceRequest object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.deviceRequest));
  return object.id;
}

@isarProtected
IsarDeviceRequest deserializeIsarDeviceRequest(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _deviceRequest;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _deviceRequest = json;
    } else {
      _deviceRequest = const <String, dynamic>{};
    }
  }
  final object = IsarDeviceRequest(
    id: _id,
    deviceRequest: _deviceRequest,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarDeviceRequestProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarDeviceRequestQueryFilter
    on QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QFilterCondition> {
  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarDeviceRequestQueryObject
    on QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QFilterCondition> {}

extension IsarDeviceRequestQuerySortBy
    on QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QSortBy> {
  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy>
      sortByDeviceRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy>
      sortByDeviceRequestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarDeviceRequestQuerySortThenBy
    on QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QSortThenBy> {
  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy>
      thenByDeviceRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterSortBy>
      thenByDeviceRequestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarDeviceRequestQueryWhereDistinct
    on QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QDistinct> {
  QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QAfterDistinct>
      distinctByDeviceRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarDeviceRequestQueryProperty1
    on QueryBuilder<IsarDeviceRequest, IsarDeviceRequest, QProperty> {
  QueryBuilder<IsarDeviceRequest, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceRequest, Map<String, dynamic>, QAfterProperty>
      deviceRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarDeviceRequestQueryProperty2<R>
    on QueryBuilder<IsarDeviceRequest, R, QAfterProperty> {
  QueryBuilder<IsarDeviceRequest, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceRequest, (R, Map<String, dynamic>), QAfterProperty>
      deviceRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarDeviceRequestQueryProperty3<R1, R2>
    on QueryBuilder<IsarDeviceRequest, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarDeviceRequest, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceRequest, (R1, R2, Map<String, dynamic>), QOperations>
      deviceRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarDeviceUseStatementCollection on Isar {
  IsarCollection<int, IsarDeviceUseStatement> get isarDeviceUseStatements =>
      this.collection();
}

const IsarDeviceUseStatementSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarDeviceUseStatement',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'deviceUseStatement',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarDeviceUseStatement>(
    serialize: serializeIsarDeviceUseStatement,
    deserialize: deserializeIsarDeviceUseStatement,
    deserializeProperty: deserializeIsarDeviceUseStatementProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarDeviceUseStatement(
    IsarWriter writer, IsarDeviceUseStatement object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.deviceUseStatement));
  return object.id;
}

@isarProtected
IsarDeviceUseStatement deserializeIsarDeviceUseStatement(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _deviceUseStatement;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _deviceUseStatement = json;
    } else {
      _deviceUseStatement = const <String, dynamic>{};
    }
  }
  final object = IsarDeviceUseStatement(
    id: _id,
    deviceUseStatement: _deviceUseStatement,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarDeviceUseStatementProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarDeviceUseStatementQueryFilter on QueryBuilder<
    IsarDeviceUseStatement, IsarDeviceUseStatement, QFilterCondition> {
  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarDeviceUseStatementQueryObject on QueryBuilder<
    IsarDeviceUseStatement, IsarDeviceUseStatement, QFilterCondition> {}

extension IsarDeviceUseStatementQuerySortBy
    on QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QSortBy> {
  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      sortByDeviceUseStatement() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      sortByDeviceUseStatementDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarDeviceUseStatementQuerySortThenBy on QueryBuilder<
    IsarDeviceUseStatement, IsarDeviceUseStatement, QSortThenBy> {
  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      thenByDeviceUseStatement() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterSortBy>
      thenByDeviceUseStatementDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarDeviceUseStatementQueryWhereDistinct
    on QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QDistinct> {
  QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QAfterDistinct>
      distinctByDeviceUseStatement() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarDeviceUseStatementQueryProperty1
    on QueryBuilder<IsarDeviceUseStatement, IsarDeviceUseStatement, QProperty> {
  QueryBuilder<IsarDeviceUseStatement, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, Map<String, dynamic>, QAfterProperty>
      deviceUseStatementProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarDeviceUseStatementQueryProperty2<R>
    on QueryBuilder<IsarDeviceUseStatement, R, QAfterProperty> {
  QueryBuilder<IsarDeviceUseStatement, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, (R, Map<String, dynamic>),
      QAfterProperty> deviceUseStatementProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarDeviceUseStatementQueryProperty3<R1, R2>
    on QueryBuilder<IsarDeviceUseStatement, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarDeviceUseStatement, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDeviceUseStatement, (R1, R2, Map<String, dynamic>),
      QOperations> deviceUseStatementProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarDiagnosticReportCollection on Isar {
  IsarCollection<int, IsarDiagnosticReport> get isarDiagnosticReports =>
      this.collection();
}

const IsarDiagnosticReportSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarDiagnosticReport',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'diagnosticReport',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarDiagnosticReport>(
    serialize: serializeIsarDiagnosticReport,
    deserialize: deserializeIsarDiagnosticReport,
    deserializeProperty: deserializeIsarDiagnosticReportProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarDiagnosticReport(
    IsarWriter writer, IsarDiagnosticReport object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.diagnosticReport));
  return object.id;
}

@isarProtected
IsarDiagnosticReport deserializeIsarDiagnosticReport(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _diagnosticReport;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _diagnosticReport = json;
    } else {
      _diagnosticReport = const <String, dynamic>{};
    }
  }
  final object = IsarDiagnosticReport(
    id: _id,
    diagnosticReport: _diagnosticReport,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarDiagnosticReportProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarDiagnosticReportQueryFilter on QueryBuilder<IsarDiagnosticReport,
    IsarDiagnosticReport, QFilterCondition> {
  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarDiagnosticReportQueryObject on QueryBuilder<IsarDiagnosticReport,
    IsarDiagnosticReport, QFilterCondition> {}

extension IsarDiagnosticReportQuerySortBy
    on QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QSortBy> {
  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      sortByDiagnosticReport() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      sortByDiagnosticReportDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarDiagnosticReportQuerySortThenBy
    on QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QSortThenBy> {
  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      thenByDiagnosticReport() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterSortBy>
      thenByDiagnosticReportDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarDiagnosticReportQueryWhereDistinct
    on QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QDistinct> {
  QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QAfterDistinct>
      distinctByDiagnosticReport() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarDiagnosticReportQueryProperty1
    on QueryBuilder<IsarDiagnosticReport, IsarDiagnosticReport, QProperty> {
  QueryBuilder<IsarDiagnosticReport, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDiagnosticReport, Map<String, dynamic>, QAfterProperty>
      diagnosticReportProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarDiagnosticReportQueryProperty2<R>
    on QueryBuilder<IsarDiagnosticReport, R, QAfterProperty> {
  QueryBuilder<IsarDiagnosticReport, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDiagnosticReport, (R, Map<String, dynamic>), QAfterProperty>
      diagnosticReportProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarDiagnosticReportQueryProperty3<R1, R2>
    on QueryBuilder<IsarDiagnosticReport, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarDiagnosticReport, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDiagnosticReport, (R1, R2, Map<String, dynamic>),
      QOperations> diagnosticReportProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarDocumentManifestCollection on Isar {
  IsarCollection<int, IsarDocumentManifest> get isarDocumentManifests =>
      this.collection();
}

const IsarDocumentManifestSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarDocumentManifest',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'documentManifest',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarDocumentManifest>(
    serialize: serializeIsarDocumentManifest,
    deserialize: deserializeIsarDocumentManifest,
    deserializeProperty: deserializeIsarDocumentManifestProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarDocumentManifest(
    IsarWriter writer, IsarDocumentManifest object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.documentManifest));
  return object.id;
}

@isarProtected
IsarDocumentManifest deserializeIsarDocumentManifest(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _documentManifest;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _documentManifest = json;
    } else {
      _documentManifest = const <String, dynamic>{};
    }
  }
  final object = IsarDocumentManifest(
    id: _id,
    documentManifest: _documentManifest,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarDocumentManifestProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarDocumentManifestQueryFilter on QueryBuilder<IsarDocumentManifest,
    IsarDocumentManifest, QFilterCondition> {
  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarDocumentManifestQueryObject on QueryBuilder<IsarDocumentManifest,
    IsarDocumentManifest, QFilterCondition> {}

extension IsarDocumentManifestQuerySortBy
    on QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QSortBy> {
  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      sortByDocumentManifest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      sortByDocumentManifestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarDocumentManifestQuerySortThenBy
    on QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QSortThenBy> {
  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      thenByDocumentManifest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterSortBy>
      thenByDocumentManifestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarDocumentManifestQueryWhereDistinct
    on QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QDistinct> {
  QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QAfterDistinct>
      distinctByDocumentManifest() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarDocumentManifestQueryProperty1
    on QueryBuilder<IsarDocumentManifest, IsarDocumentManifest, QProperty> {
  QueryBuilder<IsarDocumentManifest, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDocumentManifest, Map<String, dynamic>, QAfterProperty>
      documentManifestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarDocumentManifestQueryProperty2<R>
    on QueryBuilder<IsarDocumentManifest, R, QAfterProperty> {
  QueryBuilder<IsarDocumentManifest, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDocumentManifest, (R, Map<String, dynamic>), QAfterProperty>
      documentManifestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarDocumentManifestQueryProperty3<R1, R2>
    on QueryBuilder<IsarDocumentManifest, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarDocumentManifest, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDocumentManifest, (R1, R2, Map<String, dynamic>),
      QOperations> documentManifestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarDocumentReferenceCollection on Isar {
  IsarCollection<int, IsarDocumentReference> get isarDocumentReferences =>
      this.collection();
}

const IsarDocumentReferenceSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarDocumentReference',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'documentReference',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarDocumentReference>(
    serialize: serializeIsarDocumentReference,
    deserialize: deserializeIsarDocumentReference,
    deserializeProperty: deserializeIsarDocumentReferenceProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarDocumentReference(
    IsarWriter writer, IsarDocumentReference object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.documentReference));
  return object.id;
}

@isarProtected
IsarDocumentReference deserializeIsarDocumentReference(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _documentReference;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _documentReference = json;
    } else {
      _documentReference = const <String, dynamic>{};
    }
  }
  final object = IsarDocumentReference(
    id: _id,
    documentReference: _documentReference,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarDocumentReferenceProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarDocumentReferenceQueryFilter on QueryBuilder<
    IsarDocumentReference, IsarDocumentReference, QFilterCondition> {
  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarDocumentReferenceQueryObject on QueryBuilder<
    IsarDocumentReference, IsarDocumentReference, QFilterCondition> {}

extension IsarDocumentReferenceQuerySortBy
    on QueryBuilder<IsarDocumentReference, IsarDocumentReference, QSortBy> {
  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      sortByDocumentReference() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      sortByDocumentReferenceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarDocumentReferenceQuerySortThenBy
    on QueryBuilder<IsarDocumentReference, IsarDocumentReference, QSortThenBy> {
  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      thenByDocumentReference() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterSortBy>
      thenByDocumentReferenceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarDocumentReferenceQueryWhereDistinct
    on QueryBuilder<IsarDocumentReference, IsarDocumentReference, QDistinct> {
  QueryBuilder<IsarDocumentReference, IsarDocumentReference, QAfterDistinct>
      distinctByDocumentReference() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarDocumentReferenceQueryProperty1
    on QueryBuilder<IsarDocumentReference, IsarDocumentReference, QProperty> {
  QueryBuilder<IsarDocumentReference, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDocumentReference, Map<String, dynamic>, QAfterProperty>
      documentReferenceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarDocumentReferenceQueryProperty2<R>
    on QueryBuilder<IsarDocumentReference, R, QAfterProperty> {
  QueryBuilder<IsarDocumentReference, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDocumentReference, (R, Map<String, dynamic>), QAfterProperty>
      documentReferenceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarDocumentReferenceQueryProperty3<R1, R2>
    on QueryBuilder<IsarDocumentReference, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarDocumentReference, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarDocumentReference, (R1, R2, Map<String, dynamic>),
      QOperations> documentReferenceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarEncounterCollection on Isar {
  IsarCollection<int, IsarEncounter> get isarEncounters => this.collection();
}

const IsarEncounterSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarEncounter',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'encounter',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarEncounter>(
    serialize: serializeIsarEncounter,
    deserialize: deserializeIsarEncounter,
    deserializeProperty: deserializeIsarEncounterProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarEncounter(IsarWriter writer, IsarEncounter object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.encounter));
  return object.id;
}

@isarProtected
IsarEncounter deserializeIsarEncounter(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _encounter;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _encounter = json;
    } else {
      _encounter = const <String, dynamic>{};
    }
  }
  final object = IsarEncounter(
    id: _id,
    encounter: _encounter,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarEncounterProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarEncounterQueryFilter
    on QueryBuilder<IsarEncounter, IsarEncounter, QFilterCondition> {
  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarEncounterQueryObject
    on QueryBuilder<IsarEncounter, IsarEncounter, QFilterCondition> {}

extension IsarEncounterQuerySortBy
    on QueryBuilder<IsarEncounter, IsarEncounter, QSortBy> {
  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy> sortByEncounter() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy>
      sortByEncounterDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarEncounterQuerySortThenBy
    on QueryBuilder<IsarEncounter, IsarEncounter, QSortThenBy> {
  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy> thenByEncounter() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarEncounter, IsarEncounter, QAfterSortBy>
      thenByEncounterDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarEncounterQueryWhereDistinct
    on QueryBuilder<IsarEncounter, IsarEncounter, QDistinct> {
  QueryBuilder<IsarEncounter, IsarEncounter, QAfterDistinct>
      distinctByEncounter() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarEncounterQueryProperty1
    on QueryBuilder<IsarEncounter, IsarEncounter, QProperty> {
  QueryBuilder<IsarEncounter, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEncounter, Map<String, dynamic>, QAfterProperty>
      encounterProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarEncounterQueryProperty2<R>
    on QueryBuilder<IsarEncounter, R, QAfterProperty> {
  QueryBuilder<IsarEncounter, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEncounter, (R, Map<String, dynamic>), QAfterProperty>
      encounterProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarEncounterQueryProperty3<R1, R2>
    on QueryBuilder<IsarEncounter, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarEncounter, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEncounter, (R1, R2, Map<String, dynamic>), QOperations>
      encounterProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarEndpointCollection on Isar {
  IsarCollection<int, IsarEndpoint> get isarEndpoints => this.collection();
}

const IsarEndpointSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarEndpoint',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'endpoint',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarEndpoint>(
    serialize: serializeIsarEndpoint,
    deserialize: deserializeIsarEndpoint,
    deserializeProperty: deserializeIsarEndpointProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarEndpoint(IsarWriter writer, IsarEndpoint object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.endpoint));
  return object.id;
}

@isarProtected
IsarEndpoint deserializeIsarEndpoint(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _endpoint;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _endpoint = json;
    } else {
      _endpoint = const <String, dynamic>{};
    }
  }
  final object = IsarEndpoint(
    id: _id,
    endpoint: _endpoint,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarEndpointProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarEndpointQueryFilter
    on QueryBuilder<IsarEndpoint, IsarEndpoint, QFilterCondition> {
  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarEndpointQueryObject
    on QueryBuilder<IsarEndpoint, IsarEndpoint, QFilterCondition> {}

extension IsarEndpointQuerySortBy
    on QueryBuilder<IsarEndpoint, IsarEndpoint, QSortBy> {
  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> sortByEndpoint() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> sortByEndpointDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarEndpointQuerySortThenBy
    on QueryBuilder<IsarEndpoint, IsarEndpoint, QSortThenBy> {
  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> thenByEndpoint() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterSortBy> thenByEndpointDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarEndpointQueryWhereDistinct
    on QueryBuilder<IsarEndpoint, IsarEndpoint, QDistinct> {
  QueryBuilder<IsarEndpoint, IsarEndpoint, QAfterDistinct>
      distinctByEndpoint() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarEndpointQueryProperty1
    on QueryBuilder<IsarEndpoint, IsarEndpoint, QProperty> {
  QueryBuilder<IsarEndpoint, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEndpoint, Map<String, dynamic>, QAfterProperty>
      endpointProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarEndpointQueryProperty2<R>
    on QueryBuilder<IsarEndpoint, R, QAfterProperty> {
  QueryBuilder<IsarEndpoint, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEndpoint, (R, Map<String, dynamic>), QAfterProperty>
      endpointProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarEndpointQueryProperty3<R1, R2>
    on QueryBuilder<IsarEndpoint, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarEndpoint, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEndpoint, (R1, R2, Map<String, dynamic>), QOperations>
      endpointProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarEnrollmentRequestCollection on Isar {
  IsarCollection<int, IsarEnrollmentRequest> get isarEnrollmentRequests =>
      this.collection();
}

const IsarEnrollmentRequestSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarEnrollmentRequest',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'enrollmentRequest',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarEnrollmentRequest>(
    serialize: serializeIsarEnrollmentRequest,
    deserialize: deserializeIsarEnrollmentRequest,
    deserializeProperty: deserializeIsarEnrollmentRequestProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarEnrollmentRequest(
    IsarWriter writer, IsarEnrollmentRequest object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.enrollmentRequest));
  return object.id;
}

@isarProtected
IsarEnrollmentRequest deserializeIsarEnrollmentRequest(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _enrollmentRequest;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _enrollmentRequest = json;
    } else {
      _enrollmentRequest = const <String, dynamic>{};
    }
  }
  final object = IsarEnrollmentRequest(
    id: _id,
    enrollmentRequest: _enrollmentRequest,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarEnrollmentRequestProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarEnrollmentRequestQueryFilter on QueryBuilder<
    IsarEnrollmentRequest, IsarEnrollmentRequest, QFilterCondition> {
  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarEnrollmentRequestQueryObject on QueryBuilder<
    IsarEnrollmentRequest, IsarEnrollmentRequest, QFilterCondition> {}

extension IsarEnrollmentRequestQuerySortBy
    on QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QSortBy> {
  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      sortByEnrollmentRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      sortByEnrollmentRequestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarEnrollmentRequestQuerySortThenBy
    on QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QSortThenBy> {
  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      thenByEnrollmentRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterSortBy>
      thenByEnrollmentRequestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarEnrollmentRequestQueryWhereDistinct
    on QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QDistinct> {
  QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QAfterDistinct>
      distinctByEnrollmentRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarEnrollmentRequestQueryProperty1
    on QueryBuilder<IsarEnrollmentRequest, IsarEnrollmentRequest, QProperty> {
  QueryBuilder<IsarEnrollmentRequest, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, Map<String, dynamic>, QAfterProperty>
      enrollmentRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarEnrollmentRequestQueryProperty2<R>
    on QueryBuilder<IsarEnrollmentRequest, R, QAfterProperty> {
  QueryBuilder<IsarEnrollmentRequest, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, (R, Map<String, dynamic>), QAfterProperty>
      enrollmentRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarEnrollmentRequestQueryProperty3<R1, R2>
    on QueryBuilder<IsarEnrollmentRequest, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarEnrollmentRequest, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEnrollmentRequest, (R1, R2, Map<String, dynamic>),
      QOperations> enrollmentRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarEnrollmentResponseCollection on Isar {
  IsarCollection<int, IsarEnrollmentResponse> get isarEnrollmentResponses =>
      this.collection();
}

const IsarEnrollmentResponseSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarEnrollmentResponse',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'enrollmentResponse',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarEnrollmentResponse>(
    serialize: serializeIsarEnrollmentResponse,
    deserialize: deserializeIsarEnrollmentResponse,
    deserializeProperty: deserializeIsarEnrollmentResponseProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarEnrollmentResponse(
    IsarWriter writer, IsarEnrollmentResponse object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.enrollmentResponse));
  return object.id;
}

@isarProtected
IsarEnrollmentResponse deserializeIsarEnrollmentResponse(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _enrollmentResponse;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _enrollmentResponse = json;
    } else {
      _enrollmentResponse = const <String, dynamic>{};
    }
  }
  final object = IsarEnrollmentResponse(
    id: _id,
    enrollmentResponse: _enrollmentResponse,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarEnrollmentResponseProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarEnrollmentResponseQueryFilter on QueryBuilder<
    IsarEnrollmentResponse, IsarEnrollmentResponse, QFilterCondition> {
  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarEnrollmentResponseQueryObject on QueryBuilder<
    IsarEnrollmentResponse, IsarEnrollmentResponse, QFilterCondition> {}

extension IsarEnrollmentResponseQuerySortBy
    on QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QSortBy> {
  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      sortByEnrollmentResponse() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      sortByEnrollmentResponseDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarEnrollmentResponseQuerySortThenBy on QueryBuilder<
    IsarEnrollmentResponse, IsarEnrollmentResponse, QSortThenBy> {
  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      thenByEnrollmentResponse() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterSortBy>
      thenByEnrollmentResponseDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarEnrollmentResponseQueryWhereDistinct
    on QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QDistinct> {
  QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QAfterDistinct>
      distinctByEnrollmentResponse() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarEnrollmentResponseQueryProperty1
    on QueryBuilder<IsarEnrollmentResponse, IsarEnrollmentResponse, QProperty> {
  QueryBuilder<IsarEnrollmentResponse, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, Map<String, dynamic>, QAfterProperty>
      enrollmentResponseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarEnrollmentResponseQueryProperty2<R>
    on QueryBuilder<IsarEnrollmentResponse, R, QAfterProperty> {
  QueryBuilder<IsarEnrollmentResponse, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, (R, Map<String, dynamic>),
      QAfterProperty> enrollmentResponseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarEnrollmentResponseQueryProperty3<R1, R2>
    on QueryBuilder<IsarEnrollmentResponse, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarEnrollmentResponse, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEnrollmentResponse, (R1, R2, Map<String, dynamic>),
      QOperations> enrollmentResponseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarEpisodeOfCareCollection on Isar {
  IsarCollection<int, IsarEpisodeOfCare> get isarEpisodeOfCares =>
      this.collection();
}

const IsarEpisodeOfCareSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarEpisodeOfCare',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'episodeOfCare',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarEpisodeOfCare>(
    serialize: serializeIsarEpisodeOfCare,
    deserialize: deserializeIsarEpisodeOfCare,
    deserializeProperty: deserializeIsarEpisodeOfCareProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarEpisodeOfCare(IsarWriter writer, IsarEpisodeOfCare object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.episodeOfCare));
  return object.id;
}

@isarProtected
IsarEpisodeOfCare deserializeIsarEpisodeOfCare(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _episodeOfCare;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _episodeOfCare = json;
    } else {
      _episodeOfCare = const <String, dynamic>{};
    }
  }
  final object = IsarEpisodeOfCare(
    id: _id,
    episodeOfCare: _episodeOfCare,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarEpisodeOfCareProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarEpisodeOfCareQueryFilter
    on QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QFilterCondition> {
  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarEpisodeOfCareQueryObject
    on QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QFilterCondition> {}

extension IsarEpisodeOfCareQuerySortBy
    on QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QSortBy> {
  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy>
      sortByEpisodeOfCare() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy>
      sortByEpisodeOfCareDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarEpisodeOfCareQuerySortThenBy
    on QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QSortThenBy> {
  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy>
      thenByEpisodeOfCare() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterSortBy>
      thenByEpisodeOfCareDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarEpisodeOfCareQueryWhereDistinct
    on QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QDistinct> {
  QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QAfterDistinct>
      distinctByEpisodeOfCare() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarEpisodeOfCareQueryProperty1
    on QueryBuilder<IsarEpisodeOfCare, IsarEpisodeOfCare, QProperty> {
  QueryBuilder<IsarEpisodeOfCare, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, Map<String, dynamic>, QAfterProperty>
      episodeOfCareProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarEpisodeOfCareQueryProperty2<R>
    on QueryBuilder<IsarEpisodeOfCare, R, QAfterProperty> {
  QueryBuilder<IsarEpisodeOfCare, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, (R, Map<String, dynamic>), QAfterProperty>
      episodeOfCareProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarEpisodeOfCareQueryProperty3<R1, R2>
    on QueryBuilder<IsarEpisodeOfCare, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarEpisodeOfCare, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEpisodeOfCare, (R1, R2, Map<String, dynamic>), QOperations>
      episodeOfCareProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarEventDefinitionCollection on Isar {
  IsarCollection<int, IsarEventDefinition> get isarEventDefinitions =>
      this.collection();
}

const IsarEventDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarEventDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'eventDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarEventDefinition>(
    serialize: serializeIsarEventDefinition,
    deserialize: deserializeIsarEventDefinition,
    deserializeProperty: deserializeIsarEventDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarEventDefinition(
    IsarWriter writer, IsarEventDefinition object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.eventDefinition));
  return object.id;
}

@isarProtected
IsarEventDefinition deserializeIsarEventDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _eventDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _eventDefinition = json;
    } else {
      _eventDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarEventDefinition(
    id: _id,
    eventDefinition: _eventDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarEventDefinitionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarEventDefinitionQueryFilter on QueryBuilder<IsarEventDefinition,
    IsarEventDefinition, QFilterCondition> {
  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarEventDefinitionQueryObject on QueryBuilder<IsarEventDefinition,
    IsarEventDefinition, QFilterCondition> {}

extension IsarEventDefinitionQuerySortBy
    on QueryBuilder<IsarEventDefinition, IsarEventDefinition, QSortBy> {
  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      sortByEventDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      sortByEventDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarEventDefinitionQuerySortThenBy
    on QueryBuilder<IsarEventDefinition, IsarEventDefinition, QSortThenBy> {
  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      thenByEventDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterSortBy>
      thenByEventDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarEventDefinitionQueryWhereDistinct
    on QueryBuilder<IsarEventDefinition, IsarEventDefinition, QDistinct> {
  QueryBuilder<IsarEventDefinition, IsarEventDefinition, QAfterDistinct>
      distinctByEventDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarEventDefinitionQueryProperty1
    on QueryBuilder<IsarEventDefinition, IsarEventDefinition, QProperty> {
  QueryBuilder<IsarEventDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEventDefinition, Map<String, dynamic>, QAfterProperty>
      eventDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarEventDefinitionQueryProperty2<R>
    on QueryBuilder<IsarEventDefinition, R, QAfterProperty> {
  QueryBuilder<IsarEventDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEventDefinition, (R, Map<String, dynamic>), QAfterProperty>
      eventDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarEventDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarEventDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarEventDefinition, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEventDefinition, (R1, R2, Map<String, dynamic>), QOperations>
      eventDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarEvidenceCollection on Isar {
  IsarCollection<int, IsarEvidence> get isarEvidences => this.collection();
}

const IsarEvidenceSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarEvidence',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'evidence',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarEvidence>(
    serialize: serializeIsarEvidence,
    deserialize: deserializeIsarEvidence,
    deserializeProperty: deserializeIsarEvidenceProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarEvidence(IsarWriter writer, IsarEvidence object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.evidence));
  return object.id;
}

@isarProtected
IsarEvidence deserializeIsarEvidence(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _evidence;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _evidence = json;
    } else {
      _evidence = const <String, dynamic>{};
    }
  }
  final object = IsarEvidence(
    id: _id,
    evidence: _evidence,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarEvidenceProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarEvidenceQueryFilter
    on QueryBuilder<IsarEvidence, IsarEvidence, QFilterCondition> {
  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarEvidenceQueryObject
    on QueryBuilder<IsarEvidence, IsarEvidence, QFilterCondition> {}

extension IsarEvidenceQuerySortBy
    on QueryBuilder<IsarEvidence, IsarEvidence, QSortBy> {
  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> sortByEvidence() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> sortByEvidenceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarEvidenceQuerySortThenBy
    on QueryBuilder<IsarEvidence, IsarEvidence, QSortThenBy> {
  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> thenByEvidence() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarEvidence, IsarEvidence, QAfterSortBy> thenByEvidenceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarEvidenceQueryWhereDistinct
    on QueryBuilder<IsarEvidence, IsarEvidence, QDistinct> {
  QueryBuilder<IsarEvidence, IsarEvidence, QAfterDistinct>
      distinctByEvidence() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarEvidenceQueryProperty1
    on QueryBuilder<IsarEvidence, IsarEvidence, QProperty> {
  QueryBuilder<IsarEvidence, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEvidence, Map<String, dynamic>, QAfterProperty>
      evidenceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarEvidenceQueryProperty2<R>
    on QueryBuilder<IsarEvidence, R, QAfterProperty> {
  QueryBuilder<IsarEvidence, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEvidence, (R, Map<String, dynamic>), QAfterProperty>
      evidenceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarEvidenceQueryProperty3<R1, R2>
    on QueryBuilder<IsarEvidence, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarEvidence, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEvidence, (R1, R2, Map<String, dynamic>), QOperations>
      evidenceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarEvidenceReportCollection on Isar {
  IsarCollection<int, IsarEvidenceReport> get isarEvidenceReports =>
      this.collection();
}

const IsarEvidenceReportSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarEvidenceReport',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'evidenceReport',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarEvidenceReport>(
    serialize: serializeIsarEvidenceReport,
    deserialize: deserializeIsarEvidenceReport,
    deserializeProperty: deserializeIsarEvidenceReportProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarEvidenceReport(IsarWriter writer, IsarEvidenceReport object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.evidenceReport));
  return object.id;
}

@isarProtected
IsarEvidenceReport deserializeIsarEvidenceReport(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _evidenceReport;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _evidenceReport = json;
    } else {
      _evidenceReport = const <String, dynamic>{};
    }
  }
  final object = IsarEvidenceReport(
    id: _id,
    evidenceReport: _evidenceReport,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarEvidenceReportProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarEvidenceReportQueryFilter
    on QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QFilterCondition> {
  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarEvidenceReportQueryObject
    on QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QFilterCondition> {}

extension IsarEvidenceReportQuerySortBy
    on QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QSortBy> {
  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      sortByEvidenceReport() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      sortByEvidenceReportDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarEvidenceReportQuerySortThenBy
    on QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QSortThenBy> {
  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      thenByEvidenceReport() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterSortBy>
      thenByEvidenceReportDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarEvidenceReportQueryWhereDistinct
    on QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QDistinct> {
  QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QAfterDistinct>
      distinctByEvidenceReport() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarEvidenceReportQueryProperty1
    on QueryBuilder<IsarEvidenceReport, IsarEvidenceReport, QProperty> {
  QueryBuilder<IsarEvidenceReport, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEvidenceReport, Map<String, dynamic>, QAfterProperty>
      evidenceReportProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarEvidenceReportQueryProperty2<R>
    on QueryBuilder<IsarEvidenceReport, R, QAfterProperty> {
  QueryBuilder<IsarEvidenceReport, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEvidenceReport, (R, Map<String, dynamic>), QAfterProperty>
      evidenceReportProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarEvidenceReportQueryProperty3<R1, R2>
    on QueryBuilder<IsarEvidenceReport, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarEvidenceReport, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEvidenceReport, (R1, R2, Map<String, dynamic>), QOperations>
      evidenceReportProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarEvidenceVariableCollection on Isar {
  IsarCollection<int, IsarEvidenceVariable> get isarEvidenceVariables =>
      this.collection();
}

const IsarEvidenceVariableSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarEvidenceVariable',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'evidenceVariable',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarEvidenceVariable>(
    serialize: serializeIsarEvidenceVariable,
    deserialize: deserializeIsarEvidenceVariable,
    deserializeProperty: deserializeIsarEvidenceVariableProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarEvidenceVariable(
    IsarWriter writer, IsarEvidenceVariable object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.evidenceVariable));
  return object.id;
}

@isarProtected
IsarEvidenceVariable deserializeIsarEvidenceVariable(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _evidenceVariable;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _evidenceVariable = json;
    } else {
      _evidenceVariable = const <String, dynamic>{};
    }
  }
  final object = IsarEvidenceVariable(
    id: _id,
    evidenceVariable: _evidenceVariable,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarEvidenceVariableProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarEvidenceVariableQueryFilter on QueryBuilder<IsarEvidenceVariable,
    IsarEvidenceVariable, QFilterCondition> {
  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarEvidenceVariableQueryObject on QueryBuilder<IsarEvidenceVariable,
    IsarEvidenceVariable, QFilterCondition> {}

extension IsarEvidenceVariableQuerySortBy
    on QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QSortBy> {
  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      sortByEvidenceVariable() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      sortByEvidenceVariableDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarEvidenceVariableQuerySortThenBy
    on QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QSortThenBy> {
  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      thenByEvidenceVariable() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterSortBy>
      thenByEvidenceVariableDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarEvidenceVariableQueryWhereDistinct
    on QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QDistinct> {
  QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QAfterDistinct>
      distinctByEvidenceVariable() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarEvidenceVariableQueryProperty1
    on QueryBuilder<IsarEvidenceVariable, IsarEvidenceVariable, QProperty> {
  QueryBuilder<IsarEvidenceVariable, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEvidenceVariable, Map<String, dynamic>, QAfterProperty>
      evidenceVariableProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarEvidenceVariableQueryProperty2<R>
    on QueryBuilder<IsarEvidenceVariable, R, QAfterProperty> {
  QueryBuilder<IsarEvidenceVariable, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEvidenceVariable, (R, Map<String, dynamic>), QAfterProperty>
      evidenceVariableProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarEvidenceVariableQueryProperty3<R1, R2>
    on QueryBuilder<IsarEvidenceVariable, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarEvidenceVariable, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarEvidenceVariable, (R1, R2, Map<String, dynamic>),
      QOperations> evidenceVariableProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarExampleScenarioCollection on Isar {
  IsarCollection<int, IsarExampleScenario> get isarExampleScenarios =>
      this.collection();
}

const IsarExampleScenarioSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarExampleScenario',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'exampleScenario',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarExampleScenario>(
    serialize: serializeIsarExampleScenario,
    deserialize: deserializeIsarExampleScenario,
    deserializeProperty: deserializeIsarExampleScenarioProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarExampleScenario(
    IsarWriter writer, IsarExampleScenario object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.exampleScenario));
  return object.id;
}

@isarProtected
IsarExampleScenario deserializeIsarExampleScenario(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _exampleScenario;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _exampleScenario = json;
    } else {
      _exampleScenario = const <String, dynamic>{};
    }
  }
  final object = IsarExampleScenario(
    id: _id,
    exampleScenario: _exampleScenario,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarExampleScenarioProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarExampleScenarioQueryFilter on QueryBuilder<IsarExampleScenario,
    IsarExampleScenario, QFilterCondition> {
  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarExampleScenarioQueryObject on QueryBuilder<IsarExampleScenario,
    IsarExampleScenario, QFilterCondition> {}

extension IsarExampleScenarioQuerySortBy
    on QueryBuilder<IsarExampleScenario, IsarExampleScenario, QSortBy> {
  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      sortByExampleScenario() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      sortByExampleScenarioDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarExampleScenarioQuerySortThenBy
    on QueryBuilder<IsarExampleScenario, IsarExampleScenario, QSortThenBy> {
  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      thenByExampleScenario() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterSortBy>
      thenByExampleScenarioDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarExampleScenarioQueryWhereDistinct
    on QueryBuilder<IsarExampleScenario, IsarExampleScenario, QDistinct> {
  QueryBuilder<IsarExampleScenario, IsarExampleScenario, QAfterDistinct>
      distinctByExampleScenario() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarExampleScenarioQueryProperty1
    on QueryBuilder<IsarExampleScenario, IsarExampleScenario, QProperty> {
  QueryBuilder<IsarExampleScenario, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarExampleScenario, Map<String, dynamic>, QAfterProperty>
      exampleScenarioProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarExampleScenarioQueryProperty2<R>
    on QueryBuilder<IsarExampleScenario, R, QAfterProperty> {
  QueryBuilder<IsarExampleScenario, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarExampleScenario, (R, Map<String, dynamic>), QAfterProperty>
      exampleScenarioProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarExampleScenarioQueryProperty3<R1, R2>
    on QueryBuilder<IsarExampleScenario, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarExampleScenario, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarExampleScenario, (R1, R2, Map<String, dynamic>), QOperations>
      exampleScenarioProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarExplanationOfBenefitCollection on Isar {
  IsarCollection<int, IsarExplanationOfBenefit> get isarExplanationOfBenefits =>
      this.collection();
}

const IsarExplanationOfBenefitSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarExplanationOfBenefit',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'explanationOfBenefit',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarExplanationOfBenefit>(
    serialize: serializeIsarExplanationOfBenefit,
    deserialize: deserializeIsarExplanationOfBenefit,
    deserializeProperty: deserializeIsarExplanationOfBenefitProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarExplanationOfBenefit(
    IsarWriter writer, IsarExplanationOfBenefit object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.explanationOfBenefit));
  return object.id;
}

@isarProtected
IsarExplanationOfBenefit deserializeIsarExplanationOfBenefit(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _explanationOfBenefit;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _explanationOfBenefit = json;
    } else {
      _explanationOfBenefit = const <String, dynamic>{};
    }
  }
  final object = IsarExplanationOfBenefit(
    id: _id,
    explanationOfBenefit: _explanationOfBenefit,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarExplanationOfBenefitProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarExplanationOfBenefitQueryFilter on QueryBuilder<
    IsarExplanationOfBenefit, IsarExplanationOfBenefit, QFilterCondition> {
  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarExplanationOfBenefitQueryObject on QueryBuilder<
    IsarExplanationOfBenefit, IsarExplanationOfBenefit, QFilterCondition> {}

extension IsarExplanationOfBenefitQuerySortBy on QueryBuilder<
    IsarExplanationOfBenefit, IsarExplanationOfBenefit, QSortBy> {
  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      sortByExplanationOfBenefit() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      sortByExplanationOfBenefitDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarExplanationOfBenefitQuerySortThenBy on QueryBuilder<
    IsarExplanationOfBenefit, IsarExplanationOfBenefit, QSortThenBy> {
  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      thenByExplanationOfBenefit() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit, QAfterSortBy>
      thenByExplanationOfBenefitDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarExplanationOfBenefitQueryWhereDistinct on QueryBuilder<
    IsarExplanationOfBenefit, IsarExplanationOfBenefit, QDistinct> {
  QueryBuilder<IsarExplanationOfBenefit, IsarExplanationOfBenefit,
      QAfterDistinct> distinctByExplanationOfBenefit() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarExplanationOfBenefitQueryProperty1 on QueryBuilder<
    IsarExplanationOfBenefit, IsarExplanationOfBenefit, QProperty> {
  QueryBuilder<IsarExplanationOfBenefit, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, Map<String, dynamic>, QAfterProperty>
      explanationOfBenefitProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarExplanationOfBenefitQueryProperty2<R>
    on QueryBuilder<IsarExplanationOfBenefit, R, QAfterProperty> {
  QueryBuilder<IsarExplanationOfBenefit, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, (R, Map<String, dynamic>),
      QAfterProperty> explanationOfBenefitProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarExplanationOfBenefitQueryProperty3<R1, R2>
    on QueryBuilder<IsarExplanationOfBenefit, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarExplanationOfBenefit, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarExplanationOfBenefit, (R1, R2, Map<String, dynamic>),
      QOperations> explanationOfBenefitProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarFamilyMemberHistoryCollection on Isar {
  IsarCollection<int, IsarFamilyMemberHistory> get isarFamilyMemberHistorys =>
      this.collection();
}

const IsarFamilyMemberHistorySchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarFamilyMemberHistory',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'familyMemberHistory',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarFamilyMemberHistory>(
    serialize: serializeIsarFamilyMemberHistory,
    deserialize: deserializeIsarFamilyMemberHistory,
    deserializeProperty: deserializeIsarFamilyMemberHistoryProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarFamilyMemberHistory(
    IsarWriter writer, IsarFamilyMemberHistory object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.familyMemberHistory));
  return object.id;
}

@isarProtected
IsarFamilyMemberHistory deserializeIsarFamilyMemberHistory(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _familyMemberHistory;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _familyMemberHistory = json;
    } else {
      _familyMemberHistory = const <String, dynamic>{};
    }
  }
  final object = IsarFamilyMemberHistory(
    id: _id,
    familyMemberHistory: _familyMemberHistory,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarFamilyMemberHistoryProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarFamilyMemberHistoryQueryFilter on QueryBuilder<
    IsarFamilyMemberHistory, IsarFamilyMemberHistory, QFilterCondition> {
  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarFamilyMemberHistoryQueryObject on QueryBuilder<
    IsarFamilyMemberHistory, IsarFamilyMemberHistory, QFilterCondition> {}

extension IsarFamilyMemberHistoryQuerySortBy
    on QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QSortBy> {
  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      sortByFamilyMemberHistory() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      sortByFamilyMemberHistoryDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarFamilyMemberHistoryQuerySortThenBy on QueryBuilder<
    IsarFamilyMemberHistory, IsarFamilyMemberHistory, QSortThenBy> {
  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      thenByFamilyMemberHistory() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterSortBy>
      thenByFamilyMemberHistoryDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarFamilyMemberHistoryQueryWhereDistinct on QueryBuilder<
    IsarFamilyMemberHistory, IsarFamilyMemberHistory, QDistinct> {
  QueryBuilder<IsarFamilyMemberHistory, IsarFamilyMemberHistory, QAfterDistinct>
      distinctByFamilyMemberHistory() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarFamilyMemberHistoryQueryProperty1 on QueryBuilder<
    IsarFamilyMemberHistory, IsarFamilyMemberHistory, QProperty> {
  QueryBuilder<IsarFamilyMemberHistory, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, Map<String, dynamic>, QAfterProperty>
      familyMemberHistoryProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarFamilyMemberHistoryQueryProperty2<R>
    on QueryBuilder<IsarFamilyMemberHistory, R, QAfterProperty> {
  QueryBuilder<IsarFamilyMemberHistory, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, (R, Map<String, dynamic>),
      QAfterProperty> familyMemberHistoryProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarFamilyMemberHistoryQueryProperty3<R1, R2>
    on QueryBuilder<IsarFamilyMemberHistory, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarFamilyMemberHistory, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarFamilyMemberHistory, (R1, R2, Map<String, dynamic>),
      QOperations> familyMemberHistoryProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarFlagCollection on Isar {
  IsarCollection<int, IsarFlag> get isarFlags => this.collection();
}

const IsarFlagSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarFlag',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'flag',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarFlag>(
    serialize: serializeIsarFlag,
    deserialize: deserializeIsarFlag,
    deserializeProperty: deserializeIsarFlagProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarFlag(IsarWriter writer, IsarFlag object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.flag));
  return object.id;
}

@isarProtected
IsarFlag deserializeIsarFlag(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _flag;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _flag = json;
    } else {
      _flag = const <String, dynamic>{};
    }
  }
  final object = IsarFlag(
    id: _id,
    flag: _flag,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarFlagProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarFlagQueryFilter
    on QueryBuilder<IsarFlag, IsarFlag, QFilterCondition> {
  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarFlagQueryObject
    on QueryBuilder<IsarFlag, IsarFlag, QFilterCondition> {}

extension IsarFlagQuerySortBy on QueryBuilder<IsarFlag, IsarFlag, QSortBy> {
  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> sortByFlag() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> sortByFlagDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarFlagQuerySortThenBy
    on QueryBuilder<IsarFlag, IsarFlag, QSortThenBy> {
  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> thenByFlag() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarFlag, IsarFlag, QAfterSortBy> thenByFlagDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarFlagQueryWhereDistinct
    on QueryBuilder<IsarFlag, IsarFlag, QDistinct> {
  QueryBuilder<IsarFlag, IsarFlag, QAfterDistinct> distinctByFlag() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarFlagQueryProperty1
    on QueryBuilder<IsarFlag, IsarFlag, QProperty> {
  QueryBuilder<IsarFlag, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarFlag, Map<String, dynamic>, QAfterProperty> flagProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarFlagQueryProperty2<R>
    on QueryBuilder<IsarFlag, R, QAfterProperty> {
  QueryBuilder<IsarFlag, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarFlag, (R, Map<String, dynamic>), QAfterProperty>
      flagProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarFlagQueryProperty3<R1, R2>
    on QueryBuilder<IsarFlag, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarFlag, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarFlag, (R1, R2, Map<String, dynamic>), QOperations>
      flagProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarGoalCollection on Isar {
  IsarCollection<int, IsarGoal> get isarGoals => this.collection();
}

const IsarGoalSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarGoal',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'goal',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarGoal>(
    serialize: serializeIsarGoal,
    deserialize: deserializeIsarGoal,
    deserializeProperty: deserializeIsarGoalProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarGoal(IsarWriter writer, IsarGoal object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.goal));
  return object.id;
}

@isarProtected
IsarGoal deserializeIsarGoal(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _goal;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _goal = json;
    } else {
      _goal = const <String, dynamic>{};
    }
  }
  final object = IsarGoal(
    id: _id,
    goal: _goal,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarGoalProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarGoalQueryFilter
    on QueryBuilder<IsarGoal, IsarGoal, QFilterCondition> {
  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarGoalQueryObject
    on QueryBuilder<IsarGoal, IsarGoal, QFilterCondition> {}

extension IsarGoalQuerySortBy on QueryBuilder<IsarGoal, IsarGoal, QSortBy> {
  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> sortByGoal() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> sortByGoalDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarGoalQuerySortThenBy
    on QueryBuilder<IsarGoal, IsarGoal, QSortThenBy> {
  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> thenByGoal() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarGoal, IsarGoal, QAfterSortBy> thenByGoalDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarGoalQueryWhereDistinct
    on QueryBuilder<IsarGoal, IsarGoal, QDistinct> {
  QueryBuilder<IsarGoal, IsarGoal, QAfterDistinct> distinctByGoal() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarGoalQueryProperty1
    on QueryBuilder<IsarGoal, IsarGoal, QProperty> {
  QueryBuilder<IsarGoal, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGoal, Map<String, dynamic>, QAfterProperty> goalProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarGoalQueryProperty2<R>
    on QueryBuilder<IsarGoal, R, QAfterProperty> {
  QueryBuilder<IsarGoal, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGoal, (R, Map<String, dynamic>), QAfterProperty>
      goalProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarGoalQueryProperty3<R1, R2>
    on QueryBuilder<IsarGoal, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarGoal, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGoal, (R1, R2, Map<String, dynamic>), QOperations>
      goalProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarGraphDefinitionCollection on Isar {
  IsarCollection<int, IsarGraphDefinition> get isarGraphDefinitions =>
      this.collection();
}

const IsarGraphDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarGraphDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'graphDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarGraphDefinition>(
    serialize: serializeIsarGraphDefinition,
    deserialize: deserializeIsarGraphDefinition,
    deserializeProperty: deserializeIsarGraphDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarGraphDefinition(
    IsarWriter writer, IsarGraphDefinition object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.graphDefinition));
  return object.id;
}

@isarProtected
IsarGraphDefinition deserializeIsarGraphDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _graphDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _graphDefinition = json;
    } else {
      _graphDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarGraphDefinition(
    id: _id,
    graphDefinition: _graphDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarGraphDefinitionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarGraphDefinitionQueryFilter on QueryBuilder<IsarGraphDefinition,
    IsarGraphDefinition, QFilterCondition> {
  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarGraphDefinitionQueryObject on QueryBuilder<IsarGraphDefinition,
    IsarGraphDefinition, QFilterCondition> {}

extension IsarGraphDefinitionQuerySortBy
    on QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QSortBy> {
  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      sortByGraphDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      sortByGraphDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarGraphDefinitionQuerySortThenBy
    on QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QSortThenBy> {
  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      thenByGraphDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterSortBy>
      thenByGraphDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarGraphDefinitionQueryWhereDistinct
    on QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QDistinct> {
  QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QAfterDistinct>
      distinctByGraphDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarGraphDefinitionQueryProperty1
    on QueryBuilder<IsarGraphDefinition, IsarGraphDefinition, QProperty> {
  QueryBuilder<IsarGraphDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGraphDefinition, Map<String, dynamic>, QAfterProperty>
      graphDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarGraphDefinitionQueryProperty2<R>
    on QueryBuilder<IsarGraphDefinition, R, QAfterProperty> {
  QueryBuilder<IsarGraphDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGraphDefinition, (R, Map<String, dynamic>), QAfterProperty>
      graphDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarGraphDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarGraphDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarGraphDefinition, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGraphDefinition, (R1, R2, Map<String, dynamic>), QOperations>
      graphDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarGroupCollection on Isar {
  IsarCollection<int, IsarGroup> get isarGroups => this.collection();
}

const IsarGroupSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarGroup',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'group',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarGroup>(
    serialize: serializeIsarGroup,
    deserialize: deserializeIsarGroup,
    deserializeProperty: deserializeIsarGroupProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarGroup(IsarWriter writer, IsarGroup object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.group));
  return object.id;
}

@isarProtected
IsarGroup deserializeIsarGroup(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _group;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _group = json;
    } else {
      _group = const <String, dynamic>{};
    }
  }
  final object = IsarGroup(
    id: _id,
    group: _group,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarGroupProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarGroupQueryFilter
    on QueryBuilder<IsarGroup, IsarGroup, QFilterCondition> {
  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarGroupQueryObject
    on QueryBuilder<IsarGroup, IsarGroup, QFilterCondition> {}

extension IsarGroupQuerySortBy on QueryBuilder<IsarGroup, IsarGroup, QSortBy> {
  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> sortByGroup() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> sortByGroupDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarGroupQuerySortThenBy
    on QueryBuilder<IsarGroup, IsarGroup, QSortThenBy> {
  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> thenByGroup() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarGroup, IsarGroup, QAfterSortBy> thenByGroupDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarGroupQueryWhereDistinct
    on QueryBuilder<IsarGroup, IsarGroup, QDistinct> {
  QueryBuilder<IsarGroup, IsarGroup, QAfterDistinct> distinctByGroup() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarGroupQueryProperty1
    on QueryBuilder<IsarGroup, IsarGroup, QProperty> {
  QueryBuilder<IsarGroup, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGroup, Map<String, dynamic>, QAfterProperty>
      groupProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarGroupQueryProperty2<R>
    on QueryBuilder<IsarGroup, R, QAfterProperty> {
  QueryBuilder<IsarGroup, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGroup, (R, Map<String, dynamic>), QAfterProperty>
      groupProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarGroupQueryProperty3<R1, R2>
    on QueryBuilder<IsarGroup, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarGroup, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGroup, (R1, R2, Map<String, dynamic>), QOperations>
      groupProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarGuidanceResponseCollection on Isar {
  IsarCollection<int, IsarGuidanceResponse> get isarGuidanceResponses =>
      this.collection();
}

const IsarGuidanceResponseSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarGuidanceResponse',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'guidanceResponse',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarGuidanceResponse>(
    serialize: serializeIsarGuidanceResponse,
    deserialize: deserializeIsarGuidanceResponse,
    deserializeProperty: deserializeIsarGuidanceResponseProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarGuidanceResponse(
    IsarWriter writer, IsarGuidanceResponse object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.guidanceResponse));
  return object.id;
}

@isarProtected
IsarGuidanceResponse deserializeIsarGuidanceResponse(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _guidanceResponse;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _guidanceResponse = json;
    } else {
      _guidanceResponse = const <String, dynamic>{};
    }
  }
  final object = IsarGuidanceResponse(
    id: _id,
    guidanceResponse: _guidanceResponse,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarGuidanceResponseProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarGuidanceResponseQueryFilter on QueryBuilder<IsarGuidanceResponse,
    IsarGuidanceResponse, QFilterCondition> {
  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarGuidanceResponseQueryObject on QueryBuilder<IsarGuidanceResponse,
    IsarGuidanceResponse, QFilterCondition> {}

extension IsarGuidanceResponseQuerySortBy
    on QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QSortBy> {
  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      sortByGuidanceResponse() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      sortByGuidanceResponseDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarGuidanceResponseQuerySortThenBy
    on QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QSortThenBy> {
  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      thenByGuidanceResponse() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterSortBy>
      thenByGuidanceResponseDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarGuidanceResponseQueryWhereDistinct
    on QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QDistinct> {
  QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QAfterDistinct>
      distinctByGuidanceResponse() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarGuidanceResponseQueryProperty1
    on QueryBuilder<IsarGuidanceResponse, IsarGuidanceResponse, QProperty> {
  QueryBuilder<IsarGuidanceResponse, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGuidanceResponse, Map<String, dynamic>, QAfterProperty>
      guidanceResponseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarGuidanceResponseQueryProperty2<R>
    on QueryBuilder<IsarGuidanceResponse, R, QAfterProperty> {
  QueryBuilder<IsarGuidanceResponse, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGuidanceResponse, (R, Map<String, dynamic>), QAfterProperty>
      guidanceResponseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarGuidanceResponseQueryProperty3<R1, R2>
    on QueryBuilder<IsarGuidanceResponse, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarGuidanceResponse, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarGuidanceResponse, (R1, R2, Map<String, dynamic>),
      QOperations> guidanceResponseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarHealthcareServiceCollection on Isar {
  IsarCollection<int, IsarHealthcareService> get isarHealthcareServices =>
      this.collection();
}

const IsarHealthcareServiceSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarHealthcareService',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'healthcareService',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarHealthcareService>(
    serialize: serializeIsarHealthcareService,
    deserialize: deserializeIsarHealthcareService,
    deserializeProperty: deserializeIsarHealthcareServiceProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarHealthcareService(
    IsarWriter writer, IsarHealthcareService object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.healthcareService));
  return object.id;
}

@isarProtected
IsarHealthcareService deserializeIsarHealthcareService(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _healthcareService;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _healthcareService = json;
    } else {
      _healthcareService = const <String, dynamic>{};
    }
  }
  final object = IsarHealthcareService(
    id: _id,
    healthcareService: _healthcareService,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarHealthcareServiceProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarHealthcareServiceQueryFilter on QueryBuilder<
    IsarHealthcareService, IsarHealthcareService, QFilterCondition> {
  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarHealthcareServiceQueryObject on QueryBuilder<
    IsarHealthcareService, IsarHealthcareService, QFilterCondition> {}

extension IsarHealthcareServiceQuerySortBy
    on QueryBuilder<IsarHealthcareService, IsarHealthcareService, QSortBy> {
  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      sortByHealthcareService() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      sortByHealthcareServiceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarHealthcareServiceQuerySortThenBy
    on QueryBuilder<IsarHealthcareService, IsarHealthcareService, QSortThenBy> {
  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      thenByHealthcareService() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterSortBy>
      thenByHealthcareServiceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarHealthcareServiceQueryWhereDistinct
    on QueryBuilder<IsarHealthcareService, IsarHealthcareService, QDistinct> {
  QueryBuilder<IsarHealthcareService, IsarHealthcareService, QAfterDistinct>
      distinctByHealthcareService() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarHealthcareServiceQueryProperty1
    on QueryBuilder<IsarHealthcareService, IsarHealthcareService, QProperty> {
  QueryBuilder<IsarHealthcareService, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarHealthcareService, Map<String, dynamic>, QAfterProperty>
      healthcareServiceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarHealthcareServiceQueryProperty2<R>
    on QueryBuilder<IsarHealthcareService, R, QAfterProperty> {
  QueryBuilder<IsarHealthcareService, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarHealthcareService, (R, Map<String, dynamic>), QAfterProperty>
      healthcareServiceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarHealthcareServiceQueryProperty3<R1, R2>
    on QueryBuilder<IsarHealthcareService, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarHealthcareService, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarHealthcareService, (R1, R2, Map<String, dynamic>),
      QOperations> healthcareServiceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarImagingStudyCollection on Isar {
  IsarCollection<int, IsarImagingStudy> get isarImagingStudys =>
      this.collection();
}

const IsarImagingStudySchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarImagingStudy',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'imagingStudy',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarImagingStudy>(
    serialize: serializeIsarImagingStudy,
    deserialize: deserializeIsarImagingStudy,
    deserializeProperty: deserializeIsarImagingStudyProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarImagingStudy(IsarWriter writer, IsarImagingStudy object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.imagingStudy));
  return object.id;
}

@isarProtected
IsarImagingStudy deserializeIsarImagingStudy(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _imagingStudy;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _imagingStudy = json;
    } else {
      _imagingStudy = const <String, dynamic>{};
    }
  }
  final object = IsarImagingStudy(
    id: _id,
    imagingStudy: _imagingStudy,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarImagingStudyProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarImagingStudyQueryFilter
    on QueryBuilder<IsarImagingStudy, IsarImagingStudy, QFilterCondition> {
  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarImagingStudyQueryObject
    on QueryBuilder<IsarImagingStudy, IsarImagingStudy, QFilterCondition> {}

extension IsarImagingStudyQuerySortBy
    on QueryBuilder<IsarImagingStudy, IsarImagingStudy, QSortBy> {
  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy>
      sortByImagingStudy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy>
      sortByImagingStudyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarImagingStudyQuerySortThenBy
    on QueryBuilder<IsarImagingStudy, IsarImagingStudy, QSortThenBy> {
  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy>
      thenByImagingStudy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterSortBy>
      thenByImagingStudyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarImagingStudyQueryWhereDistinct
    on QueryBuilder<IsarImagingStudy, IsarImagingStudy, QDistinct> {
  QueryBuilder<IsarImagingStudy, IsarImagingStudy, QAfterDistinct>
      distinctByImagingStudy() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarImagingStudyQueryProperty1
    on QueryBuilder<IsarImagingStudy, IsarImagingStudy, QProperty> {
  QueryBuilder<IsarImagingStudy, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImagingStudy, Map<String, dynamic>, QAfterProperty>
      imagingStudyProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarImagingStudyQueryProperty2<R>
    on QueryBuilder<IsarImagingStudy, R, QAfterProperty> {
  QueryBuilder<IsarImagingStudy, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImagingStudy, (R, Map<String, dynamic>), QAfterProperty>
      imagingStudyProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarImagingStudyQueryProperty3<R1, R2>
    on QueryBuilder<IsarImagingStudy, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarImagingStudy, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImagingStudy, (R1, R2, Map<String, dynamic>), QOperations>
      imagingStudyProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarImmunizationCollection on Isar {
  IsarCollection<int, IsarImmunization> get isarImmunizations =>
      this.collection();
}

const IsarImmunizationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarImmunization',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'immunization',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarImmunization>(
    serialize: serializeIsarImmunization,
    deserialize: deserializeIsarImmunization,
    deserializeProperty: deserializeIsarImmunizationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarImmunization(IsarWriter writer, IsarImmunization object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.immunization));
  return object.id;
}

@isarProtected
IsarImmunization deserializeIsarImmunization(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _immunization;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _immunization = json;
    } else {
      _immunization = const <String, dynamic>{};
    }
  }
  final object = IsarImmunization(
    id: _id,
    immunization: _immunization,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarImmunizationProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarImmunizationQueryFilter
    on QueryBuilder<IsarImmunization, IsarImmunization, QFilterCondition> {
  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarImmunizationQueryObject
    on QueryBuilder<IsarImmunization, IsarImmunization, QFilterCondition> {}

extension IsarImmunizationQuerySortBy
    on QueryBuilder<IsarImmunization, IsarImmunization, QSortBy> {
  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy>
      sortByImmunization() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy>
      sortByImmunizationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarImmunizationQuerySortThenBy
    on QueryBuilder<IsarImmunization, IsarImmunization, QSortThenBy> {
  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy>
      thenByImmunization() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarImmunization, IsarImmunization, QAfterSortBy>
      thenByImmunizationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarImmunizationQueryWhereDistinct
    on QueryBuilder<IsarImmunization, IsarImmunization, QDistinct> {
  QueryBuilder<IsarImmunization, IsarImmunization, QAfterDistinct>
      distinctByImmunization() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarImmunizationQueryProperty1
    on QueryBuilder<IsarImmunization, IsarImmunization, QProperty> {
  QueryBuilder<IsarImmunization, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImmunization, Map<String, dynamic>, QAfterProperty>
      immunizationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarImmunizationQueryProperty2<R>
    on QueryBuilder<IsarImmunization, R, QAfterProperty> {
  QueryBuilder<IsarImmunization, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImmunization, (R, Map<String, dynamic>), QAfterProperty>
      immunizationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarImmunizationQueryProperty3<R1, R2>
    on QueryBuilder<IsarImmunization, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarImmunization, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImmunization, (R1, R2, Map<String, dynamic>), QOperations>
      immunizationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarImmunizationEvaluationCollection on Isar {
  IsarCollection<int, IsarImmunizationEvaluation>
      get isarImmunizationEvaluations => this.collection();
}

const IsarImmunizationEvaluationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarImmunizationEvaluation',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'immunizationEvaluation',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarImmunizationEvaluation>(
    serialize: serializeIsarImmunizationEvaluation,
    deserialize: deserializeIsarImmunizationEvaluation,
    deserializeProperty: deserializeIsarImmunizationEvaluationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarImmunizationEvaluation(
    IsarWriter writer, IsarImmunizationEvaluation object) {
  IsarCore.writeString(
      writer, 1, isarJsonEncode(object.immunizationEvaluation));
  return object.id;
}

@isarProtected
IsarImmunizationEvaluation deserializeIsarImmunizationEvaluation(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _immunizationEvaluation;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _immunizationEvaluation = json;
    } else {
      _immunizationEvaluation = const <String, dynamic>{};
    }
  }
  final object = IsarImmunizationEvaluation(
    id: _id,
    immunizationEvaluation: _immunizationEvaluation,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarImmunizationEvaluationProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarImmunizationEvaluationQueryFilter on QueryBuilder<
    IsarImmunizationEvaluation, IsarImmunizationEvaluation, QFilterCondition> {
  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarImmunizationEvaluationQueryObject on QueryBuilder<
    IsarImmunizationEvaluation, IsarImmunizationEvaluation, QFilterCondition> {}

extension IsarImmunizationEvaluationQuerySortBy on QueryBuilder<
    IsarImmunizationEvaluation, IsarImmunizationEvaluation, QSortBy> {
  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> sortByImmunizationEvaluation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> sortByImmunizationEvaluationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarImmunizationEvaluationQuerySortThenBy on QueryBuilder<
    IsarImmunizationEvaluation, IsarImmunizationEvaluation, QSortThenBy> {
  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> thenByImmunizationEvaluation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterSortBy> thenByImmunizationEvaluationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarImmunizationEvaluationQueryWhereDistinct on QueryBuilder<
    IsarImmunizationEvaluation, IsarImmunizationEvaluation, QDistinct> {
  QueryBuilder<IsarImmunizationEvaluation, IsarImmunizationEvaluation,
      QAfterDistinct> distinctByImmunizationEvaluation() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarImmunizationEvaluationQueryProperty1 on QueryBuilder<
    IsarImmunizationEvaluation, IsarImmunizationEvaluation, QProperty> {
  QueryBuilder<IsarImmunizationEvaluation, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, Map<String, dynamic>, QAfterProperty>
      immunizationEvaluationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarImmunizationEvaluationQueryProperty2<R>
    on QueryBuilder<IsarImmunizationEvaluation, R, QAfterProperty> {
  QueryBuilder<IsarImmunizationEvaluation, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, (R, Map<String, dynamic>),
      QAfterProperty> immunizationEvaluationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarImmunizationEvaluationQueryProperty3<R1, R2>
    on QueryBuilder<IsarImmunizationEvaluation, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarImmunizationEvaluation, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImmunizationEvaluation, (R1, R2, Map<String, dynamic>),
      QOperations> immunizationEvaluationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarImmunizationRecommendationCollection on Isar {
  IsarCollection<int, IsarImmunizationRecommendation>
      get isarImmunizationRecommendations => this.collection();
}

const IsarImmunizationRecommendationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarImmunizationRecommendation',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'immunizationRecommendation',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarImmunizationRecommendation>(
    serialize: serializeIsarImmunizationRecommendation,
    deserialize: deserializeIsarImmunizationRecommendation,
    deserializeProperty: deserializeIsarImmunizationRecommendationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarImmunizationRecommendation(
    IsarWriter writer, IsarImmunizationRecommendation object) {
  IsarCore.writeString(
      writer, 1, isarJsonEncode(object.immunizationRecommendation));
  return object.id;
}

@isarProtected
IsarImmunizationRecommendation deserializeIsarImmunizationRecommendation(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _immunizationRecommendation;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _immunizationRecommendation = json;
    } else {
      _immunizationRecommendation = const <String, dynamic>{};
    }
  }
  final object = IsarImmunizationRecommendation(
    id: _id,
    immunizationRecommendation: _immunizationRecommendation,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarImmunizationRecommendationProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarImmunizationRecommendationQueryFilter on QueryBuilder<
    IsarImmunizationRecommendation,
    IsarImmunizationRecommendation,
    QFilterCondition> {
  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarImmunizationRecommendationQueryObject on QueryBuilder<
    IsarImmunizationRecommendation,
    IsarImmunizationRecommendation,
    QFilterCondition> {}

extension IsarImmunizationRecommendationQuerySortBy on QueryBuilder<
    IsarImmunizationRecommendation, IsarImmunizationRecommendation, QSortBy> {
  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> sortByImmunizationRecommendation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> sortByImmunizationRecommendationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarImmunizationRecommendationQuerySortThenBy on QueryBuilder<
    IsarImmunizationRecommendation,
    IsarImmunizationRecommendation,
    QSortThenBy> {
  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> thenByImmunizationRecommendation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterSortBy> thenByImmunizationRecommendationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarImmunizationRecommendationQueryWhereDistinct on QueryBuilder<
    IsarImmunizationRecommendation, IsarImmunizationRecommendation, QDistinct> {
  QueryBuilder<IsarImmunizationRecommendation, IsarImmunizationRecommendation,
      QAfterDistinct> distinctByImmunizationRecommendation() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarImmunizationRecommendationQueryProperty1 on QueryBuilder<
    IsarImmunizationRecommendation, IsarImmunizationRecommendation, QProperty> {
  QueryBuilder<IsarImmunizationRecommendation, int, QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, Map<String, dynamic>,
      QAfterProperty> immunizationRecommendationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarImmunizationRecommendationQueryProperty2<R>
    on QueryBuilder<IsarImmunizationRecommendation, R, QAfterProperty> {
  QueryBuilder<IsarImmunizationRecommendation, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, (R, Map<String, dynamic>),
      QAfterProperty> immunizationRecommendationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarImmunizationRecommendationQueryProperty3<R1, R2>
    on QueryBuilder<IsarImmunizationRecommendation, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarImmunizationRecommendation, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImmunizationRecommendation, (R1, R2, Map<String, dynamic>),
      QOperations> immunizationRecommendationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarImplementationGuideCollection on Isar {
  IsarCollection<int, IsarImplementationGuide> get isarImplementationGuides =>
      this.collection();
}

const IsarImplementationGuideSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarImplementationGuide',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'implementationGuide',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarImplementationGuide>(
    serialize: serializeIsarImplementationGuide,
    deserialize: deserializeIsarImplementationGuide,
    deserializeProperty: deserializeIsarImplementationGuideProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarImplementationGuide(
    IsarWriter writer, IsarImplementationGuide object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.implementationGuide));
  return object.id;
}

@isarProtected
IsarImplementationGuide deserializeIsarImplementationGuide(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _implementationGuide;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _implementationGuide = json;
    } else {
      _implementationGuide = const <String, dynamic>{};
    }
  }
  final object = IsarImplementationGuide(
    id: _id,
    implementationGuide: _implementationGuide,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarImplementationGuideProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarImplementationGuideQueryFilter on QueryBuilder<
    IsarImplementationGuide, IsarImplementationGuide, QFilterCondition> {
  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarImplementationGuideQueryObject on QueryBuilder<
    IsarImplementationGuide, IsarImplementationGuide, QFilterCondition> {}

extension IsarImplementationGuideQuerySortBy
    on QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QSortBy> {
  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      sortByImplementationGuide() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      sortByImplementationGuideDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarImplementationGuideQuerySortThenBy on QueryBuilder<
    IsarImplementationGuide, IsarImplementationGuide, QSortThenBy> {
  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      thenByImplementationGuide() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterSortBy>
      thenByImplementationGuideDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarImplementationGuideQueryWhereDistinct on QueryBuilder<
    IsarImplementationGuide, IsarImplementationGuide, QDistinct> {
  QueryBuilder<IsarImplementationGuide, IsarImplementationGuide, QAfterDistinct>
      distinctByImplementationGuide() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarImplementationGuideQueryProperty1 on QueryBuilder<
    IsarImplementationGuide, IsarImplementationGuide, QProperty> {
  QueryBuilder<IsarImplementationGuide, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImplementationGuide, Map<String, dynamic>, QAfterProperty>
      implementationGuideProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarImplementationGuideQueryProperty2<R>
    on QueryBuilder<IsarImplementationGuide, R, QAfterProperty> {
  QueryBuilder<IsarImplementationGuide, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImplementationGuide, (R, Map<String, dynamic>),
      QAfterProperty> implementationGuideProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarImplementationGuideQueryProperty3<R1, R2>
    on QueryBuilder<IsarImplementationGuide, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarImplementationGuide, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarImplementationGuide, (R1, R2, Map<String, dynamic>),
      QOperations> implementationGuideProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarIngredientCollection on Isar {
  IsarCollection<int, IsarIngredient> get isarIngredients => this.collection();
}

const IsarIngredientSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarIngredient',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'ingredient',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarIngredient>(
    serialize: serializeIsarIngredient,
    deserialize: deserializeIsarIngredient,
    deserializeProperty: deserializeIsarIngredientProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarIngredient(IsarWriter writer, IsarIngredient object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.ingredient));
  return object.id;
}

@isarProtected
IsarIngredient deserializeIsarIngredient(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _ingredient;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _ingredient = json;
    } else {
      _ingredient = const <String, dynamic>{};
    }
  }
  final object = IsarIngredient(
    id: _id,
    ingredient: _ingredient,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarIngredientProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarIngredientQueryFilter
    on QueryBuilder<IsarIngredient, IsarIngredient, QFilterCondition> {
  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarIngredientQueryObject
    on QueryBuilder<IsarIngredient, IsarIngredient, QFilterCondition> {}

extension IsarIngredientQuerySortBy
    on QueryBuilder<IsarIngredient, IsarIngredient, QSortBy> {
  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy>
      sortByIngredient() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy>
      sortByIngredientDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarIngredientQuerySortThenBy
    on QueryBuilder<IsarIngredient, IsarIngredient, QSortThenBy> {
  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy>
      thenByIngredient() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarIngredient, IsarIngredient, QAfterSortBy>
      thenByIngredientDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarIngredientQueryWhereDistinct
    on QueryBuilder<IsarIngredient, IsarIngredient, QDistinct> {
  QueryBuilder<IsarIngredient, IsarIngredient, QAfterDistinct>
      distinctByIngredient() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarIngredientQueryProperty1
    on QueryBuilder<IsarIngredient, IsarIngredient, QProperty> {
  QueryBuilder<IsarIngredient, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarIngredient, Map<String, dynamic>, QAfterProperty>
      ingredientProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarIngredientQueryProperty2<R>
    on QueryBuilder<IsarIngredient, R, QAfterProperty> {
  QueryBuilder<IsarIngredient, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarIngredient, (R, Map<String, dynamic>), QAfterProperty>
      ingredientProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarIngredientQueryProperty3<R1, R2>
    on QueryBuilder<IsarIngredient, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarIngredient, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarIngredient, (R1, R2, Map<String, dynamic>), QOperations>
      ingredientProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarInsurancePlanCollection on Isar {
  IsarCollection<int, IsarInsurancePlan> get isarInsurancePlans =>
      this.collection();
}

const IsarInsurancePlanSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarInsurancePlan',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'insurancePlan',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarInsurancePlan>(
    serialize: serializeIsarInsurancePlan,
    deserialize: deserializeIsarInsurancePlan,
    deserializeProperty: deserializeIsarInsurancePlanProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarInsurancePlan(IsarWriter writer, IsarInsurancePlan object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.insurancePlan));
  return object.id;
}

@isarProtected
IsarInsurancePlan deserializeIsarInsurancePlan(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _insurancePlan;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _insurancePlan = json;
    } else {
      _insurancePlan = const <String, dynamic>{};
    }
  }
  final object = IsarInsurancePlan(
    id: _id,
    insurancePlan: _insurancePlan,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarInsurancePlanProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarInsurancePlanQueryFilter
    on QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QFilterCondition> {
  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarInsurancePlanQueryObject
    on QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QFilterCondition> {}

extension IsarInsurancePlanQuerySortBy
    on QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QSortBy> {
  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy>
      sortByInsurancePlan() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy>
      sortByInsurancePlanDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarInsurancePlanQuerySortThenBy
    on QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QSortThenBy> {
  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy>
      thenByInsurancePlan() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterSortBy>
      thenByInsurancePlanDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarInsurancePlanQueryWhereDistinct
    on QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QDistinct> {
  QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QAfterDistinct>
      distinctByInsurancePlan() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarInsurancePlanQueryProperty1
    on QueryBuilder<IsarInsurancePlan, IsarInsurancePlan, QProperty> {
  QueryBuilder<IsarInsurancePlan, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarInsurancePlan, Map<String, dynamic>, QAfterProperty>
      insurancePlanProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarInsurancePlanQueryProperty2<R>
    on QueryBuilder<IsarInsurancePlan, R, QAfterProperty> {
  QueryBuilder<IsarInsurancePlan, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarInsurancePlan, (R, Map<String, dynamic>), QAfterProperty>
      insurancePlanProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarInsurancePlanQueryProperty3<R1, R2>
    on QueryBuilder<IsarInsurancePlan, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarInsurancePlan, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarInsurancePlan, (R1, R2, Map<String, dynamic>), QOperations>
      insurancePlanProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarInvoiceCollection on Isar {
  IsarCollection<int, IsarInvoice> get isarInvoices => this.collection();
}

const IsarInvoiceSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarInvoice',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'invoice',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarInvoice>(
    serialize: serializeIsarInvoice,
    deserialize: deserializeIsarInvoice,
    deserializeProperty: deserializeIsarInvoiceProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarInvoice(IsarWriter writer, IsarInvoice object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.invoice));
  return object.id;
}

@isarProtected
IsarInvoice deserializeIsarInvoice(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _invoice;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _invoice = json;
    } else {
      _invoice = const <String, dynamic>{};
    }
  }
  final object = IsarInvoice(
    id: _id,
    invoice: _invoice,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarInvoiceProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarInvoiceQueryFilter
    on QueryBuilder<IsarInvoice, IsarInvoice, QFilterCondition> {
  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarInvoiceQueryObject
    on QueryBuilder<IsarInvoice, IsarInvoice, QFilterCondition> {}

extension IsarInvoiceQuerySortBy
    on QueryBuilder<IsarInvoice, IsarInvoice, QSortBy> {
  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> sortByInvoice() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> sortByInvoiceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarInvoiceQuerySortThenBy
    on QueryBuilder<IsarInvoice, IsarInvoice, QSortThenBy> {
  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> thenByInvoice() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarInvoice, IsarInvoice, QAfterSortBy> thenByInvoiceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarInvoiceQueryWhereDistinct
    on QueryBuilder<IsarInvoice, IsarInvoice, QDistinct> {
  QueryBuilder<IsarInvoice, IsarInvoice, QAfterDistinct> distinctByInvoice() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarInvoiceQueryProperty1
    on QueryBuilder<IsarInvoice, IsarInvoice, QProperty> {
  QueryBuilder<IsarInvoice, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarInvoice, Map<String, dynamic>, QAfterProperty>
      invoiceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarInvoiceQueryProperty2<R>
    on QueryBuilder<IsarInvoice, R, QAfterProperty> {
  QueryBuilder<IsarInvoice, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarInvoice, (R, Map<String, dynamic>), QAfterProperty>
      invoiceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarInvoiceQueryProperty3<R1, R2>
    on QueryBuilder<IsarInvoice, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarInvoice, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarInvoice, (R1, R2, Map<String, dynamic>), QOperations>
      invoiceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarLibraryCollection on Isar {
  IsarCollection<int, IsarLibrary> get isarLibrarys => this.collection();
}

const IsarLibrarySchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarLibrary',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'library',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarLibrary>(
    serialize: serializeIsarLibrary,
    deserialize: deserializeIsarLibrary,
    deserializeProperty: deserializeIsarLibraryProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarLibrary(IsarWriter writer, IsarLibrary object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.library));
  return object.id;
}

@isarProtected
IsarLibrary deserializeIsarLibrary(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _library;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _library = json;
    } else {
      _library = const <String, dynamic>{};
    }
  }
  final object = IsarLibrary(
    id: _id,
    library: _library,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarLibraryProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarLibraryQueryFilter
    on QueryBuilder<IsarLibrary, IsarLibrary, QFilterCondition> {
  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarLibraryQueryObject
    on QueryBuilder<IsarLibrary, IsarLibrary, QFilterCondition> {}

extension IsarLibraryQuerySortBy
    on QueryBuilder<IsarLibrary, IsarLibrary, QSortBy> {
  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> sortByLibrary() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> sortByLibraryDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarLibraryQuerySortThenBy
    on QueryBuilder<IsarLibrary, IsarLibrary, QSortThenBy> {
  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> thenByLibrary() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarLibrary, IsarLibrary, QAfterSortBy> thenByLibraryDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarLibraryQueryWhereDistinct
    on QueryBuilder<IsarLibrary, IsarLibrary, QDistinct> {
  QueryBuilder<IsarLibrary, IsarLibrary, QAfterDistinct> distinctByLibrary() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarLibraryQueryProperty1
    on QueryBuilder<IsarLibrary, IsarLibrary, QProperty> {
  QueryBuilder<IsarLibrary, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarLibrary, Map<String, dynamic>, QAfterProperty>
      libraryProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarLibraryQueryProperty2<R>
    on QueryBuilder<IsarLibrary, R, QAfterProperty> {
  QueryBuilder<IsarLibrary, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarLibrary, (R, Map<String, dynamic>), QAfterProperty>
      libraryProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarLibraryQueryProperty3<R1, R2>
    on QueryBuilder<IsarLibrary, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarLibrary, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarLibrary, (R1, R2, Map<String, dynamic>), QOperations>
      libraryProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarLinkageCollection on Isar {
  IsarCollection<int, IsarLinkage> get isarLinkages => this.collection();
}

const IsarLinkageSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarLinkage',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'linkage',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarLinkage>(
    serialize: serializeIsarLinkage,
    deserialize: deserializeIsarLinkage,
    deserializeProperty: deserializeIsarLinkageProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarLinkage(IsarWriter writer, IsarLinkage object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.linkage));
  return object.id;
}

@isarProtected
IsarLinkage deserializeIsarLinkage(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _linkage;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _linkage = json;
    } else {
      _linkage = const <String, dynamic>{};
    }
  }
  final object = IsarLinkage(
    id: _id,
    linkage: _linkage,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarLinkageProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarLinkageQueryFilter
    on QueryBuilder<IsarLinkage, IsarLinkage, QFilterCondition> {
  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarLinkageQueryObject
    on QueryBuilder<IsarLinkage, IsarLinkage, QFilterCondition> {}

extension IsarLinkageQuerySortBy
    on QueryBuilder<IsarLinkage, IsarLinkage, QSortBy> {
  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> sortByLinkage() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> sortByLinkageDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarLinkageQuerySortThenBy
    on QueryBuilder<IsarLinkage, IsarLinkage, QSortThenBy> {
  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> thenByLinkage() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarLinkage, IsarLinkage, QAfterSortBy> thenByLinkageDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarLinkageQueryWhereDistinct
    on QueryBuilder<IsarLinkage, IsarLinkage, QDistinct> {
  QueryBuilder<IsarLinkage, IsarLinkage, QAfterDistinct> distinctByLinkage() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarLinkageQueryProperty1
    on QueryBuilder<IsarLinkage, IsarLinkage, QProperty> {
  QueryBuilder<IsarLinkage, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarLinkage, Map<String, dynamic>, QAfterProperty>
      linkageProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarLinkageQueryProperty2<R>
    on QueryBuilder<IsarLinkage, R, QAfterProperty> {
  QueryBuilder<IsarLinkage, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarLinkage, (R, Map<String, dynamic>), QAfterProperty>
      linkageProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarLinkageQueryProperty3<R1, R2>
    on QueryBuilder<IsarLinkage, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarLinkage, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarLinkage, (R1, R2, Map<String, dynamic>), QOperations>
      linkageProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarListCollection on Isar {
  IsarCollection<int, IsarList> get isarLists => this.collection();
}

const IsarListSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarList',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'list',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarList>(
    serialize: serializeIsarList,
    deserialize: deserializeIsarList,
    deserializeProperty: deserializeIsarListProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarList(IsarWriter writer, IsarList object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.list));
  return object.id;
}

@isarProtected
IsarList deserializeIsarList(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _list;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _list = json;
    } else {
      _list = const <String, dynamic>{};
    }
  }
  final object = IsarList(
    id: _id,
    list: _list,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarListProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarListQueryFilter
    on QueryBuilder<IsarList, IsarList, QFilterCondition> {
  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarListQueryObject
    on QueryBuilder<IsarList, IsarList, QFilterCondition> {}

extension IsarListQuerySortBy on QueryBuilder<IsarList, IsarList, QSortBy> {
  QueryBuilder<IsarList, IsarList, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterSortBy> sortByList() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterSortBy> sortByListDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarListQuerySortThenBy
    on QueryBuilder<IsarList, IsarList, QSortThenBy> {
  QueryBuilder<IsarList, IsarList, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterSortBy> thenByList() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarList, IsarList, QAfterSortBy> thenByListDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarListQueryWhereDistinct
    on QueryBuilder<IsarList, IsarList, QDistinct> {
  QueryBuilder<IsarList, IsarList, QAfterDistinct> distinctByList() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarListQueryProperty1
    on QueryBuilder<IsarList, IsarList, QProperty> {
  QueryBuilder<IsarList, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarList, Map<String, dynamic>, QAfterProperty> listProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarListQueryProperty2<R>
    on QueryBuilder<IsarList, R, QAfterProperty> {
  QueryBuilder<IsarList, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarList, (R, Map<String, dynamic>), QAfterProperty>
      listProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarListQueryProperty3<R1, R2>
    on QueryBuilder<IsarList, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarList, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarList, (R1, R2, Map<String, dynamic>), QOperations>
      listProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarLocationCollection on Isar {
  IsarCollection<int, IsarLocation> get isarLocations => this.collection();
}

const IsarLocationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarLocation',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'location',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarLocation>(
    serialize: serializeIsarLocation,
    deserialize: deserializeIsarLocation,
    deserializeProperty: deserializeIsarLocationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarLocation(IsarWriter writer, IsarLocation object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.location));
  return object.id;
}

@isarProtected
IsarLocation deserializeIsarLocation(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _location;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _location = json;
    } else {
      _location = const <String, dynamic>{};
    }
  }
  final object = IsarLocation(
    id: _id,
    location: _location,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarLocationProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarLocationQueryFilter
    on QueryBuilder<IsarLocation, IsarLocation, QFilterCondition> {
  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarLocationQueryObject
    on QueryBuilder<IsarLocation, IsarLocation, QFilterCondition> {}

extension IsarLocationQuerySortBy
    on QueryBuilder<IsarLocation, IsarLocation, QSortBy> {
  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> sortByLocation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> sortByLocationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarLocationQuerySortThenBy
    on QueryBuilder<IsarLocation, IsarLocation, QSortThenBy> {
  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> thenByLocation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarLocation, IsarLocation, QAfterSortBy> thenByLocationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarLocationQueryWhereDistinct
    on QueryBuilder<IsarLocation, IsarLocation, QDistinct> {
  QueryBuilder<IsarLocation, IsarLocation, QAfterDistinct>
      distinctByLocation() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarLocationQueryProperty1
    on QueryBuilder<IsarLocation, IsarLocation, QProperty> {
  QueryBuilder<IsarLocation, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarLocation, Map<String, dynamic>, QAfterProperty>
      locationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarLocationQueryProperty2<R>
    on QueryBuilder<IsarLocation, R, QAfterProperty> {
  QueryBuilder<IsarLocation, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarLocation, (R, Map<String, dynamic>), QAfterProperty>
      locationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarLocationQueryProperty3<R1, R2>
    on QueryBuilder<IsarLocation, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarLocation, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarLocation, (R1, R2, Map<String, dynamic>), QOperations>
      locationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarManufacturedItemDefinitionCollection on Isar {
  IsarCollection<int, IsarManufacturedItemDefinition>
      get isarManufacturedItemDefinitions => this.collection();
}

const IsarManufacturedItemDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarManufacturedItemDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'manufacturedItemDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarManufacturedItemDefinition>(
    serialize: serializeIsarManufacturedItemDefinition,
    deserialize: deserializeIsarManufacturedItemDefinition,
    deserializeProperty: deserializeIsarManufacturedItemDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarManufacturedItemDefinition(
    IsarWriter writer, IsarManufacturedItemDefinition object) {
  IsarCore.writeString(
      writer, 1, isarJsonEncode(object.manufacturedItemDefinition));
  return object.id;
}

@isarProtected
IsarManufacturedItemDefinition deserializeIsarManufacturedItemDefinition(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _manufacturedItemDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _manufacturedItemDefinition = json;
    } else {
      _manufacturedItemDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarManufacturedItemDefinition(
    id: _id,
    manufacturedItemDefinition: _manufacturedItemDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarManufacturedItemDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarManufacturedItemDefinitionQueryFilter on QueryBuilder<
    IsarManufacturedItemDefinition,
    IsarManufacturedItemDefinition,
    QFilterCondition> {
  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarManufacturedItemDefinitionQueryObject on QueryBuilder<
    IsarManufacturedItemDefinition,
    IsarManufacturedItemDefinition,
    QFilterCondition> {}

extension IsarManufacturedItemDefinitionQuerySortBy on QueryBuilder<
    IsarManufacturedItemDefinition, IsarManufacturedItemDefinition, QSortBy> {
  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> sortByManufacturedItemDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> sortByManufacturedItemDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarManufacturedItemDefinitionQuerySortThenBy on QueryBuilder<
    IsarManufacturedItemDefinition,
    IsarManufacturedItemDefinition,
    QSortThenBy> {
  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> thenByManufacturedItemDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterSortBy> thenByManufacturedItemDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarManufacturedItemDefinitionQueryWhereDistinct on QueryBuilder<
    IsarManufacturedItemDefinition, IsarManufacturedItemDefinition, QDistinct> {
  QueryBuilder<IsarManufacturedItemDefinition, IsarManufacturedItemDefinition,
      QAfterDistinct> distinctByManufacturedItemDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarManufacturedItemDefinitionQueryProperty1 on QueryBuilder<
    IsarManufacturedItemDefinition, IsarManufacturedItemDefinition, QProperty> {
  QueryBuilder<IsarManufacturedItemDefinition, int, QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, Map<String, dynamic>,
      QAfterProperty> manufacturedItemDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarManufacturedItemDefinitionQueryProperty2<R>
    on QueryBuilder<IsarManufacturedItemDefinition, R, QAfterProperty> {
  QueryBuilder<IsarManufacturedItemDefinition, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, (R, Map<String, dynamic>),
      QAfterProperty> manufacturedItemDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarManufacturedItemDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarManufacturedItemDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarManufacturedItemDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarManufacturedItemDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> manufacturedItemDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMeasureCollection on Isar {
  IsarCollection<int, IsarMeasure> get isarMeasures => this.collection();
}

const IsarMeasureSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMeasure',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'measure',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarMeasure>(
    serialize: serializeIsarMeasure,
    deserialize: deserializeIsarMeasure,
    deserializeProperty: deserializeIsarMeasureProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMeasure(IsarWriter writer, IsarMeasure object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.measure));
  return object.id;
}

@isarProtected
IsarMeasure deserializeIsarMeasure(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _measure;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _measure = json;
    } else {
      _measure = const <String, dynamic>{};
    }
  }
  final object = IsarMeasure(
    id: _id,
    measure: _measure,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarMeasureProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarMeasureQueryFilter
    on QueryBuilder<IsarMeasure, IsarMeasure, QFilterCondition> {
  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarMeasureQueryObject
    on QueryBuilder<IsarMeasure, IsarMeasure, QFilterCondition> {}

extension IsarMeasureQuerySortBy
    on QueryBuilder<IsarMeasure, IsarMeasure, QSortBy> {
  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> sortByMeasure() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> sortByMeasureDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMeasureQuerySortThenBy
    on QueryBuilder<IsarMeasure, IsarMeasure, QSortThenBy> {
  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> thenByMeasure() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMeasure, IsarMeasure, QAfterSortBy> thenByMeasureDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMeasureQueryWhereDistinct
    on QueryBuilder<IsarMeasure, IsarMeasure, QDistinct> {
  QueryBuilder<IsarMeasure, IsarMeasure, QAfterDistinct> distinctByMeasure() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarMeasureQueryProperty1
    on QueryBuilder<IsarMeasure, IsarMeasure, QProperty> {
  QueryBuilder<IsarMeasure, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMeasure, Map<String, dynamic>, QAfterProperty>
      measureProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMeasureQueryProperty2<R>
    on QueryBuilder<IsarMeasure, R, QAfterProperty> {
  QueryBuilder<IsarMeasure, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMeasure, (R, Map<String, dynamic>), QAfterProperty>
      measureProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMeasureQueryProperty3<R1, R2>
    on QueryBuilder<IsarMeasure, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMeasure, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMeasure, (R1, R2, Map<String, dynamic>), QOperations>
      measureProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMeasureReportCollection on Isar {
  IsarCollection<int, IsarMeasureReport> get isarMeasureReports =>
      this.collection();
}

const IsarMeasureReportSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMeasureReport',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'measureReport',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarMeasureReport>(
    serialize: serializeIsarMeasureReport,
    deserialize: deserializeIsarMeasureReport,
    deserializeProperty: deserializeIsarMeasureReportProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMeasureReport(IsarWriter writer, IsarMeasureReport object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.measureReport));
  return object.id;
}

@isarProtected
IsarMeasureReport deserializeIsarMeasureReport(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _measureReport;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _measureReport = json;
    } else {
      _measureReport = const <String, dynamic>{};
    }
  }
  final object = IsarMeasureReport(
    id: _id,
    measureReport: _measureReport,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarMeasureReportProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarMeasureReportQueryFilter
    on QueryBuilder<IsarMeasureReport, IsarMeasureReport, QFilterCondition> {
  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarMeasureReportQueryObject
    on QueryBuilder<IsarMeasureReport, IsarMeasureReport, QFilterCondition> {}

extension IsarMeasureReportQuerySortBy
    on QueryBuilder<IsarMeasureReport, IsarMeasureReport, QSortBy> {
  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy>
      sortByMeasureReport() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy>
      sortByMeasureReportDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMeasureReportQuerySortThenBy
    on QueryBuilder<IsarMeasureReport, IsarMeasureReport, QSortThenBy> {
  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy>
      thenByMeasureReport() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterSortBy>
      thenByMeasureReportDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMeasureReportQueryWhereDistinct
    on QueryBuilder<IsarMeasureReport, IsarMeasureReport, QDistinct> {
  QueryBuilder<IsarMeasureReport, IsarMeasureReport, QAfterDistinct>
      distinctByMeasureReport() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarMeasureReportQueryProperty1
    on QueryBuilder<IsarMeasureReport, IsarMeasureReport, QProperty> {
  QueryBuilder<IsarMeasureReport, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMeasureReport, Map<String, dynamic>, QAfterProperty>
      measureReportProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMeasureReportQueryProperty2<R>
    on QueryBuilder<IsarMeasureReport, R, QAfterProperty> {
  QueryBuilder<IsarMeasureReport, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMeasureReport, (R, Map<String, dynamic>), QAfterProperty>
      measureReportProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMeasureReportQueryProperty3<R1, R2>
    on QueryBuilder<IsarMeasureReport, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMeasureReport, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMeasureReport, (R1, R2, Map<String, dynamic>), QOperations>
      measureReportProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMediaCollection on Isar {
  IsarCollection<int, IsarMedia> get isarMedias => this.collection();
}

const IsarMediaSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMedia',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'media',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarMedia>(
    serialize: serializeIsarMedia,
    deserialize: deserializeIsarMedia,
    deserializeProperty: deserializeIsarMediaProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMedia(IsarWriter writer, IsarMedia object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.media));
  return object.id;
}

@isarProtected
IsarMedia deserializeIsarMedia(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _media;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _media = json;
    } else {
      _media = const <String, dynamic>{};
    }
  }
  final object = IsarMedia(
    id: _id,
    media: _media,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarMediaProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarMediaQueryFilter
    on QueryBuilder<IsarMedia, IsarMedia, QFilterCondition> {
  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarMediaQueryObject
    on QueryBuilder<IsarMedia, IsarMedia, QFilterCondition> {}

extension IsarMediaQuerySortBy on QueryBuilder<IsarMedia, IsarMedia, QSortBy> {
  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> sortByMedia() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> sortByMediaDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMediaQuerySortThenBy
    on QueryBuilder<IsarMedia, IsarMedia, QSortThenBy> {
  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> thenByMedia() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMedia, IsarMedia, QAfterSortBy> thenByMediaDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMediaQueryWhereDistinct
    on QueryBuilder<IsarMedia, IsarMedia, QDistinct> {
  QueryBuilder<IsarMedia, IsarMedia, QAfterDistinct> distinctByMedia() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarMediaQueryProperty1
    on QueryBuilder<IsarMedia, IsarMedia, QProperty> {
  QueryBuilder<IsarMedia, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedia, Map<String, dynamic>, QAfterProperty>
      mediaProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMediaQueryProperty2<R>
    on QueryBuilder<IsarMedia, R, QAfterProperty> {
  QueryBuilder<IsarMedia, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedia, (R, Map<String, dynamic>), QAfterProperty>
      mediaProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMediaQueryProperty3<R1, R2>
    on QueryBuilder<IsarMedia, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMedia, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedia, (R1, R2, Map<String, dynamic>), QOperations>
      mediaProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMedicationCollection on Isar {
  IsarCollection<int, IsarMedication> get isarMedications => this.collection();
}

const IsarMedicationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMedication',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'medication',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarMedication>(
    serialize: serializeIsarMedication,
    deserialize: deserializeIsarMedication,
    deserializeProperty: deserializeIsarMedicationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMedication(IsarWriter writer, IsarMedication object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.medication));
  return object.id;
}

@isarProtected
IsarMedication deserializeIsarMedication(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _medication;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _medication = json;
    } else {
      _medication = const <String, dynamic>{};
    }
  }
  final object = IsarMedication(
    id: _id,
    medication: _medication,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarMedicationProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarMedicationQueryFilter
    on QueryBuilder<IsarMedication, IsarMedication, QFilterCondition> {
  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarMedicationQueryObject
    on QueryBuilder<IsarMedication, IsarMedication, QFilterCondition> {}

extension IsarMedicationQuerySortBy
    on QueryBuilder<IsarMedication, IsarMedication, QSortBy> {
  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy>
      sortByMedication() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy>
      sortByMedicationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMedicationQuerySortThenBy
    on QueryBuilder<IsarMedication, IsarMedication, QSortThenBy> {
  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy>
      thenByMedication() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMedication, IsarMedication, QAfterSortBy>
      thenByMedicationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMedicationQueryWhereDistinct
    on QueryBuilder<IsarMedication, IsarMedication, QDistinct> {
  QueryBuilder<IsarMedication, IsarMedication, QAfterDistinct>
      distinctByMedication() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarMedicationQueryProperty1
    on QueryBuilder<IsarMedication, IsarMedication, QProperty> {
  QueryBuilder<IsarMedication, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedication, Map<String, dynamic>, QAfterProperty>
      medicationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMedicationQueryProperty2<R>
    on QueryBuilder<IsarMedication, R, QAfterProperty> {
  QueryBuilder<IsarMedication, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedication, (R, Map<String, dynamic>), QAfterProperty>
      medicationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMedicationQueryProperty3<R1, R2>
    on QueryBuilder<IsarMedication, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMedication, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedication, (R1, R2, Map<String, dynamic>), QOperations>
      medicationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMedicationAdministrationCollection on Isar {
  IsarCollection<int, IsarMedicationAdministration>
      get isarMedicationAdministrations => this.collection();
}

const IsarMedicationAdministrationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMedicationAdministration',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'medicationAdministration',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarMedicationAdministration>(
    serialize: serializeIsarMedicationAdministration,
    deserialize: deserializeIsarMedicationAdministration,
    deserializeProperty: deserializeIsarMedicationAdministrationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMedicationAdministration(
    IsarWriter writer, IsarMedicationAdministration object) {
  IsarCore.writeString(
      writer, 1, isarJsonEncode(object.medicationAdministration));
  return object.id;
}

@isarProtected
IsarMedicationAdministration deserializeIsarMedicationAdministration(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _medicationAdministration;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _medicationAdministration = json;
    } else {
      _medicationAdministration = const <String, dynamic>{};
    }
  }
  final object = IsarMedicationAdministration(
    id: _id,
    medicationAdministration: _medicationAdministration,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarMedicationAdministrationProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarMedicationAdministrationQueryFilter on QueryBuilder<
    IsarMedicationAdministration,
    IsarMedicationAdministration,
    QFilterCondition> {
  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarMedicationAdministrationQueryObject on QueryBuilder<
    IsarMedicationAdministration,
    IsarMedicationAdministration,
    QFilterCondition> {}

extension IsarMedicationAdministrationQuerySortBy on QueryBuilder<
    IsarMedicationAdministration, IsarMedicationAdministration, QSortBy> {
  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> sortByMedicationAdministration() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> sortByMedicationAdministrationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMedicationAdministrationQuerySortThenBy on QueryBuilder<
    IsarMedicationAdministration, IsarMedicationAdministration, QSortThenBy> {
  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> thenByMedicationAdministration() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterSortBy> thenByMedicationAdministrationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMedicationAdministrationQueryWhereDistinct on QueryBuilder<
    IsarMedicationAdministration, IsarMedicationAdministration, QDistinct> {
  QueryBuilder<IsarMedicationAdministration, IsarMedicationAdministration,
      QAfterDistinct> distinctByMedicationAdministration() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarMedicationAdministrationQueryProperty1 on QueryBuilder<
    IsarMedicationAdministration, IsarMedicationAdministration, QProperty> {
  QueryBuilder<IsarMedicationAdministration, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationAdministration, Map<String, dynamic>,
      QAfterProperty> medicationAdministrationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMedicationAdministrationQueryProperty2<R>
    on QueryBuilder<IsarMedicationAdministration, R, QAfterProperty> {
  QueryBuilder<IsarMedicationAdministration, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationAdministration, (R, Map<String, dynamic>),
      QAfterProperty> medicationAdministrationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMedicationAdministrationQueryProperty3<R1, R2>
    on QueryBuilder<IsarMedicationAdministration, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMedicationAdministration, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationAdministration, (R1, R2, Map<String, dynamic>),
      QOperations> medicationAdministrationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMedicationDispenseCollection on Isar {
  IsarCollection<int, IsarMedicationDispense> get isarMedicationDispenses =>
      this.collection();
}

const IsarMedicationDispenseSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMedicationDispense',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'medicationDispense',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarMedicationDispense>(
    serialize: serializeIsarMedicationDispense,
    deserialize: deserializeIsarMedicationDispense,
    deserializeProperty: deserializeIsarMedicationDispenseProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMedicationDispense(
    IsarWriter writer, IsarMedicationDispense object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.medicationDispense));
  return object.id;
}

@isarProtected
IsarMedicationDispense deserializeIsarMedicationDispense(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _medicationDispense;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _medicationDispense = json;
    } else {
      _medicationDispense = const <String, dynamic>{};
    }
  }
  final object = IsarMedicationDispense(
    id: _id,
    medicationDispense: _medicationDispense,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarMedicationDispenseProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarMedicationDispenseQueryFilter on QueryBuilder<
    IsarMedicationDispense, IsarMedicationDispense, QFilterCondition> {
  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarMedicationDispenseQueryObject on QueryBuilder<
    IsarMedicationDispense, IsarMedicationDispense, QFilterCondition> {}

extension IsarMedicationDispenseQuerySortBy
    on QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QSortBy> {
  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      sortByMedicationDispense() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      sortByMedicationDispenseDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMedicationDispenseQuerySortThenBy on QueryBuilder<
    IsarMedicationDispense, IsarMedicationDispense, QSortThenBy> {
  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      thenByMedicationDispense() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterSortBy>
      thenByMedicationDispenseDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMedicationDispenseQueryWhereDistinct
    on QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QDistinct> {
  QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QAfterDistinct>
      distinctByMedicationDispense() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarMedicationDispenseQueryProperty1
    on QueryBuilder<IsarMedicationDispense, IsarMedicationDispense, QProperty> {
  QueryBuilder<IsarMedicationDispense, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationDispense, Map<String, dynamic>, QAfterProperty>
      medicationDispenseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMedicationDispenseQueryProperty2<R>
    on QueryBuilder<IsarMedicationDispense, R, QAfterProperty> {
  QueryBuilder<IsarMedicationDispense, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationDispense, (R, Map<String, dynamic>),
      QAfterProperty> medicationDispenseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMedicationDispenseQueryProperty3<R1, R2>
    on QueryBuilder<IsarMedicationDispense, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMedicationDispense, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationDispense, (R1, R2, Map<String, dynamic>),
      QOperations> medicationDispenseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMedicationKnowledgeCollection on Isar {
  IsarCollection<int, IsarMedicationKnowledge> get isarMedicationKnowledges =>
      this.collection();
}

const IsarMedicationKnowledgeSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMedicationKnowledge',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'medicationKnowledge',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarMedicationKnowledge>(
    serialize: serializeIsarMedicationKnowledge,
    deserialize: deserializeIsarMedicationKnowledge,
    deserializeProperty: deserializeIsarMedicationKnowledgeProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMedicationKnowledge(
    IsarWriter writer, IsarMedicationKnowledge object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.medicationKnowledge));
  return object.id;
}

@isarProtected
IsarMedicationKnowledge deserializeIsarMedicationKnowledge(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _medicationKnowledge;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _medicationKnowledge = json;
    } else {
      _medicationKnowledge = const <String, dynamic>{};
    }
  }
  final object = IsarMedicationKnowledge(
    id: _id,
    medicationKnowledge: _medicationKnowledge,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarMedicationKnowledgeProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarMedicationKnowledgeQueryFilter on QueryBuilder<
    IsarMedicationKnowledge, IsarMedicationKnowledge, QFilterCondition> {
  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarMedicationKnowledgeQueryObject on QueryBuilder<
    IsarMedicationKnowledge, IsarMedicationKnowledge, QFilterCondition> {}

extension IsarMedicationKnowledgeQuerySortBy
    on QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QSortBy> {
  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      sortByMedicationKnowledge() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      sortByMedicationKnowledgeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMedicationKnowledgeQuerySortThenBy on QueryBuilder<
    IsarMedicationKnowledge, IsarMedicationKnowledge, QSortThenBy> {
  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      thenByMedicationKnowledge() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterSortBy>
      thenByMedicationKnowledgeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMedicationKnowledgeQueryWhereDistinct on QueryBuilder<
    IsarMedicationKnowledge, IsarMedicationKnowledge, QDistinct> {
  QueryBuilder<IsarMedicationKnowledge, IsarMedicationKnowledge, QAfterDistinct>
      distinctByMedicationKnowledge() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarMedicationKnowledgeQueryProperty1 on QueryBuilder<
    IsarMedicationKnowledge, IsarMedicationKnowledge, QProperty> {
  QueryBuilder<IsarMedicationKnowledge, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, Map<String, dynamic>, QAfterProperty>
      medicationKnowledgeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMedicationKnowledgeQueryProperty2<R>
    on QueryBuilder<IsarMedicationKnowledge, R, QAfterProperty> {
  QueryBuilder<IsarMedicationKnowledge, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, (R, Map<String, dynamic>),
      QAfterProperty> medicationKnowledgeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMedicationKnowledgeQueryProperty3<R1, R2>
    on QueryBuilder<IsarMedicationKnowledge, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMedicationKnowledge, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationKnowledge, (R1, R2, Map<String, dynamic>),
      QOperations> medicationKnowledgeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMedicationRequestCollection on Isar {
  IsarCollection<int, IsarMedicationRequest> get isarMedicationRequests =>
      this.collection();
}

const IsarMedicationRequestSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMedicationRequest',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'medicationRequest',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarMedicationRequest>(
    serialize: serializeIsarMedicationRequest,
    deserialize: deserializeIsarMedicationRequest,
    deserializeProperty: deserializeIsarMedicationRequestProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMedicationRequest(
    IsarWriter writer, IsarMedicationRequest object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.medicationRequest));
  return object.id;
}

@isarProtected
IsarMedicationRequest deserializeIsarMedicationRequest(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _medicationRequest;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _medicationRequest = json;
    } else {
      _medicationRequest = const <String, dynamic>{};
    }
  }
  final object = IsarMedicationRequest(
    id: _id,
    medicationRequest: _medicationRequest,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarMedicationRequestProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarMedicationRequestQueryFilter on QueryBuilder<
    IsarMedicationRequest, IsarMedicationRequest, QFilterCondition> {
  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarMedicationRequestQueryObject on QueryBuilder<
    IsarMedicationRequest, IsarMedicationRequest, QFilterCondition> {}

extension IsarMedicationRequestQuerySortBy
    on QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QSortBy> {
  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      sortByMedicationRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      sortByMedicationRequestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMedicationRequestQuerySortThenBy
    on QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QSortThenBy> {
  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      thenByMedicationRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterSortBy>
      thenByMedicationRequestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMedicationRequestQueryWhereDistinct
    on QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QDistinct> {
  QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QAfterDistinct>
      distinctByMedicationRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarMedicationRequestQueryProperty1
    on QueryBuilder<IsarMedicationRequest, IsarMedicationRequest, QProperty> {
  QueryBuilder<IsarMedicationRequest, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationRequest, Map<String, dynamic>, QAfterProperty>
      medicationRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMedicationRequestQueryProperty2<R>
    on QueryBuilder<IsarMedicationRequest, R, QAfterProperty> {
  QueryBuilder<IsarMedicationRequest, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationRequest, (R, Map<String, dynamic>), QAfterProperty>
      medicationRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMedicationRequestQueryProperty3<R1, R2>
    on QueryBuilder<IsarMedicationRequest, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMedicationRequest, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationRequest, (R1, R2, Map<String, dynamic>),
      QOperations> medicationRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMedicationStatementCollection on Isar {
  IsarCollection<int, IsarMedicationStatement> get isarMedicationStatements =>
      this.collection();
}

const IsarMedicationStatementSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMedicationStatement',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'medicationStatement',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarMedicationStatement>(
    serialize: serializeIsarMedicationStatement,
    deserialize: deserializeIsarMedicationStatement,
    deserializeProperty: deserializeIsarMedicationStatementProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMedicationStatement(
    IsarWriter writer, IsarMedicationStatement object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.medicationStatement));
  return object.id;
}

@isarProtected
IsarMedicationStatement deserializeIsarMedicationStatement(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _medicationStatement;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _medicationStatement = json;
    } else {
      _medicationStatement = const <String, dynamic>{};
    }
  }
  final object = IsarMedicationStatement(
    id: _id,
    medicationStatement: _medicationStatement,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarMedicationStatementProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarMedicationStatementQueryFilter on QueryBuilder<
    IsarMedicationStatement, IsarMedicationStatement, QFilterCondition> {
  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarMedicationStatementQueryObject on QueryBuilder<
    IsarMedicationStatement, IsarMedicationStatement, QFilterCondition> {}

extension IsarMedicationStatementQuerySortBy
    on QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QSortBy> {
  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      sortByMedicationStatement() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      sortByMedicationStatementDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMedicationStatementQuerySortThenBy on QueryBuilder<
    IsarMedicationStatement, IsarMedicationStatement, QSortThenBy> {
  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      thenByMedicationStatement() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterSortBy>
      thenByMedicationStatementDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMedicationStatementQueryWhereDistinct on QueryBuilder<
    IsarMedicationStatement, IsarMedicationStatement, QDistinct> {
  QueryBuilder<IsarMedicationStatement, IsarMedicationStatement, QAfterDistinct>
      distinctByMedicationStatement() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarMedicationStatementQueryProperty1 on QueryBuilder<
    IsarMedicationStatement, IsarMedicationStatement, QProperty> {
  QueryBuilder<IsarMedicationStatement, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationStatement, Map<String, dynamic>, QAfterProperty>
      medicationStatementProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMedicationStatementQueryProperty2<R>
    on QueryBuilder<IsarMedicationStatement, R, QAfterProperty> {
  QueryBuilder<IsarMedicationStatement, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationStatement, (R, Map<String, dynamic>),
      QAfterProperty> medicationStatementProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMedicationStatementQueryProperty3<R1, R2>
    on QueryBuilder<IsarMedicationStatement, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMedicationStatement, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicationStatement, (R1, R2, Map<String, dynamic>),
      QOperations> medicationStatementProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMedicinalProductDefinitionCollection on Isar {
  IsarCollection<int, IsarMedicinalProductDefinition>
      get isarMedicinalProductDefinitions => this.collection();
}

const IsarMedicinalProductDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMedicinalProductDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'medicinalProductDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarMedicinalProductDefinition>(
    serialize: serializeIsarMedicinalProductDefinition,
    deserialize: deserializeIsarMedicinalProductDefinition,
    deserializeProperty: deserializeIsarMedicinalProductDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMedicinalProductDefinition(
    IsarWriter writer, IsarMedicinalProductDefinition object) {
  IsarCore.writeString(
      writer, 1, isarJsonEncode(object.medicinalProductDefinition));
  return object.id;
}

@isarProtected
IsarMedicinalProductDefinition deserializeIsarMedicinalProductDefinition(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _medicinalProductDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _medicinalProductDefinition = json;
    } else {
      _medicinalProductDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarMedicinalProductDefinition(
    id: _id,
    medicinalProductDefinition: _medicinalProductDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarMedicinalProductDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarMedicinalProductDefinitionQueryFilter on QueryBuilder<
    IsarMedicinalProductDefinition,
    IsarMedicinalProductDefinition,
    QFilterCondition> {
  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarMedicinalProductDefinitionQueryObject on QueryBuilder<
    IsarMedicinalProductDefinition,
    IsarMedicinalProductDefinition,
    QFilterCondition> {}

extension IsarMedicinalProductDefinitionQuerySortBy on QueryBuilder<
    IsarMedicinalProductDefinition, IsarMedicinalProductDefinition, QSortBy> {
  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> sortByMedicinalProductDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> sortByMedicinalProductDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMedicinalProductDefinitionQuerySortThenBy on QueryBuilder<
    IsarMedicinalProductDefinition,
    IsarMedicinalProductDefinition,
    QSortThenBy> {
  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> thenByMedicinalProductDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterSortBy> thenByMedicinalProductDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMedicinalProductDefinitionQueryWhereDistinct on QueryBuilder<
    IsarMedicinalProductDefinition, IsarMedicinalProductDefinition, QDistinct> {
  QueryBuilder<IsarMedicinalProductDefinition, IsarMedicinalProductDefinition,
      QAfterDistinct> distinctByMedicinalProductDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarMedicinalProductDefinitionQueryProperty1 on QueryBuilder<
    IsarMedicinalProductDefinition, IsarMedicinalProductDefinition, QProperty> {
  QueryBuilder<IsarMedicinalProductDefinition, int, QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, Map<String, dynamic>,
      QAfterProperty> medicinalProductDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMedicinalProductDefinitionQueryProperty2<R>
    on QueryBuilder<IsarMedicinalProductDefinition, R, QAfterProperty> {
  QueryBuilder<IsarMedicinalProductDefinition, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, (R, Map<String, dynamic>),
      QAfterProperty> medicinalProductDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMedicinalProductDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarMedicinalProductDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMedicinalProductDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMedicinalProductDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> medicinalProductDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMessageDefinitionCollection on Isar {
  IsarCollection<int, IsarMessageDefinition> get isarMessageDefinitions =>
      this.collection();
}

const IsarMessageDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMessageDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'messageDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarMessageDefinition>(
    serialize: serializeIsarMessageDefinition,
    deserialize: deserializeIsarMessageDefinition,
    deserializeProperty: deserializeIsarMessageDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMessageDefinition(
    IsarWriter writer, IsarMessageDefinition object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.messageDefinition));
  return object.id;
}

@isarProtected
IsarMessageDefinition deserializeIsarMessageDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _messageDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _messageDefinition = json;
    } else {
      _messageDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarMessageDefinition(
    id: _id,
    messageDefinition: _messageDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarMessageDefinitionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarMessageDefinitionQueryFilter on QueryBuilder<
    IsarMessageDefinition, IsarMessageDefinition, QFilterCondition> {
  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarMessageDefinitionQueryObject on QueryBuilder<
    IsarMessageDefinition, IsarMessageDefinition, QFilterCondition> {}

extension IsarMessageDefinitionQuerySortBy
    on QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QSortBy> {
  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      sortByMessageDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      sortByMessageDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMessageDefinitionQuerySortThenBy
    on QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QSortThenBy> {
  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      thenByMessageDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterSortBy>
      thenByMessageDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMessageDefinitionQueryWhereDistinct
    on QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QDistinct> {
  QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QAfterDistinct>
      distinctByMessageDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarMessageDefinitionQueryProperty1
    on QueryBuilder<IsarMessageDefinition, IsarMessageDefinition, QProperty> {
  QueryBuilder<IsarMessageDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMessageDefinition, Map<String, dynamic>, QAfterProperty>
      messageDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMessageDefinitionQueryProperty2<R>
    on QueryBuilder<IsarMessageDefinition, R, QAfterProperty> {
  QueryBuilder<IsarMessageDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMessageDefinition, (R, Map<String, dynamic>), QAfterProperty>
      messageDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMessageDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarMessageDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMessageDefinition, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMessageDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> messageDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMessageHeaderCollection on Isar {
  IsarCollection<int, IsarMessageHeader> get isarMessageHeaders =>
      this.collection();
}

const IsarMessageHeaderSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMessageHeader',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'messageHeader',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarMessageHeader>(
    serialize: serializeIsarMessageHeader,
    deserialize: deserializeIsarMessageHeader,
    deserializeProperty: deserializeIsarMessageHeaderProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMessageHeader(IsarWriter writer, IsarMessageHeader object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.messageHeader));
  return object.id;
}

@isarProtected
IsarMessageHeader deserializeIsarMessageHeader(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _messageHeader;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _messageHeader = json;
    } else {
      _messageHeader = const <String, dynamic>{};
    }
  }
  final object = IsarMessageHeader(
    id: _id,
    messageHeader: _messageHeader,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarMessageHeaderProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarMessageHeaderQueryFilter
    on QueryBuilder<IsarMessageHeader, IsarMessageHeader, QFilterCondition> {
  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarMessageHeaderQueryObject
    on QueryBuilder<IsarMessageHeader, IsarMessageHeader, QFilterCondition> {}

extension IsarMessageHeaderQuerySortBy
    on QueryBuilder<IsarMessageHeader, IsarMessageHeader, QSortBy> {
  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy>
      sortByMessageHeader() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy>
      sortByMessageHeaderDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMessageHeaderQuerySortThenBy
    on QueryBuilder<IsarMessageHeader, IsarMessageHeader, QSortThenBy> {
  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy>
      thenByMessageHeader() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterSortBy>
      thenByMessageHeaderDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMessageHeaderQueryWhereDistinct
    on QueryBuilder<IsarMessageHeader, IsarMessageHeader, QDistinct> {
  QueryBuilder<IsarMessageHeader, IsarMessageHeader, QAfterDistinct>
      distinctByMessageHeader() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarMessageHeaderQueryProperty1
    on QueryBuilder<IsarMessageHeader, IsarMessageHeader, QProperty> {
  QueryBuilder<IsarMessageHeader, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMessageHeader, Map<String, dynamic>, QAfterProperty>
      messageHeaderProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMessageHeaderQueryProperty2<R>
    on QueryBuilder<IsarMessageHeader, R, QAfterProperty> {
  QueryBuilder<IsarMessageHeader, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMessageHeader, (R, Map<String, dynamic>), QAfterProperty>
      messageHeaderProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMessageHeaderQueryProperty3<R1, R2>
    on QueryBuilder<IsarMessageHeader, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMessageHeader, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMessageHeader, (R1, R2, Map<String, dynamic>), QOperations>
      messageHeaderProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarMolecularSequenceCollection on Isar {
  IsarCollection<int, IsarMolecularSequence> get isarMolecularSequences =>
      this.collection();
}

const IsarMolecularSequenceSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarMolecularSequence',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'molecularSequence',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarMolecularSequence>(
    serialize: serializeIsarMolecularSequence,
    deserialize: deserializeIsarMolecularSequence,
    deserializeProperty: deserializeIsarMolecularSequenceProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarMolecularSequence(
    IsarWriter writer, IsarMolecularSequence object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.molecularSequence));
  return object.id;
}

@isarProtected
IsarMolecularSequence deserializeIsarMolecularSequence(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _molecularSequence;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _molecularSequence = json;
    } else {
      _molecularSequence = const <String, dynamic>{};
    }
  }
  final object = IsarMolecularSequence(
    id: _id,
    molecularSequence: _molecularSequence,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarMolecularSequenceProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarMolecularSequenceQueryFilter on QueryBuilder<
    IsarMolecularSequence, IsarMolecularSequence, QFilterCondition> {
  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarMolecularSequenceQueryObject on QueryBuilder<
    IsarMolecularSequence, IsarMolecularSequence, QFilterCondition> {}

extension IsarMolecularSequenceQuerySortBy
    on QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QSortBy> {
  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      sortByMolecularSequence() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      sortByMolecularSequenceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMolecularSequenceQuerySortThenBy
    on QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QSortThenBy> {
  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      thenByMolecularSequence() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterSortBy>
      thenByMolecularSequenceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarMolecularSequenceQueryWhereDistinct
    on QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QDistinct> {
  QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QAfterDistinct>
      distinctByMolecularSequence() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarMolecularSequenceQueryProperty1
    on QueryBuilder<IsarMolecularSequence, IsarMolecularSequence, QProperty> {
  QueryBuilder<IsarMolecularSequence, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMolecularSequence, Map<String, dynamic>, QAfterProperty>
      molecularSequenceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMolecularSequenceQueryProperty2<R>
    on QueryBuilder<IsarMolecularSequence, R, QAfterProperty> {
  QueryBuilder<IsarMolecularSequence, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMolecularSequence, (R, Map<String, dynamic>), QAfterProperty>
      molecularSequenceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarMolecularSequenceQueryProperty3<R1, R2>
    on QueryBuilder<IsarMolecularSequence, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarMolecularSequence, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarMolecularSequence, (R1, R2, Map<String, dynamic>),
      QOperations> molecularSequenceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarNamingSystemCollection on Isar {
  IsarCollection<int, IsarNamingSystem> get isarNamingSystems =>
      this.collection();
}

const IsarNamingSystemSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarNamingSystem',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'namingSystem',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarNamingSystem>(
    serialize: serializeIsarNamingSystem,
    deserialize: deserializeIsarNamingSystem,
    deserializeProperty: deserializeIsarNamingSystemProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarNamingSystem(IsarWriter writer, IsarNamingSystem object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.namingSystem));
  return object.id;
}

@isarProtected
IsarNamingSystem deserializeIsarNamingSystem(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _namingSystem;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _namingSystem = json;
    } else {
      _namingSystem = const <String, dynamic>{};
    }
  }
  final object = IsarNamingSystem(
    id: _id,
    namingSystem: _namingSystem,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarNamingSystemProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarNamingSystemQueryFilter
    on QueryBuilder<IsarNamingSystem, IsarNamingSystem, QFilterCondition> {
  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarNamingSystemQueryObject
    on QueryBuilder<IsarNamingSystem, IsarNamingSystem, QFilterCondition> {}

extension IsarNamingSystemQuerySortBy
    on QueryBuilder<IsarNamingSystem, IsarNamingSystem, QSortBy> {
  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy>
      sortByNamingSystem() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy>
      sortByNamingSystemDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarNamingSystemQuerySortThenBy
    on QueryBuilder<IsarNamingSystem, IsarNamingSystem, QSortThenBy> {
  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy>
      thenByNamingSystem() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterSortBy>
      thenByNamingSystemDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarNamingSystemQueryWhereDistinct
    on QueryBuilder<IsarNamingSystem, IsarNamingSystem, QDistinct> {
  QueryBuilder<IsarNamingSystem, IsarNamingSystem, QAfterDistinct>
      distinctByNamingSystem() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarNamingSystemQueryProperty1
    on QueryBuilder<IsarNamingSystem, IsarNamingSystem, QProperty> {
  QueryBuilder<IsarNamingSystem, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarNamingSystem, Map<String, dynamic>, QAfterProperty>
      namingSystemProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarNamingSystemQueryProperty2<R>
    on QueryBuilder<IsarNamingSystem, R, QAfterProperty> {
  QueryBuilder<IsarNamingSystem, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarNamingSystem, (R, Map<String, dynamic>), QAfterProperty>
      namingSystemProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarNamingSystemQueryProperty3<R1, R2>
    on QueryBuilder<IsarNamingSystem, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarNamingSystem, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarNamingSystem, (R1, R2, Map<String, dynamic>), QOperations>
      namingSystemProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarNutritionOrderCollection on Isar {
  IsarCollection<int, IsarNutritionOrder> get isarNutritionOrders =>
      this.collection();
}

const IsarNutritionOrderSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarNutritionOrder',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'nutritionOrder',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarNutritionOrder>(
    serialize: serializeIsarNutritionOrder,
    deserialize: deserializeIsarNutritionOrder,
    deserializeProperty: deserializeIsarNutritionOrderProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarNutritionOrder(IsarWriter writer, IsarNutritionOrder object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.nutritionOrder));
  return object.id;
}

@isarProtected
IsarNutritionOrder deserializeIsarNutritionOrder(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _nutritionOrder;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _nutritionOrder = json;
    } else {
      _nutritionOrder = const <String, dynamic>{};
    }
  }
  final object = IsarNutritionOrder(
    id: _id,
    nutritionOrder: _nutritionOrder,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarNutritionOrderProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarNutritionOrderQueryFilter
    on QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QFilterCondition> {
  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarNutritionOrderQueryObject
    on QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QFilterCondition> {}

extension IsarNutritionOrderQuerySortBy
    on QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QSortBy> {
  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      sortByNutritionOrder() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      sortByNutritionOrderDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarNutritionOrderQuerySortThenBy
    on QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QSortThenBy> {
  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      thenByNutritionOrder() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterSortBy>
      thenByNutritionOrderDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarNutritionOrderQueryWhereDistinct
    on QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QDistinct> {
  QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QAfterDistinct>
      distinctByNutritionOrder() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarNutritionOrderQueryProperty1
    on QueryBuilder<IsarNutritionOrder, IsarNutritionOrder, QProperty> {
  QueryBuilder<IsarNutritionOrder, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarNutritionOrder, Map<String, dynamic>, QAfterProperty>
      nutritionOrderProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarNutritionOrderQueryProperty2<R>
    on QueryBuilder<IsarNutritionOrder, R, QAfterProperty> {
  QueryBuilder<IsarNutritionOrder, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarNutritionOrder, (R, Map<String, dynamic>), QAfterProperty>
      nutritionOrderProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarNutritionOrderQueryProperty3<R1, R2>
    on QueryBuilder<IsarNutritionOrder, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarNutritionOrder, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarNutritionOrder, (R1, R2, Map<String, dynamic>), QOperations>
      nutritionOrderProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarNutritionProductCollection on Isar {
  IsarCollection<int, IsarNutritionProduct> get isarNutritionProducts =>
      this.collection();
}

const IsarNutritionProductSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarNutritionProduct',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'nutritionProduct',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarNutritionProduct>(
    serialize: serializeIsarNutritionProduct,
    deserialize: deserializeIsarNutritionProduct,
    deserializeProperty: deserializeIsarNutritionProductProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarNutritionProduct(
    IsarWriter writer, IsarNutritionProduct object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.nutritionProduct));
  return object.id;
}

@isarProtected
IsarNutritionProduct deserializeIsarNutritionProduct(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _nutritionProduct;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _nutritionProduct = json;
    } else {
      _nutritionProduct = const <String, dynamic>{};
    }
  }
  final object = IsarNutritionProduct(
    id: _id,
    nutritionProduct: _nutritionProduct,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarNutritionProductProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarNutritionProductQueryFilter on QueryBuilder<IsarNutritionProduct,
    IsarNutritionProduct, QFilterCondition> {
  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarNutritionProductQueryObject on QueryBuilder<IsarNutritionProduct,
    IsarNutritionProduct, QFilterCondition> {}

extension IsarNutritionProductQuerySortBy
    on QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QSortBy> {
  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      sortByNutritionProduct() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      sortByNutritionProductDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarNutritionProductQuerySortThenBy
    on QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QSortThenBy> {
  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      thenByNutritionProduct() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterSortBy>
      thenByNutritionProductDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarNutritionProductQueryWhereDistinct
    on QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QDistinct> {
  QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QAfterDistinct>
      distinctByNutritionProduct() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarNutritionProductQueryProperty1
    on QueryBuilder<IsarNutritionProduct, IsarNutritionProduct, QProperty> {
  QueryBuilder<IsarNutritionProduct, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarNutritionProduct, Map<String, dynamic>, QAfterProperty>
      nutritionProductProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarNutritionProductQueryProperty2<R>
    on QueryBuilder<IsarNutritionProduct, R, QAfterProperty> {
  QueryBuilder<IsarNutritionProduct, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarNutritionProduct, (R, Map<String, dynamic>), QAfterProperty>
      nutritionProductProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarNutritionProductQueryProperty3<R1, R2>
    on QueryBuilder<IsarNutritionProduct, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarNutritionProduct, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarNutritionProduct, (R1, R2, Map<String, dynamic>),
      QOperations> nutritionProductProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarObservationCollection on Isar {
  IsarCollection<int, IsarObservation> get isarObservations =>
      this.collection();
}

const IsarObservationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarObservation',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'observation',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarObservation>(
    serialize: serializeIsarObservation,
    deserialize: deserializeIsarObservation,
    deserializeProperty: deserializeIsarObservationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarObservation(IsarWriter writer, IsarObservation object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.observation));
  return object.id;
}

@isarProtected
IsarObservation deserializeIsarObservation(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _observation;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _observation = json;
    } else {
      _observation = const <String, dynamic>{};
    }
  }
  final object = IsarObservation(
    id: _id,
    observation: _observation,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarObservationProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarObservationQueryFilter
    on QueryBuilder<IsarObservation, IsarObservation, QFilterCondition> {
  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarObservationQueryObject
    on QueryBuilder<IsarObservation, IsarObservation, QFilterCondition> {}

extension IsarObservationQuerySortBy
    on QueryBuilder<IsarObservation, IsarObservation, QSortBy> {
  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy>
      sortByObservation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy>
      sortByObservationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarObservationQuerySortThenBy
    on QueryBuilder<IsarObservation, IsarObservation, QSortThenBy> {
  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy>
      thenByObservation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarObservation, IsarObservation, QAfterSortBy>
      thenByObservationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarObservationQueryWhereDistinct
    on QueryBuilder<IsarObservation, IsarObservation, QDistinct> {
  QueryBuilder<IsarObservation, IsarObservation, QAfterDistinct>
      distinctByObservation() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarObservationQueryProperty1
    on QueryBuilder<IsarObservation, IsarObservation, QProperty> {
  QueryBuilder<IsarObservation, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarObservation, Map<String, dynamic>, QAfterProperty>
      observationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarObservationQueryProperty2<R>
    on QueryBuilder<IsarObservation, R, QAfterProperty> {
  QueryBuilder<IsarObservation, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarObservation, (R, Map<String, dynamic>), QAfterProperty>
      observationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarObservationQueryProperty3<R1, R2>
    on QueryBuilder<IsarObservation, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarObservation, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarObservation, (R1, R2, Map<String, dynamic>), QOperations>
      observationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarObservationDefinitionCollection on Isar {
  IsarCollection<int, IsarObservationDefinition>
      get isarObservationDefinitions => this.collection();
}

const IsarObservationDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarObservationDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'observationDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarObservationDefinition>(
    serialize: serializeIsarObservationDefinition,
    deserialize: deserializeIsarObservationDefinition,
    deserializeProperty: deserializeIsarObservationDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarObservationDefinition(
    IsarWriter writer, IsarObservationDefinition object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.observationDefinition));
  return object.id;
}

@isarProtected
IsarObservationDefinition deserializeIsarObservationDefinition(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _observationDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _observationDefinition = json;
    } else {
      _observationDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarObservationDefinition(
    id: _id,
    observationDefinition: _observationDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarObservationDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarObservationDefinitionQueryFilter on QueryBuilder<
    IsarObservationDefinition, IsarObservationDefinition, QFilterCondition> {
  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarObservationDefinitionQueryObject on QueryBuilder<
    IsarObservationDefinition, IsarObservationDefinition, QFilterCondition> {}

extension IsarObservationDefinitionQuerySortBy on QueryBuilder<
    IsarObservationDefinition, IsarObservationDefinition, QSortBy> {
  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> sortByObservationDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> sortByObservationDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarObservationDefinitionQuerySortThenBy on QueryBuilder<
    IsarObservationDefinition, IsarObservationDefinition, QSortThenBy> {
  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> thenByObservationDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterSortBy> thenByObservationDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarObservationDefinitionQueryWhereDistinct on QueryBuilder<
    IsarObservationDefinition, IsarObservationDefinition, QDistinct> {
  QueryBuilder<IsarObservationDefinition, IsarObservationDefinition,
      QAfterDistinct> distinctByObservationDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarObservationDefinitionQueryProperty1 on QueryBuilder<
    IsarObservationDefinition, IsarObservationDefinition, QProperty> {
  QueryBuilder<IsarObservationDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarObservationDefinition, Map<String, dynamic>, QAfterProperty>
      observationDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarObservationDefinitionQueryProperty2<R>
    on QueryBuilder<IsarObservationDefinition, R, QAfterProperty> {
  QueryBuilder<IsarObservationDefinition, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarObservationDefinition, (R, Map<String, dynamic>),
      QAfterProperty> observationDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarObservationDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarObservationDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarObservationDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarObservationDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> observationDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarOperationDefinitionCollection on Isar {
  IsarCollection<int, IsarOperationDefinition> get isarOperationDefinitions =>
      this.collection();
}

const IsarOperationDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarOperationDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'operationDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarOperationDefinition>(
    serialize: serializeIsarOperationDefinition,
    deserialize: deserializeIsarOperationDefinition,
    deserializeProperty: deserializeIsarOperationDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarOperationDefinition(
    IsarWriter writer, IsarOperationDefinition object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.operationDefinition));
  return object.id;
}

@isarProtected
IsarOperationDefinition deserializeIsarOperationDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _operationDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _operationDefinition = json;
    } else {
      _operationDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarOperationDefinition(
    id: _id,
    operationDefinition: _operationDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarOperationDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarOperationDefinitionQueryFilter on QueryBuilder<
    IsarOperationDefinition, IsarOperationDefinition, QFilterCondition> {
  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarOperationDefinitionQueryObject on QueryBuilder<
    IsarOperationDefinition, IsarOperationDefinition, QFilterCondition> {}

extension IsarOperationDefinitionQuerySortBy
    on QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QSortBy> {
  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      sortByOperationDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      sortByOperationDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarOperationDefinitionQuerySortThenBy on QueryBuilder<
    IsarOperationDefinition, IsarOperationDefinition, QSortThenBy> {
  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      thenByOperationDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterSortBy>
      thenByOperationDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarOperationDefinitionQueryWhereDistinct on QueryBuilder<
    IsarOperationDefinition, IsarOperationDefinition, QDistinct> {
  QueryBuilder<IsarOperationDefinition, IsarOperationDefinition, QAfterDistinct>
      distinctByOperationDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarOperationDefinitionQueryProperty1 on QueryBuilder<
    IsarOperationDefinition, IsarOperationDefinition, QProperty> {
  QueryBuilder<IsarOperationDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOperationDefinition, Map<String, dynamic>, QAfterProperty>
      operationDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarOperationDefinitionQueryProperty2<R>
    on QueryBuilder<IsarOperationDefinition, R, QAfterProperty> {
  QueryBuilder<IsarOperationDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOperationDefinition, (R, Map<String, dynamic>),
      QAfterProperty> operationDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarOperationDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarOperationDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarOperationDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOperationDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> operationDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarOperationOutcomeCollection on Isar {
  IsarCollection<int, IsarOperationOutcome> get isarOperationOutcomes =>
      this.collection();
}

const IsarOperationOutcomeSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarOperationOutcome',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'operationOutcome',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarOperationOutcome>(
    serialize: serializeIsarOperationOutcome,
    deserialize: deserializeIsarOperationOutcome,
    deserializeProperty: deserializeIsarOperationOutcomeProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarOperationOutcome(
    IsarWriter writer, IsarOperationOutcome object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.operationOutcome));
  return object.id;
}

@isarProtected
IsarOperationOutcome deserializeIsarOperationOutcome(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _operationOutcome;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _operationOutcome = json;
    } else {
      _operationOutcome = const <String, dynamic>{};
    }
  }
  final object = IsarOperationOutcome(
    id: _id,
    operationOutcome: _operationOutcome,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarOperationOutcomeProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarOperationOutcomeQueryFilter on QueryBuilder<IsarOperationOutcome,
    IsarOperationOutcome, QFilterCondition> {
  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarOperationOutcomeQueryObject on QueryBuilder<IsarOperationOutcome,
    IsarOperationOutcome, QFilterCondition> {}

extension IsarOperationOutcomeQuerySortBy
    on QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QSortBy> {
  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      sortByOperationOutcome() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      sortByOperationOutcomeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarOperationOutcomeQuerySortThenBy
    on QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QSortThenBy> {
  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      thenByOperationOutcome() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterSortBy>
      thenByOperationOutcomeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarOperationOutcomeQueryWhereDistinct
    on QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QDistinct> {
  QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QAfterDistinct>
      distinctByOperationOutcome() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarOperationOutcomeQueryProperty1
    on QueryBuilder<IsarOperationOutcome, IsarOperationOutcome, QProperty> {
  QueryBuilder<IsarOperationOutcome, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOperationOutcome, Map<String, dynamic>, QAfterProperty>
      operationOutcomeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarOperationOutcomeQueryProperty2<R>
    on QueryBuilder<IsarOperationOutcome, R, QAfterProperty> {
  QueryBuilder<IsarOperationOutcome, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOperationOutcome, (R, Map<String, dynamic>), QAfterProperty>
      operationOutcomeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarOperationOutcomeQueryProperty3<R1, R2>
    on QueryBuilder<IsarOperationOutcome, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarOperationOutcome, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOperationOutcome, (R1, R2, Map<String, dynamic>),
      QOperations> operationOutcomeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarOrganizationCollection on Isar {
  IsarCollection<int, IsarOrganization> get isarOrganizations =>
      this.collection();
}

const IsarOrganizationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarOrganization',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'organization',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarOrganization>(
    serialize: serializeIsarOrganization,
    deserialize: deserializeIsarOrganization,
    deserializeProperty: deserializeIsarOrganizationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarOrganization(IsarWriter writer, IsarOrganization object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.organization));
  return object.id;
}

@isarProtected
IsarOrganization deserializeIsarOrganization(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _organization;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _organization = json;
    } else {
      _organization = const <String, dynamic>{};
    }
  }
  final object = IsarOrganization(
    id: _id,
    organization: _organization,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarOrganizationProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarOrganizationQueryFilter
    on QueryBuilder<IsarOrganization, IsarOrganization, QFilterCondition> {
  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarOrganizationQueryObject
    on QueryBuilder<IsarOrganization, IsarOrganization, QFilterCondition> {}

extension IsarOrganizationQuerySortBy
    on QueryBuilder<IsarOrganization, IsarOrganization, QSortBy> {
  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy>
      sortByOrganization() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy>
      sortByOrganizationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarOrganizationQuerySortThenBy
    on QueryBuilder<IsarOrganization, IsarOrganization, QSortThenBy> {
  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy>
      thenByOrganization() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarOrganization, IsarOrganization, QAfterSortBy>
      thenByOrganizationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarOrganizationQueryWhereDistinct
    on QueryBuilder<IsarOrganization, IsarOrganization, QDistinct> {
  QueryBuilder<IsarOrganization, IsarOrganization, QAfterDistinct>
      distinctByOrganization() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarOrganizationQueryProperty1
    on QueryBuilder<IsarOrganization, IsarOrganization, QProperty> {
  QueryBuilder<IsarOrganization, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOrganization, Map<String, dynamic>, QAfterProperty>
      organizationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarOrganizationQueryProperty2<R>
    on QueryBuilder<IsarOrganization, R, QAfterProperty> {
  QueryBuilder<IsarOrganization, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOrganization, (R, Map<String, dynamic>), QAfterProperty>
      organizationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarOrganizationQueryProperty3<R1, R2>
    on QueryBuilder<IsarOrganization, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarOrganization, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOrganization, (R1, R2, Map<String, dynamic>), QOperations>
      organizationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarOrganizationAffiliationCollection on Isar {
  IsarCollection<int, IsarOrganizationAffiliation>
      get isarOrganizationAffiliations => this.collection();
}

const IsarOrganizationAffiliationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarOrganizationAffiliation',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'organizationAffiliation',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarOrganizationAffiliation>(
    serialize: serializeIsarOrganizationAffiliation,
    deserialize: deserializeIsarOrganizationAffiliation,
    deserializeProperty: deserializeIsarOrganizationAffiliationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarOrganizationAffiliation(
    IsarWriter writer, IsarOrganizationAffiliation object) {
  IsarCore.writeString(
      writer, 1, isarJsonEncode(object.organizationAffiliation));
  return object.id;
}

@isarProtected
IsarOrganizationAffiliation deserializeIsarOrganizationAffiliation(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _organizationAffiliation;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _organizationAffiliation = json;
    } else {
      _organizationAffiliation = const <String, dynamic>{};
    }
  }
  final object = IsarOrganizationAffiliation(
    id: _id,
    organizationAffiliation: _organizationAffiliation,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarOrganizationAffiliationProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarOrganizationAffiliationQueryFilter on QueryBuilder<
    IsarOrganizationAffiliation,
    IsarOrganizationAffiliation,
    QFilterCondition> {
  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarOrganizationAffiliationQueryObject on QueryBuilder<
    IsarOrganizationAffiliation,
    IsarOrganizationAffiliation,
    QFilterCondition> {}

extension IsarOrganizationAffiliationQuerySortBy on QueryBuilder<
    IsarOrganizationAffiliation, IsarOrganizationAffiliation, QSortBy> {
  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> sortByOrganizationAffiliation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> sortByOrganizationAffiliationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarOrganizationAffiliationQuerySortThenBy on QueryBuilder<
    IsarOrganizationAffiliation, IsarOrganizationAffiliation, QSortThenBy> {
  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> thenByOrganizationAffiliation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterSortBy> thenByOrganizationAffiliationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarOrganizationAffiliationQueryWhereDistinct on QueryBuilder<
    IsarOrganizationAffiliation, IsarOrganizationAffiliation, QDistinct> {
  QueryBuilder<IsarOrganizationAffiliation, IsarOrganizationAffiliation,
      QAfterDistinct> distinctByOrganizationAffiliation() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarOrganizationAffiliationQueryProperty1 on QueryBuilder<
    IsarOrganizationAffiliation, IsarOrganizationAffiliation, QProperty> {
  QueryBuilder<IsarOrganizationAffiliation, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, Map<String, dynamic>,
      QAfterProperty> organizationAffiliationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarOrganizationAffiliationQueryProperty2<R>
    on QueryBuilder<IsarOrganizationAffiliation, R, QAfterProperty> {
  QueryBuilder<IsarOrganizationAffiliation, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, (R, Map<String, dynamic>),
      QAfterProperty> organizationAffiliationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarOrganizationAffiliationQueryProperty3<R1, R2>
    on QueryBuilder<IsarOrganizationAffiliation, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarOrganizationAffiliation, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarOrganizationAffiliation, (R1, R2, Map<String, dynamic>),
      QOperations> organizationAffiliationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarPackagedProductDefinitionCollection on Isar {
  IsarCollection<int, IsarPackagedProductDefinition>
      get isarPackagedProductDefinitions => this.collection();
}

const IsarPackagedProductDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarPackagedProductDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'packagedProductDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarPackagedProductDefinition>(
    serialize: serializeIsarPackagedProductDefinition,
    deserialize: deserializeIsarPackagedProductDefinition,
    deserializeProperty: deserializeIsarPackagedProductDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarPackagedProductDefinition(
    IsarWriter writer, IsarPackagedProductDefinition object) {
  IsarCore.writeString(
      writer, 1, isarJsonEncode(object.packagedProductDefinition));
  return object.id;
}

@isarProtected
IsarPackagedProductDefinition deserializeIsarPackagedProductDefinition(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _packagedProductDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _packagedProductDefinition = json;
    } else {
      _packagedProductDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarPackagedProductDefinition(
    id: _id,
    packagedProductDefinition: _packagedProductDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarPackagedProductDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarPackagedProductDefinitionQueryFilter on QueryBuilder<
    IsarPackagedProductDefinition,
    IsarPackagedProductDefinition,
    QFilterCondition> {
  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarPackagedProductDefinitionQueryObject on QueryBuilder<
    IsarPackagedProductDefinition,
    IsarPackagedProductDefinition,
    QFilterCondition> {}

extension IsarPackagedProductDefinitionQuerySortBy on QueryBuilder<
    IsarPackagedProductDefinition, IsarPackagedProductDefinition, QSortBy> {
  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> sortByPackagedProductDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> sortByPackagedProductDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarPackagedProductDefinitionQuerySortThenBy on QueryBuilder<
    IsarPackagedProductDefinition, IsarPackagedProductDefinition, QSortThenBy> {
  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> thenByPackagedProductDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterSortBy> thenByPackagedProductDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarPackagedProductDefinitionQueryWhereDistinct on QueryBuilder<
    IsarPackagedProductDefinition, IsarPackagedProductDefinition, QDistinct> {
  QueryBuilder<IsarPackagedProductDefinition, IsarPackagedProductDefinition,
      QAfterDistinct> distinctByPackagedProductDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarPackagedProductDefinitionQueryProperty1 on QueryBuilder<
    IsarPackagedProductDefinition, IsarPackagedProductDefinition, QProperty> {
  QueryBuilder<IsarPackagedProductDefinition, int, QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, Map<String, dynamic>,
      QAfterProperty> packagedProductDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarPackagedProductDefinitionQueryProperty2<R>
    on QueryBuilder<IsarPackagedProductDefinition, R, QAfterProperty> {
  QueryBuilder<IsarPackagedProductDefinition, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, (R, Map<String, dynamic>),
      QAfterProperty> packagedProductDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarPackagedProductDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarPackagedProductDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarPackagedProductDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPackagedProductDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> packagedProductDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarParametersCollection on Isar {
  IsarCollection<int, IsarParameters> get isarParameters => this.collection();
}

const IsarParametersSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarParameters',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'parameters',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarParameters>(
    serialize: serializeIsarParameters,
    deserialize: deserializeIsarParameters,
    deserializeProperty: deserializeIsarParametersProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarParameters(IsarWriter writer, IsarParameters object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.parameters));
  return object.id;
}

@isarProtected
IsarParameters deserializeIsarParameters(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _parameters;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _parameters = json;
    } else {
      _parameters = const <String, dynamic>{};
    }
  }
  final object = IsarParameters(
    id: _id,
    parameters: _parameters,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarParametersProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarParametersQueryFilter
    on QueryBuilder<IsarParameters, IsarParameters, QFilterCondition> {
  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarParametersQueryObject
    on QueryBuilder<IsarParameters, IsarParameters, QFilterCondition> {}

extension IsarParametersQuerySortBy
    on QueryBuilder<IsarParameters, IsarParameters, QSortBy> {
  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy>
      sortByParameters() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy>
      sortByParametersDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarParametersQuerySortThenBy
    on QueryBuilder<IsarParameters, IsarParameters, QSortThenBy> {
  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy>
      thenByParameters() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarParameters, IsarParameters, QAfterSortBy>
      thenByParametersDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarParametersQueryWhereDistinct
    on QueryBuilder<IsarParameters, IsarParameters, QDistinct> {
  QueryBuilder<IsarParameters, IsarParameters, QAfterDistinct>
      distinctByParameters() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarParametersQueryProperty1
    on QueryBuilder<IsarParameters, IsarParameters, QProperty> {
  QueryBuilder<IsarParameters, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarParameters, Map<String, dynamic>, QAfterProperty>
      parametersProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarParametersQueryProperty2<R>
    on QueryBuilder<IsarParameters, R, QAfterProperty> {
  QueryBuilder<IsarParameters, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarParameters, (R, Map<String, dynamic>), QAfterProperty>
      parametersProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarParametersQueryProperty3<R1, R2>
    on QueryBuilder<IsarParameters, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarParameters, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarParameters, (R1, R2, Map<String, dynamic>), QOperations>
      parametersProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarPatientCollection on Isar {
  IsarCollection<int, IsarPatient> get isarPatients => this.collection();
}

const IsarPatientSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarPatient',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'patient',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarPatient>(
    serialize: serializeIsarPatient,
    deserialize: deserializeIsarPatient,
    deserializeProperty: deserializeIsarPatientProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarPatient(IsarWriter writer, IsarPatient object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.patient));
  return object.id;
}

@isarProtected
IsarPatient deserializeIsarPatient(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _patient;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _patient = json;
    } else {
      _patient = const <String, dynamic>{};
    }
  }
  final object = IsarPatient(
    id: _id,
    patient: _patient,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarPatientProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarPatientQueryFilter
    on QueryBuilder<IsarPatient, IsarPatient, QFilterCondition> {
  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarPatientQueryObject
    on QueryBuilder<IsarPatient, IsarPatient, QFilterCondition> {}

extension IsarPatientQuerySortBy
    on QueryBuilder<IsarPatient, IsarPatient, QSortBy> {
  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> sortByPatient() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> sortByPatientDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarPatientQuerySortThenBy
    on QueryBuilder<IsarPatient, IsarPatient, QSortThenBy> {
  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> thenByPatient() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarPatient, IsarPatient, QAfterSortBy> thenByPatientDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarPatientQueryWhereDistinct
    on QueryBuilder<IsarPatient, IsarPatient, QDistinct> {
  QueryBuilder<IsarPatient, IsarPatient, QAfterDistinct> distinctByPatient() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarPatientQueryProperty1
    on QueryBuilder<IsarPatient, IsarPatient, QProperty> {
  QueryBuilder<IsarPatient, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPatient, Map<String, dynamic>, QAfterProperty>
      patientProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarPatientQueryProperty2<R>
    on QueryBuilder<IsarPatient, R, QAfterProperty> {
  QueryBuilder<IsarPatient, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPatient, (R, Map<String, dynamic>), QAfterProperty>
      patientProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarPatientQueryProperty3<R1, R2>
    on QueryBuilder<IsarPatient, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarPatient, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPatient, (R1, R2, Map<String, dynamic>), QOperations>
      patientProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarPaymentNoticeCollection on Isar {
  IsarCollection<int, IsarPaymentNotice> get isarPaymentNotices =>
      this.collection();
}

const IsarPaymentNoticeSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarPaymentNotice',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'paymentNotice',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarPaymentNotice>(
    serialize: serializeIsarPaymentNotice,
    deserialize: deserializeIsarPaymentNotice,
    deserializeProperty: deserializeIsarPaymentNoticeProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarPaymentNotice(IsarWriter writer, IsarPaymentNotice object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.paymentNotice));
  return object.id;
}

@isarProtected
IsarPaymentNotice deserializeIsarPaymentNotice(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _paymentNotice;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _paymentNotice = json;
    } else {
      _paymentNotice = const <String, dynamic>{};
    }
  }
  final object = IsarPaymentNotice(
    id: _id,
    paymentNotice: _paymentNotice,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarPaymentNoticeProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarPaymentNoticeQueryFilter
    on QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QFilterCondition> {
  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarPaymentNoticeQueryObject
    on QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QFilterCondition> {}

extension IsarPaymentNoticeQuerySortBy
    on QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QSortBy> {
  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy>
      sortByPaymentNotice() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy>
      sortByPaymentNoticeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarPaymentNoticeQuerySortThenBy
    on QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QSortThenBy> {
  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy>
      thenByPaymentNotice() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterSortBy>
      thenByPaymentNoticeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarPaymentNoticeQueryWhereDistinct
    on QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QDistinct> {
  QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QAfterDistinct>
      distinctByPaymentNotice() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarPaymentNoticeQueryProperty1
    on QueryBuilder<IsarPaymentNotice, IsarPaymentNotice, QProperty> {
  QueryBuilder<IsarPaymentNotice, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPaymentNotice, Map<String, dynamic>, QAfterProperty>
      paymentNoticeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarPaymentNoticeQueryProperty2<R>
    on QueryBuilder<IsarPaymentNotice, R, QAfterProperty> {
  QueryBuilder<IsarPaymentNotice, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPaymentNotice, (R, Map<String, dynamic>), QAfterProperty>
      paymentNoticeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarPaymentNoticeQueryProperty3<R1, R2>
    on QueryBuilder<IsarPaymentNotice, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarPaymentNotice, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPaymentNotice, (R1, R2, Map<String, dynamic>), QOperations>
      paymentNoticeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarPaymentReconciliationCollection on Isar {
  IsarCollection<int, IsarPaymentReconciliation>
      get isarPaymentReconciliations => this.collection();
}

const IsarPaymentReconciliationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarPaymentReconciliation',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'paymentReconciliation',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarPaymentReconciliation>(
    serialize: serializeIsarPaymentReconciliation,
    deserialize: deserializeIsarPaymentReconciliation,
    deserializeProperty: deserializeIsarPaymentReconciliationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarPaymentReconciliation(
    IsarWriter writer, IsarPaymentReconciliation object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.paymentReconciliation));
  return object.id;
}

@isarProtected
IsarPaymentReconciliation deserializeIsarPaymentReconciliation(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _paymentReconciliation;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _paymentReconciliation = json;
    } else {
      _paymentReconciliation = const <String, dynamic>{};
    }
  }
  final object = IsarPaymentReconciliation(
    id: _id,
    paymentReconciliation: _paymentReconciliation,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarPaymentReconciliationProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarPaymentReconciliationQueryFilter on QueryBuilder<
    IsarPaymentReconciliation, IsarPaymentReconciliation, QFilterCondition> {
  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarPaymentReconciliationQueryObject on QueryBuilder<
    IsarPaymentReconciliation, IsarPaymentReconciliation, QFilterCondition> {}

extension IsarPaymentReconciliationQuerySortBy on QueryBuilder<
    IsarPaymentReconciliation, IsarPaymentReconciliation, QSortBy> {
  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> sortByPaymentReconciliation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> sortByPaymentReconciliationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarPaymentReconciliationQuerySortThenBy on QueryBuilder<
    IsarPaymentReconciliation, IsarPaymentReconciliation, QSortThenBy> {
  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> thenByPaymentReconciliation() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterSortBy> thenByPaymentReconciliationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarPaymentReconciliationQueryWhereDistinct on QueryBuilder<
    IsarPaymentReconciliation, IsarPaymentReconciliation, QDistinct> {
  QueryBuilder<IsarPaymentReconciliation, IsarPaymentReconciliation,
      QAfterDistinct> distinctByPaymentReconciliation() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarPaymentReconciliationQueryProperty1 on QueryBuilder<
    IsarPaymentReconciliation, IsarPaymentReconciliation, QProperty> {
  QueryBuilder<IsarPaymentReconciliation, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, Map<String, dynamic>, QAfterProperty>
      paymentReconciliationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarPaymentReconciliationQueryProperty2<R>
    on QueryBuilder<IsarPaymentReconciliation, R, QAfterProperty> {
  QueryBuilder<IsarPaymentReconciliation, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, (R, Map<String, dynamic>),
      QAfterProperty> paymentReconciliationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarPaymentReconciliationQueryProperty3<R1, R2>
    on QueryBuilder<IsarPaymentReconciliation, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarPaymentReconciliation, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPaymentReconciliation, (R1, R2, Map<String, dynamic>),
      QOperations> paymentReconciliationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarPersonCollection on Isar {
  IsarCollection<int, IsarPerson> get isarPersons => this.collection();
}

const IsarPersonSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarPerson',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'person',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarPerson>(
    serialize: serializeIsarPerson,
    deserialize: deserializeIsarPerson,
    deserializeProperty: deserializeIsarPersonProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarPerson(IsarWriter writer, IsarPerson object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.person));
  return object.id;
}

@isarProtected
IsarPerson deserializeIsarPerson(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _person;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _person = json;
    } else {
      _person = const <String, dynamic>{};
    }
  }
  final object = IsarPerson(
    id: _id,
    person: _person,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarPersonProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarPersonQueryFilter
    on QueryBuilder<IsarPerson, IsarPerson, QFilterCondition> {
  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarPersonQueryObject
    on QueryBuilder<IsarPerson, IsarPerson, QFilterCondition> {}

extension IsarPersonQuerySortBy
    on QueryBuilder<IsarPerson, IsarPerson, QSortBy> {
  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> sortByPerson() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> sortByPersonDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarPersonQuerySortThenBy
    on QueryBuilder<IsarPerson, IsarPerson, QSortThenBy> {
  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> thenByPerson() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarPerson, IsarPerson, QAfterSortBy> thenByPersonDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarPersonQueryWhereDistinct
    on QueryBuilder<IsarPerson, IsarPerson, QDistinct> {
  QueryBuilder<IsarPerson, IsarPerson, QAfterDistinct> distinctByPerson() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarPersonQueryProperty1
    on QueryBuilder<IsarPerson, IsarPerson, QProperty> {
  QueryBuilder<IsarPerson, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPerson, Map<String, dynamic>, QAfterProperty>
      personProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarPersonQueryProperty2<R>
    on QueryBuilder<IsarPerson, R, QAfterProperty> {
  QueryBuilder<IsarPerson, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPerson, (R, Map<String, dynamic>), QAfterProperty>
      personProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarPersonQueryProperty3<R1, R2>
    on QueryBuilder<IsarPerson, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarPerson, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPerson, (R1, R2, Map<String, dynamic>), QOperations>
      personProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarPlanDefinitionCollection on Isar {
  IsarCollection<int, IsarPlanDefinition> get isarPlanDefinitions =>
      this.collection();
}

const IsarPlanDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarPlanDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'planDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarPlanDefinition>(
    serialize: serializeIsarPlanDefinition,
    deserialize: deserializeIsarPlanDefinition,
    deserializeProperty: deserializeIsarPlanDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarPlanDefinition(IsarWriter writer, IsarPlanDefinition object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.planDefinition));
  return object.id;
}

@isarProtected
IsarPlanDefinition deserializeIsarPlanDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _planDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _planDefinition = json;
    } else {
      _planDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarPlanDefinition(
    id: _id,
    planDefinition: _planDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarPlanDefinitionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarPlanDefinitionQueryFilter
    on QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QFilterCondition> {
  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarPlanDefinitionQueryObject
    on QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QFilterCondition> {}

extension IsarPlanDefinitionQuerySortBy
    on QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QSortBy> {
  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      sortByPlanDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      sortByPlanDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarPlanDefinitionQuerySortThenBy
    on QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QSortThenBy> {
  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      thenByPlanDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterSortBy>
      thenByPlanDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarPlanDefinitionQueryWhereDistinct
    on QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QDistinct> {
  QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QAfterDistinct>
      distinctByPlanDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarPlanDefinitionQueryProperty1
    on QueryBuilder<IsarPlanDefinition, IsarPlanDefinition, QProperty> {
  QueryBuilder<IsarPlanDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPlanDefinition, Map<String, dynamic>, QAfterProperty>
      planDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarPlanDefinitionQueryProperty2<R>
    on QueryBuilder<IsarPlanDefinition, R, QAfterProperty> {
  QueryBuilder<IsarPlanDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPlanDefinition, (R, Map<String, dynamic>), QAfterProperty>
      planDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarPlanDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarPlanDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarPlanDefinition, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPlanDefinition, (R1, R2, Map<String, dynamic>), QOperations>
      planDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarPractitionerCollection on Isar {
  IsarCollection<int, IsarPractitioner> get isarPractitioners =>
      this.collection();
}

const IsarPractitionerSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarPractitioner',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'practitioner',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarPractitioner>(
    serialize: serializeIsarPractitioner,
    deserialize: deserializeIsarPractitioner,
    deserializeProperty: deserializeIsarPractitionerProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarPractitioner(IsarWriter writer, IsarPractitioner object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.practitioner));
  return object.id;
}

@isarProtected
IsarPractitioner deserializeIsarPractitioner(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _practitioner;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _practitioner = json;
    } else {
      _practitioner = const <String, dynamic>{};
    }
  }
  final object = IsarPractitioner(
    id: _id,
    practitioner: _practitioner,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarPractitionerProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarPractitionerQueryFilter
    on QueryBuilder<IsarPractitioner, IsarPractitioner, QFilterCondition> {
  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarPractitionerQueryObject
    on QueryBuilder<IsarPractitioner, IsarPractitioner, QFilterCondition> {}

extension IsarPractitionerQuerySortBy
    on QueryBuilder<IsarPractitioner, IsarPractitioner, QSortBy> {
  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy>
      sortByPractitioner() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy>
      sortByPractitionerDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarPractitionerQuerySortThenBy
    on QueryBuilder<IsarPractitioner, IsarPractitioner, QSortThenBy> {
  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy>
      thenByPractitioner() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterSortBy>
      thenByPractitionerDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarPractitionerQueryWhereDistinct
    on QueryBuilder<IsarPractitioner, IsarPractitioner, QDistinct> {
  QueryBuilder<IsarPractitioner, IsarPractitioner, QAfterDistinct>
      distinctByPractitioner() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarPractitionerQueryProperty1
    on QueryBuilder<IsarPractitioner, IsarPractitioner, QProperty> {
  QueryBuilder<IsarPractitioner, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPractitioner, Map<String, dynamic>, QAfterProperty>
      practitionerProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarPractitionerQueryProperty2<R>
    on QueryBuilder<IsarPractitioner, R, QAfterProperty> {
  QueryBuilder<IsarPractitioner, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPractitioner, (R, Map<String, dynamic>), QAfterProperty>
      practitionerProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarPractitionerQueryProperty3<R1, R2>
    on QueryBuilder<IsarPractitioner, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarPractitioner, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPractitioner, (R1, R2, Map<String, dynamic>), QOperations>
      practitionerProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarPractitionerRoleCollection on Isar {
  IsarCollection<int, IsarPractitionerRole> get isarPractitionerRoles =>
      this.collection();
}

const IsarPractitionerRoleSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarPractitionerRole',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'practitionerRole',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarPractitionerRole>(
    serialize: serializeIsarPractitionerRole,
    deserialize: deserializeIsarPractitionerRole,
    deserializeProperty: deserializeIsarPractitionerRoleProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarPractitionerRole(
    IsarWriter writer, IsarPractitionerRole object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.practitionerRole));
  return object.id;
}

@isarProtected
IsarPractitionerRole deserializeIsarPractitionerRole(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _practitionerRole;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _practitionerRole = json;
    } else {
      _practitionerRole = const <String, dynamic>{};
    }
  }
  final object = IsarPractitionerRole(
    id: _id,
    practitionerRole: _practitionerRole,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarPractitionerRoleProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarPractitionerRoleQueryFilter on QueryBuilder<IsarPractitionerRole,
    IsarPractitionerRole, QFilterCondition> {
  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarPractitionerRoleQueryObject on QueryBuilder<IsarPractitionerRole,
    IsarPractitionerRole, QFilterCondition> {}

extension IsarPractitionerRoleQuerySortBy
    on QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QSortBy> {
  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      sortByPractitionerRole() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      sortByPractitionerRoleDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarPractitionerRoleQuerySortThenBy
    on QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QSortThenBy> {
  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      thenByPractitionerRole() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterSortBy>
      thenByPractitionerRoleDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarPractitionerRoleQueryWhereDistinct
    on QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QDistinct> {
  QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QAfterDistinct>
      distinctByPractitionerRole() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarPractitionerRoleQueryProperty1
    on QueryBuilder<IsarPractitionerRole, IsarPractitionerRole, QProperty> {
  QueryBuilder<IsarPractitionerRole, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPractitionerRole, Map<String, dynamic>, QAfterProperty>
      practitionerRoleProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarPractitionerRoleQueryProperty2<R>
    on QueryBuilder<IsarPractitionerRole, R, QAfterProperty> {
  QueryBuilder<IsarPractitionerRole, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPractitionerRole, (R, Map<String, dynamic>), QAfterProperty>
      practitionerRoleProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarPractitionerRoleQueryProperty3<R1, R2>
    on QueryBuilder<IsarPractitionerRole, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarPractitionerRole, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarPractitionerRole, (R1, R2, Map<String, dynamic>),
      QOperations> practitionerRoleProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarProcedureCollection on Isar {
  IsarCollection<int, IsarProcedure> get isarProcedures => this.collection();
}

const IsarProcedureSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarProcedure',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'procedure',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarProcedure>(
    serialize: serializeIsarProcedure,
    deserialize: deserializeIsarProcedure,
    deserializeProperty: deserializeIsarProcedureProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarProcedure(IsarWriter writer, IsarProcedure object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.procedure));
  return object.id;
}

@isarProtected
IsarProcedure deserializeIsarProcedure(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _procedure;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _procedure = json;
    } else {
      _procedure = const <String, dynamic>{};
    }
  }
  final object = IsarProcedure(
    id: _id,
    procedure: _procedure,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarProcedureProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarProcedureQueryFilter
    on QueryBuilder<IsarProcedure, IsarProcedure, QFilterCondition> {
  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarProcedureQueryObject
    on QueryBuilder<IsarProcedure, IsarProcedure, QFilterCondition> {}

extension IsarProcedureQuerySortBy
    on QueryBuilder<IsarProcedure, IsarProcedure, QSortBy> {
  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy> sortByProcedure() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy>
      sortByProcedureDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarProcedureQuerySortThenBy
    on QueryBuilder<IsarProcedure, IsarProcedure, QSortThenBy> {
  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy> thenByProcedure() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarProcedure, IsarProcedure, QAfterSortBy>
      thenByProcedureDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarProcedureQueryWhereDistinct
    on QueryBuilder<IsarProcedure, IsarProcedure, QDistinct> {
  QueryBuilder<IsarProcedure, IsarProcedure, QAfterDistinct>
      distinctByProcedure() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarProcedureQueryProperty1
    on QueryBuilder<IsarProcedure, IsarProcedure, QProperty> {
  QueryBuilder<IsarProcedure, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarProcedure, Map<String, dynamic>, QAfterProperty>
      procedureProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarProcedureQueryProperty2<R>
    on QueryBuilder<IsarProcedure, R, QAfterProperty> {
  QueryBuilder<IsarProcedure, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarProcedure, (R, Map<String, dynamic>), QAfterProperty>
      procedureProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarProcedureQueryProperty3<R1, R2>
    on QueryBuilder<IsarProcedure, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarProcedure, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarProcedure, (R1, R2, Map<String, dynamic>), QOperations>
      procedureProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarProvenanceCollection on Isar {
  IsarCollection<int, IsarProvenance> get isarProvenances => this.collection();
}

const IsarProvenanceSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarProvenance',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'provenance',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarProvenance>(
    serialize: serializeIsarProvenance,
    deserialize: deserializeIsarProvenance,
    deserializeProperty: deserializeIsarProvenanceProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarProvenance(IsarWriter writer, IsarProvenance object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.provenance));
  return object.id;
}

@isarProtected
IsarProvenance deserializeIsarProvenance(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _provenance;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _provenance = json;
    } else {
      _provenance = const <String, dynamic>{};
    }
  }
  final object = IsarProvenance(
    id: _id,
    provenance: _provenance,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarProvenanceProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarProvenanceQueryFilter
    on QueryBuilder<IsarProvenance, IsarProvenance, QFilterCondition> {
  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarProvenanceQueryObject
    on QueryBuilder<IsarProvenance, IsarProvenance, QFilterCondition> {}

extension IsarProvenanceQuerySortBy
    on QueryBuilder<IsarProvenance, IsarProvenance, QSortBy> {
  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy>
      sortByProvenance() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy>
      sortByProvenanceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarProvenanceQuerySortThenBy
    on QueryBuilder<IsarProvenance, IsarProvenance, QSortThenBy> {
  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy>
      thenByProvenance() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarProvenance, IsarProvenance, QAfterSortBy>
      thenByProvenanceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarProvenanceQueryWhereDistinct
    on QueryBuilder<IsarProvenance, IsarProvenance, QDistinct> {
  QueryBuilder<IsarProvenance, IsarProvenance, QAfterDistinct>
      distinctByProvenance() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarProvenanceQueryProperty1
    on QueryBuilder<IsarProvenance, IsarProvenance, QProperty> {
  QueryBuilder<IsarProvenance, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarProvenance, Map<String, dynamic>, QAfterProperty>
      provenanceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarProvenanceQueryProperty2<R>
    on QueryBuilder<IsarProvenance, R, QAfterProperty> {
  QueryBuilder<IsarProvenance, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarProvenance, (R, Map<String, dynamic>), QAfterProperty>
      provenanceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarProvenanceQueryProperty3<R1, R2>
    on QueryBuilder<IsarProvenance, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarProvenance, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarProvenance, (R1, R2, Map<String, dynamic>), QOperations>
      provenanceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarQuestionnaireCollection on Isar {
  IsarCollection<int, IsarQuestionnaire> get isarQuestionnaires =>
      this.collection();
}

const IsarQuestionnaireSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarQuestionnaire',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'questionnaire',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarQuestionnaire>(
    serialize: serializeIsarQuestionnaire,
    deserialize: deserializeIsarQuestionnaire,
    deserializeProperty: deserializeIsarQuestionnaireProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarQuestionnaire(IsarWriter writer, IsarQuestionnaire object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.questionnaire));
  return object.id;
}

@isarProtected
IsarQuestionnaire deserializeIsarQuestionnaire(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _questionnaire;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _questionnaire = json;
    } else {
      _questionnaire = const <String, dynamic>{};
    }
  }
  final object = IsarQuestionnaire(
    id: _id,
    questionnaire: _questionnaire,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarQuestionnaireProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarQuestionnaireQueryFilter
    on QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QFilterCondition> {
  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarQuestionnaireQueryObject
    on QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QFilterCondition> {}

extension IsarQuestionnaireQuerySortBy
    on QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QSortBy> {
  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy>
      sortByQuestionnaire() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy>
      sortByQuestionnaireDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarQuestionnaireQuerySortThenBy
    on QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QSortThenBy> {
  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy>
      thenByQuestionnaire() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterSortBy>
      thenByQuestionnaireDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarQuestionnaireQueryWhereDistinct
    on QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QDistinct> {
  QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QAfterDistinct>
      distinctByQuestionnaire() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarQuestionnaireQueryProperty1
    on QueryBuilder<IsarQuestionnaire, IsarQuestionnaire, QProperty> {
  QueryBuilder<IsarQuestionnaire, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarQuestionnaire, Map<String, dynamic>, QAfterProperty>
      questionnaireProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarQuestionnaireQueryProperty2<R>
    on QueryBuilder<IsarQuestionnaire, R, QAfterProperty> {
  QueryBuilder<IsarQuestionnaire, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarQuestionnaire, (R, Map<String, dynamic>), QAfterProperty>
      questionnaireProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarQuestionnaireQueryProperty3<R1, R2>
    on QueryBuilder<IsarQuestionnaire, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarQuestionnaire, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarQuestionnaire, (R1, R2, Map<String, dynamic>), QOperations>
      questionnaireProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarQuestionnaireResponseCollection on Isar {
  IsarCollection<int, IsarQuestionnaireResponse>
      get isarQuestionnaireResponses => this.collection();
}

const IsarQuestionnaireResponseSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarQuestionnaireResponse',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'questionnaireResponse',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarQuestionnaireResponse>(
    serialize: serializeIsarQuestionnaireResponse,
    deserialize: deserializeIsarQuestionnaireResponse,
    deserializeProperty: deserializeIsarQuestionnaireResponseProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarQuestionnaireResponse(
    IsarWriter writer, IsarQuestionnaireResponse object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.questionnaireResponse));
  return object.id;
}

@isarProtected
IsarQuestionnaireResponse deserializeIsarQuestionnaireResponse(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _questionnaireResponse;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _questionnaireResponse = json;
    } else {
      _questionnaireResponse = const <String, dynamic>{};
    }
  }
  final object = IsarQuestionnaireResponse(
    id: _id,
    questionnaireResponse: _questionnaireResponse,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarQuestionnaireResponseProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarQuestionnaireResponseQueryFilter on QueryBuilder<
    IsarQuestionnaireResponse, IsarQuestionnaireResponse, QFilterCondition> {
  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarQuestionnaireResponseQueryObject on QueryBuilder<
    IsarQuestionnaireResponse, IsarQuestionnaireResponse, QFilterCondition> {}

extension IsarQuestionnaireResponseQuerySortBy on QueryBuilder<
    IsarQuestionnaireResponse, IsarQuestionnaireResponse, QSortBy> {
  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> sortByQuestionnaireResponse() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> sortByQuestionnaireResponseDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarQuestionnaireResponseQuerySortThenBy on QueryBuilder<
    IsarQuestionnaireResponse, IsarQuestionnaireResponse, QSortThenBy> {
  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> thenByQuestionnaireResponse() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterSortBy> thenByQuestionnaireResponseDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarQuestionnaireResponseQueryWhereDistinct on QueryBuilder<
    IsarQuestionnaireResponse, IsarQuestionnaireResponse, QDistinct> {
  QueryBuilder<IsarQuestionnaireResponse, IsarQuestionnaireResponse,
      QAfterDistinct> distinctByQuestionnaireResponse() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarQuestionnaireResponseQueryProperty1 on QueryBuilder<
    IsarQuestionnaireResponse, IsarQuestionnaireResponse, QProperty> {
  QueryBuilder<IsarQuestionnaireResponse, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, Map<String, dynamic>, QAfterProperty>
      questionnaireResponseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarQuestionnaireResponseQueryProperty2<R>
    on QueryBuilder<IsarQuestionnaireResponse, R, QAfterProperty> {
  QueryBuilder<IsarQuestionnaireResponse, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, (R, Map<String, dynamic>),
      QAfterProperty> questionnaireResponseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarQuestionnaireResponseQueryProperty3<R1, R2>
    on QueryBuilder<IsarQuestionnaireResponse, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarQuestionnaireResponse, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarQuestionnaireResponse, (R1, R2, Map<String, dynamic>),
      QOperations> questionnaireResponseProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarRegulatedAuthorizationCollection on Isar {
  IsarCollection<int, IsarRegulatedAuthorization>
      get isarRegulatedAuthorizations => this.collection();
}

const IsarRegulatedAuthorizationSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarRegulatedAuthorization',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'regulatedAuthorization',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarRegulatedAuthorization>(
    serialize: serializeIsarRegulatedAuthorization,
    deserialize: deserializeIsarRegulatedAuthorization,
    deserializeProperty: deserializeIsarRegulatedAuthorizationProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarRegulatedAuthorization(
    IsarWriter writer, IsarRegulatedAuthorization object) {
  IsarCore.writeString(
      writer, 1, isarJsonEncode(object.regulatedAuthorization));
  return object.id;
}

@isarProtected
IsarRegulatedAuthorization deserializeIsarRegulatedAuthorization(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _regulatedAuthorization;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _regulatedAuthorization = json;
    } else {
      _regulatedAuthorization = const <String, dynamic>{};
    }
  }
  final object = IsarRegulatedAuthorization(
    id: _id,
    regulatedAuthorization: _regulatedAuthorization,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarRegulatedAuthorizationProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarRegulatedAuthorizationQueryFilter on QueryBuilder<
    IsarRegulatedAuthorization, IsarRegulatedAuthorization, QFilterCondition> {
  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarRegulatedAuthorizationQueryObject on QueryBuilder<
    IsarRegulatedAuthorization, IsarRegulatedAuthorization, QFilterCondition> {}

extension IsarRegulatedAuthorizationQuerySortBy on QueryBuilder<
    IsarRegulatedAuthorization, IsarRegulatedAuthorization, QSortBy> {
  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> sortByRegulatedAuthorization() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> sortByRegulatedAuthorizationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarRegulatedAuthorizationQuerySortThenBy on QueryBuilder<
    IsarRegulatedAuthorization, IsarRegulatedAuthorization, QSortThenBy> {
  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> thenByRegulatedAuthorization() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterSortBy> thenByRegulatedAuthorizationDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarRegulatedAuthorizationQueryWhereDistinct on QueryBuilder<
    IsarRegulatedAuthorization, IsarRegulatedAuthorization, QDistinct> {
  QueryBuilder<IsarRegulatedAuthorization, IsarRegulatedAuthorization,
      QAfterDistinct> distinctByRegulatedAuthorization() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarRegulatedAuthorizationQueryProperty1 on QueryBuilder<
    IsarRegulatedAuthorization, IsarRegulatedAuthorization, QProperty> {
  QueryBuilder<IsarRegulatedAuthorization, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, Map<String, dynamic>, QAfterProperty>
      regulatedAuthorizationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarRegulatedAuthorizationQueryProperty2<R>
    on QueryBuilder<IsarRegulatedAuthorization, R, QAfterProperty> {
  QueryBuilder<IsarRegulatedAuthorization, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, (R, Map<String, dynamic>),
      QAfterProperty> regulatedAuthorizationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarRegulatedAuthorizationQueryProperty3<R1, R2>
    on QueryBuilder<IsarRegulatedAuthorization, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarRegulatedAuthorization, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRegulatedAuthorization, (R1, R2, Map<String, dynamic>),
      QOperations> regulatedAuthorizationProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarRelatedPersonCollection on Isar {
  IsarCollection<int, IsarRelatedPerson> get isarRelatedPersons =>
      this.collection();
}

const IsarRelatedPersonSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarRelatedPerson',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'relatedPerson',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarRelatedPerson>(
    serialize: serializeIsarRelatedPerson,
    deserialize: deserializeIsarRelatedPerson,
    deserializeProperty: deserializeIsarRelatedPersonProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarRelatedPerson(IsarWriter writer, IsarRelatedPerson object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.relatedPerson));
  return object.id;
}

@isarProtected
IsarRelatedPerson deserializeIsarRelatedPerson(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _relatedPerson;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _relatedPerson = json;
    } else {
      _relatedPerson = const <String, dynamic>{};
    }
  }
  final object = IsarRelatedPerson(
    id: _id,
    relatedPerson: _relatedPerson,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarRelatedPersonProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarRelatedPersonQueryFilter
    on QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QFilterCondition> {
  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarRelatedPersonQueryObject
    on QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QFilterCondition> {}

extension IsarRelatedPersonQuerySortBy
    on QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QSortBy> {
  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy>
      sortByRelatedPerson() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy>
      sortByRelatedPersonDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarRelatedPersonQuerySortThenBy
    on QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QSortThenBy> {
  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy>
      thenByRelatedPerson() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterSortBy>
      thenByRelatedPersonDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarRelatedPersonQueryWhereDistinct
    on QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QDistinct> {
  QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QAfterDistinct>
      distinctByRelatedPerson() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarRelatedPersonQueryProperty1
    on QueryBuilder<IsarRelatedPerson, IsarRelatedPerson, QProperty> {
  QueryBuilder<IsarRelatedPerson, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRelatedPerson, Map<String, dynamic>, QAfterProperty>
      relatedPersonProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarRelatedPersonQueryProperty2<R>
    on QueryBuilder<IsarRelatedPerson, R, QAfterProperty> {
  QueryBuilder<IsarRelatedPerson, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRelatedPerson, (R, Map<String, dynamic>), QAfterProperty>
      relatedPersonProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarRelatedPersonQueryProperty3<R1, R2>
    on QueryBuilder<IsarRelatedPerson, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarRelatedPerson, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRelatedPerson, (R1, R2, Map<String, dynamic>), QOperations>
      relatedPersonProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarRequestGroupCollection on Isar {
  IsarCollection<int, IsarRequestGroup> get isarRequestGroups =>
      this.collection();
}

const IsarRequestGroupSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarRequestGroup',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'requestGroup',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarRequestGroup>(
    serialize: serializeIsarRequestGroup,
    deserialize: deserializeIsarRequestGroup,
    deserializeProperty: deserializeIsarRequestGroupProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarRequestGroup(IsarWriter writer, IsarRequestGroup object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.requestGroup));
  return object.id;
}

@isarProtected
IsarRequestGroup deserializeIsarRequestGroup(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _requestGroup;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _requestGroup = json;
    } else {
      _requestGroup = const <String, dynamic>{};
    }
  }
  final object = IsarRequestGroup(
    id: _id,
    requestGroup: _requestGroup,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarRequestGroupProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarRequestGroupQueryFilter
    on QueryBuilder<IsarRequestGroup, IsarRequestGroup, QFilterCondition> {
  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarRequestGroupQueryObject
    on QueryBuilder<IsarRequestGroup, IsarRequestGroup, QFilterCondition> {}

extension IsarRequestGroupQuerySortBy
    on QueryBuilder<IsarRequestGroup, IsarRequestGroup, QSortBy> {
  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy>
      sortByRequestGroup() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy>
      sortByRequestGroupDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarRequestGroupQuerySortThenBy
    on QueryBuilder<IsarRequestGroup, IsarRequestGroup, QSortThenBy> {
  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy>
      thenByRequestGroup() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterSortBy>
      thenByRequestGroupDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarRequestGroupQueryWhereDistinct
    on QueryBuilder<IsarRequestGroup, IsarRequestGroup, QDistinct> {
  QueryBuilder<IsarRequestGroup, IsarRequestGroup, QAfterDistinct>
      distinctByRequestGroup() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarRequestGroupQueryProperty1
    on QueryBuilder<IsarRequestGroup, IsarRequestGroup, QProperty> {
  QueryBuilder<IsarRequestGroup, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRequestGroup, Map<String, dynamic>, QAfterProperty>
      requestGroupProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarRequestGroupQueryProperty2<R>
    on QueryBuilder<IsarRequestGroup, R, QAfterProperty> {
  QueryBuilder<IsarRequestGroup, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRequestGroup, (R, Map<String, dynamic>), QAfterProperty>
      requestGroupProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarRequestGroupQueryProperty3<R1, R2>
    on QueryBuilder<IsarRequestGroup, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarRequestGroup, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRequestGroup, (R1, R2, Map<String, dynamic>), QOperations>
      requestGroupProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarResearchDefinitionCollection on Isar {
  IsarCollection<int, IsarResearchDefinition> get isarResearchDefinitions =>
      this.collection();
}

const IsarResearchDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarResearchDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'researchDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarResearchDefinition>(
    serialize: serializeIsarResearchDefinition,
    deserialize: deserializeIsarResearchDefinition,
    deserializeProperty: deserializeIsarResearchDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarResearchDefinition(
    IsarWriter writer, IsarResearchDefinition object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.researchDefinition));
  return object.id;
}

@isarProtected
IsarResearchDefinition deserializeIsarResearchDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _researchDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _researchDefinition = json;
    } else {
      _researchDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarResearchDefinition(
    id: _id,
    researchDefinition: _researchDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarResearchDefinitionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarResearchDefinitionQueryFilter on QueryBuilder<
    IsarResearchDefinition, IsarResearchDefinition, QFilterCondition> {
  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarResearchDefinitionQueryObject on QueryBuilder<
    IsarResearchDefinition, IsarResearchDefinition, QFilterCondition> {}

extension IsarResearchDefinitionQuerySortBy
    on QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QSortBy> {
  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      sortByResearchDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      sortByResearchDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarResearchDefinitionQuerySortThenBy on QueryBuilder<
    IsarResearchDefinition, IsarResearchDefinition, QSortThenBy> {
  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      thenByResearchDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterSortBy>
      thenByResearchDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarResearchDefinitionQueryWhereDistinct
    on QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QDistinct> {
  QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QAfterDistinct>
      distinctByResearchDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarResearchDefinitionQueryProperty1
    on QueryBuilder<IsarResearchDefinition, IsarResearchDefinition, QProperty> {
  QueryBuilder<IsarResearchDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchDefinition, Map<String, dynamic>, QAfterProperty>
      researchDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarResearchDefinitionQueryProperty2<R>
    on QueryBuilder<IsarResearchDefinition, R, QAfterProperty> {
  QueryBuilder<IsarResearchDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchDefinition, (R, Map<String, dynamic>),
      QAfterProperty> researchDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarResearchDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarResearchDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarResearchDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> researchDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarResearchElementDefinitionCollection on Isar {
  IsarCollection<int, IsarResearchElementDefinition>
      get isarResearchElementDefinitions => this.collection();
}

const IsarResearchElementDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarResearchElementDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'researchElementDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarResearchElementDefinition>(
    serialize: serializeIsarResearchElementDefinition,
    deserialize: deserializeIsarResearchElementDefinition,
    deserializeProperty: deserializeIsarResearchElementDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarResearchElementDefinition(
    IsarWriter writer, IsarResearchElementDefinition object) {
  IsarCore.writeString(
      writer, 1, isarJsonEncode(object.researchElementDefinition));
  return object.id;
}

@isarProtected
IsarResearchElementDefinition deserializeIsarResearchElementDefinition(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _researchElementDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _researchElementDefinition = json;
    } else {
      _researchElementDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarResearchElementDefinition(
    id: _id,
    researchElementDefinition: _researchElementDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarResearchElementDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarResearchElementDefinitionQueryFilter on QueryBuilder<
    IsarResearchElementDefinition,
    IsarResearchElementDefinition,
    QFilterCondition> {
  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarResearchElementDefinitionQueryObject on QueryBuilder<
    IsarResearchElementDefinition,
    IsarResearchElementDefinition,
    QFilterCondition> {}

extension IsarResearchElementDefinitionQuerySortBy on QueryBuilder<
    IsarResearchElementDefinition, IsarResearchElementDefinition, QSortBy> {
  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> sortByResearchElementDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> sortByResearchElementDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarResearchElementDefinitionQuerySortThenBy on QueryBuilder<
    IsarResearchElementDefinition, IsarResearchElementDefinition, QSortThenBy> {
  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> thenByResearchElementDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterSortBy> thenByResearchElementDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarResearchElementDefinitionQueryWhereDistinct on QueryBuilder<
    IsarResearchElementDefinition, IsarResearchElementDefinition, QDistinct> {
  QueryBuilder<IsarResearchElementDefinition, IsarResearchElementDefinition,
      QAfterDistinct> distinctByResearchElementDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarResearchElementDefinitionQueryProperty1 on QueryBuilder<
    IsarResearchElementDefinition, IsarResearchElementDefinition, QProperty> {
  QueryBuilder<IsarResearchElementDefinition, int, QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, Map<String, dynamic>,
      QAfterProperty> researchElementDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarResearchElementDefinitionQueryProperty2<R>
    on QueryBuilder<IsarResearchElementDefinition, R, QAfterProperty> {
  QueryBuilder<IsarResearchElementDefinition, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, (R, Map<String, dynamic>),
      QAfterProperty> researchElementDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarResearchElementDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarResearchElementDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarResearchElementDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchElementDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> researchElementDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarResearchStudyCollection on Isar {
  IsarCollection<int, IsarResearchStudy> get isarResearchStudys =>
      this.collection();
}

const IsarResearchStudySchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarResearchStudy',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'researchStudy',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarResearchStudy>(
    serialize: serializeIsarResearchStudy,
    deserialize: deserializeIsarResearchStudy,
    deserializeProperty: deserializeIsarResearchStudyProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarResearchStudy(IsarWriter writer, IsarResearchStudy object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.researchStudy));
  return object.id;
}

@isarProtected
IsarResearchStudy deserializeIsarResearchStudy(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _researchStudy;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _researchStudy = json;
    } else {
      _researchStudy = const <String, dynamic>{};
    }
  }
  final object = IsarResearchStudy(
    id: _id,
    researchStudy: _researchStudy,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarResearchStudyProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarResearchStudyQueryFilter
    on QueryBuilder<IsarResearchStudy, IsarResearchStudy, QFilterCondition> {
  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarResearchStudyQueryObject
    on QueryBuilder<IsarResearchStudy, IsarResearchStudy, QFilterCondition> {}

extension IsarResearchStudyQuerySortBy
    on QueryBuilder<IsarResearchStudy, IsarResearchStudy, QSortBy> {
  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy>
      sortByResearchStudy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy>
      sortByResearchStudyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarResearchStudyQuerySortThenBy
    on QueryBuilder<IsarResearchStudy, IsarResearchStudy, QSortThenBy> {
  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy>
      thenByResearchStudy() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterSortBy>
      thenByResearchStudyDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarResearchStudyQueryWhereDistinct
    on QueryBuilder<IsarResearchStudy, IsarResearchStudy, QDistinct> {
  QueryBuilder<IsarResearchStudy, IsarResearchStudy, QAfterDistinct>
      distinctByResearchStudy() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarResearchStudyQueryProperty1
    on QueryBuilder<IsarResearchStudy, IsarResearchStudy, QProperty> {
  QueryBuilder<IsarResearchStudy, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchStudy, Map<String, dynamic>, QAfterProperty>
      researchStudyProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarResearchStudyQueryProperty2<R>
    on QueryBuilder<IsarResearchStudy, R, QAfterProperty> {
  QueryBuilder<IsarResearchStudy, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchStudy, (R, Map<String, dynamic>), QAfterProperty>
      researchStudyProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarResearchStudyQueryProperty3<R1, R2>
    on QueryBuilder<IsarResearchStudy, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarResearchStudy, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchStudy, (R1, R2, Map<String, dynamic>), QOperations>
      researchStudyProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarResearchSubjectCollection on Isar {
  IsarCollection<int, IsarResearchSubject> get isarResearchSubjects =>
      this.collection();
}

const IsarResearchSubjectSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarResearchSubject',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'researchSubject',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarResearchSubject>(
    serialize: serializeIsarResearchSubject,
    deserialize: deserializeIsarResearchSubject,
    deserializeProperty: deserializeIsarResearchSubjectProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarResearchSubject(
    IsarWriter writer, IsarResearchSubject object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.researchSubject));
  return object.id;
}

@isarProtected
IsarResearchSubject deserializeIsarResearchSubject(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _researchSubject;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _researchSubject = json;
    } else {
      _researchSubject = const <String, dynamic>{};
    }
  }
  final object = IsarResearchSubject(
    id: _id,
    researchSubject: _researchSubject,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarResearchSubjectProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarResearchSubjectQueryFilter on QueryBuilder<IsarResearchSubject,
    IsarResearchSubject, QFilterCondition> {
  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarResearchSubjectQueryObject on QueryBuilder<IsarResearchSubject,
    IsarResearchSubject, QFilterCondition> {}

extension IsarResearchSubjectQuerySortBy
    on QueryBuilder<IsarResearchSubject, IsarResearchSubject, QSortBy> {
  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      sortByResearchSubject() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      sortByResearchSubjectDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarResearchSubjectQuerySortThenBy
    on QueryBuilder<IsarResearchSubject, IsarResearchSubject, QSortThenBy> {
  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      thenByResearchSubject() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterSortBy>
      thenByResearchSubjectDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarResearchSubjectQueryWhereDistinct
    on QueryBuilder<IsarResearchSubject, IsarResearchSubject, QDistinct> {
  QueryBuilder<IsarResearchSubject, IsarResearchSubject, QAfterDistinct>
      distinctByResearchSubject() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarResearchSubjectQueryProperty1
    on QueryBuilder<IsarResearchSubject, IsarResearchSubject, QProperty> {
  QueryBuilder<IsarResearchSubject, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchSubject, Map<String, dynamic>, QAfterProperty>
      researchSubjectProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarResearchSubjectQueryProperty2<R>
    on QueryBuilder<IsarResearchSubject, R, QAfterProperty> {
  QueryBuilder<IsarResearchSubject, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchSubject, (R, Map<String, dynamic>), QAfterProperty>
      researchSubjectProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarResearchSubjectQueryProperty3<R1, R2>
    on QueryBuilder<IsarResearchSubject, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarResearchSubject, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarResearchSubject, (R1, R2, Map<String, dynamic>), QOperations>
      researchSubjectProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarRiskAssessmentCollection on Isar {
  IsarCollection<int, IsarRiskAssessment> get isarRiskAssessments =>
      this.collection();
}

const IsarRiskAssessmentSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarRiskAssessment',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'riskAssessment',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarRiskAssessment>(
    serialize: serializeIsarRiskAssessment,
    deserialize: deserializeIsarRiskAssessment,
    deserializeProperty: deserializeIsarRiskAssessmentProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarRiskAssessment(IsarWriter writer, IsarRiskAssessment object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.riskAssessment));
  return object.id;
}

@isarProtected
IsarRiskAssessment deserializeIsarRiskAssessment(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _riskAssessment;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _riskAssessment = json;
    } else {
      _riskAssessment = const <String, dynamic>{};
    }
  }
  final object = IsarRiskAssessment(
    id: _id,
    riskAssessment: _riskAssessment,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarRiskAssessmentProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarRiskAssessmentQueryFilter
    on QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QFilterCondition> {
  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarRiskAssessmentQueryObject
    on QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QFilterCondition> {}

extension IsarRiskAssessmentQuerySortBy
    on QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QSortBy> {
  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      sortByRiskAssessment() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      sortByRiskAssessmentDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarRiskAssessmentQuerySortThenBy
    on QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QSortThenBy> {
  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      thenByRiskAssessment() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterSortBy>
      thenByRiskAssessmentDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarRiskAssessmentQueryWhereDistinct
    on QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QDistinct> {
  QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QAfterDistinct>
      distinctByRiskAssessment() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarRiskAssessmentQueryProperty1
    on QueryBuilder<IsarRiskAssessment, IsarRiskAssessment, QProperty> {
  QueryBuilder<IsarRiskAssessment, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRiskAssessment, Map<String, dynamic>, QAfterProperty>
      riskAssessmentProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarRiskAssessmentQueryProperty2<R>
    on QueryBuilder<IsarRiskAssessment, R, QAfterProperty> {
  QueryBuilder<IsarRiskAssessment, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRiskAssessment, (R, Map<String, dynamic>), QAfterProperty>
      riskAssessmentProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarRiskAssessmentQueryProperty3<R1, R2>
    on QueryBuilder<IsarRiskAssessment, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarRiskAssessment, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarRiskAssessment, (R1, R2, Map<String, dynamic>), QOperations>
      riskAssessmentProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarScheduleCollection on Isar {
  IsarCollection<int, IsarSchedule> get isarSchedules => this.collection();
}

const IsarScheduleSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSchedule',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'schedule',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarSchedule>(
    serialize: serializeIsarSchedule,
    deserialize: deserializeIsarSchedule,
    deserializeProperty: deserializeIsarScheduleProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSchedule(IsarWriter writer, IsarSchedule object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.schedule));
  return object.id;
}

@isarProtected
IsarSchedule deserializeIsarSchedule(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _schedule;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _schedule = json;
    } else {
      _schedule = const <String, dynamic>{};
    }
  }
  final object = IsarSchedule(
    id: _id,
    schedule: _schedule,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarScheduleProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarScheduleQueryFilter
    on QueryBuilder<IsarSchedule, IsarSchedule, QFilterCondition> {
  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarScheduleQueryObject
    on QueryBuilder<IsarSchedule, IsarSchedule, QFilterCondition> {}

extension IsarScheduleQuerySortBy
    on QueryBuilder<IsarSchedule, IsarSchedule, QSortBy> {
  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> sortBySchedule() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> sortByScheduleDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarScheduleQuerySortThenBy
    on QueryBuilder<IsarSchedule, IsarSchedule, QSortThenBy> {
  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> thenBySchedule() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSchedule, IsarSchedule, QAfterSortBy> thenByScheduleDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarScheduleQueryWhereDistinct
    on QueryBuilder<IsarSchedule, IsarSchedule, QDistinct> {
  QueryBuilder<IsarSchedule, IsarSchedule, QAfterDistinct>
      distinctBySchedule() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarScheduleQueryProperty1
    on QueryBuilder<IsarSchedule, IsarSchedule, QProperty> {
  QueryBuilder<IsarSchedule, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSchedule, Map<String, dynamic>, QAfterProperty>
      scheduleProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarScheduleQueryProperty2<R>
    on QueryBuilder<IsarSchedule, R, QAfterProperty> {
  QueryBuilder<IsarSchedule, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSchedule, (R, Map<String, dynamic>), QAfterProperty>
      scheduleProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarScheduleQueryProperty3<R1, R2>
    on QueryBuilder<IsarSchedule, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSchedule, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSchedule, (R1, R2, Map<String, dynamic>), QOperations>
      scheduleProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSearchParameterCollection on Isar {
  IsarCollection<int, IsarSearchParameter> get isarSearchParameters =>
      this.collection();
}

const IsarSearchParameterSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSearchParameter',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'searchParameter',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarSearchParameter>(
    serialize: serializeIsarSearchParameter,
    deserialize: deserializeIsarSearchParameter,
    deserializeProperty: deserializeIsarSearchParameterProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSearchParameter(
    IsarWriter writer, IsarSearchParameter object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.searchParameter));
  return object.id;
}

@isarProtected
IsarSearchParameter deserializeIsarSearchParameter(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _searchParameter;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _searchParameter = json;
    } else {
      _searchParameter = const <String, dynamic>{};
    }
  }
  final object = IsarSearchParameter(
    id: _id,
    searchParameter: _searchParameter,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarSearchParameterProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarSearchParameterQueryFilter on QueryBuilder<IsarSearchParameter,
    IsarSearchParameter, QFilterCondition> {
  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarSearchParameterQueryObject on QueryBuilder<IsarSearchParameter,
    IsarSearchParameter, QFilterCondition> {}

extension IsarSearchParameterQuerySortBy
    on QueryBuilder<IsarSearchParameter, IsarSearchParameter, QSortBy> {
  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      sortBySearchParameter() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      sortBySearchParameterDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSearchParameterQuerySortThenBy
    on QueryBuilder<IsarSearchParameter, IsarSearchParameter, QSortThenBy> {
  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      thenBySearchParameter() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterSortBy>
      thenBySearchParameterDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSearchParameterQueryWhereDistinct
    on QueryBuilder<IsarSearchParameter, IsarSearchParameter, QDistinct> {
  QueryBuilder<IsarSearchParameter, IsarSearchParameter, QAfterDistinct>
      distinctBySearchParameter() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarSearchParameterQueryProperty1
    on QueryBuilder<IsarSearchParameter, IsarSearchParameter, QProperty> {
  QueryBuilder<IsarSearchParameter, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSearchParameter, Map<String, dynamic>, QAfterProperty>
      searchParameterProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSearchParameterQueryProperty2<R>
    on QueryBuilder<IsarSearchParameter, R, QAfterProperty> {
  QueryBuilder<IsarSearchParameter, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSearchParameter, (R, Map<String, dynamic>), QAfterProperty>
      searchParameterProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSearchParameterQueryProperty3<R1, R2>
    on QueryBuilder<IsarSearchParameter, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSearchParameter, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSearchParameter, (R1, R2, Map<String, dynamic>), QOperations>
      searchParameterProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarServiceRequestCollection on Isar {
  IsarCollection<int, IsarServiceRequest> get isarServiceRequests =>
      this.collection();
}

const IsarServiceRequestSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarServiceRequest',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'serviceRequest',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarServiceRequest>(
    serialize: serializeIsarServiceRequest,
    deserialize: deserializeIsarServiceRequest,
    deserializeProperty: deserializeIsarServiceRequestProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarServiceRequest(IsarWriter writer, IsarServiceRequest object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.serviceRequest));
  return object.id;
}

@isarProtected
IsarServiceRequest deserializeIsarServiceRequest(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _serviceRequest;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _serviceRequest = json;
    } else {
      _serviceRequest = const <String, dynamic>{};
    }
  }
  final object = IsarServiceRequest(
    id: _id,
    serviceRequest: _serviceRequest,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarServiceRequestProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarServiceRequestQueryFilter
    on QueryBuilder<IsarServiceRequest, IsarServiceRequest, QFilterCondition> {
  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarServiceRequestQueryObject
    on QueryBuilder<IsarServiceRequest, IsarServiceRequest, QFilterCondition> {}

extension IsarServiceRequestQuerySortBy
    on QueryBuilder<IsarServiceRequest, IsarServiceRequest, QSortBy> {
  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      sortByServiceRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      sortByServiceRequestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarServiceRequestQuerySortThenBy
    on QueryBuilder<IsarServiceRequest, IsarServiceRequest, QSortThenBy> {
  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      thenByServiceRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterSortBy>
      thenByServiceRequestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarServiceRequestQueryWhereDistinct
    on QueryBuilder<IsarServiceRequest, IsarServiceRequest, QDistinct> {
  QueryBuilder<IsarServiceRequest, IsarServiceRequest, QAfterDistinct>
      distinctByServiceRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarServiceRequestQueryProperty1
    on QueryBuilder<IsarServiceRequest, IsarServiceRequest, QProperty> {
  QueryBuilder<IsarServiceRequest, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarServiceRequest, Map<String, dynamic>, QAfterProperty>
      serviceRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarServiceRequestQueryProperty2<R>
    on QueryBuilder<IsarServiceRequest, R, QAfterProperty> {
  QueryBuilder<IsarServiceRequest, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarServiceRequest, (R, Map<String, dynamic>), QAfterProperty>
      serviceRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarServiceRequestQueryProperty3<R1, R2>
    on QueryBuilder<IsarServiceRequest, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarServiceRequest, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarServiceRequest, (R1, R2, Map<String, dynamic>), QOperations>
      serviceRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSlotCollection on Isar {
  IsarCollection<int, IsarSlot> get isarSlots => this.collection();
}

const IsarSlotSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSlot',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'slot',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarSlot>(
    serialize: serializeIsarSlot,
    deserialize: deserializeIsarSlot,
    deserializeProperty: deserializeIsarSlotProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSlot(IsarWriter writer, IsarSlot object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.slot));
  return object.id;
}

@isarProtected
IsarSlot deserializeIsarSlot(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _slot;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _slot = json;
    } else {
      _slot = const <String, dynamic>{};
    }
  }
  final object = IsarSlot(
    id: _id,
    slot: _slot,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarSlotProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarSlotQueryFilter
    on QueryBuilder<IsarSlot, IsarSlot, QFilterCondition> {
  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarSlotQueryObject
    on QueryBuilder<IsarSlot, IsarSlot, QFilterCondition> {}

extension IsarSlotQuerySortBy on QueryBuilder<IsarSlot, IsarSlot, QSortBy> {
  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> sortBySlot() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> sortBySlotDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSlotQuerySortThenBy
    on QueryBuilder<IsarSlot, IsarSlot, QSortThenBy> {
  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> thenBySlot() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSlot, IsarSlot, QAfterSortBy> thenBySlotDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSlotQueryWhereDistinct
    on QueryBuilder<IsarSlot, IsarSlot, QDistinct> {
  QueryBuilder<IsarSlot, IsarSlot, QAfterDistinct> distinctBySlot() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarSlotQueryProperty1
    on QueryBuilder<IsarSlot, IsarSlot, QProperty> {
  QueryBuilder<IsarSlot, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSlot, Map<String, dynamic>, QAfterProperty> slotProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSlotQueryProperty2<R>
    on QueryBuilder<IsarSlot, R, QAfterProperty> {
  QueryBuilder<IsarSlot, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSlot, (R, Map<String, dynamic>), QAfterProperty>
      slotProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSlotQueryProperty3<R1, R2>
    on QueryBuilder<IsarSlot, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSlot, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSlot, (R1, R2, Map<String, dynamic>), QOperations>
      slotProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSpecimenCollection on Isar {
  IsarCollection<int, IsarSpecimen> get isarSpecimens => this.collection();
}

const IsarSpecimenSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSpecimen',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'specimen',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarSpecimen>(
    serialize: serializeIsarSpecimen,
    deserialize: deserializeIsarSpecimen,
    deserializeProperty: deserializeIsarSpecimenProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSpecimen(IsarWriter writer, IsarSpecimen object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.specimen));
  return object.id;
}

@isarProtected
IsarSpecimen deserializeIsarSpecimen(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _specimen;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _specimen = json;
    } else {
      _specimen = const <String, dynamic>{};
    }
  }
  final object = IsarSpecimen(
    id: _id,
    specimen: _specimen,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarSpecimenProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarSpecimenQueryFilter
    on QueryBuilder<IsarSpecimen, IsarSpecimen, QFilterCondition> {
  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarSpecimenQueryObject
    on QueryBuilder<IsarSpecimen, IsarSpecimen, QFilterCondition> {}

extension IsarSpecimenQuerySortBy
    on QueryBuilder<IsarSpecimen, IsarSpecimen, QSortBy> {
  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> sortBySpecimen() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> sortBySpecimenDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSpecimenQuerySortThenBy
    on QueryBuilder<IsarSpecimen, IsarSpecimen, QSortThenBy> {
  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> thenBySpecimen() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterSortBy> thenBySpecimenDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSpecimenQueryWhereDistinct
    on QueryBuilder<IsarSpecimen, IsarSpecimen, QDistinct> {
  QueryBuilder<IsarSpecimen, IsarSpecimen, QAfterDistinct>
      distinctBySpecimen() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarSpecimenQueryProperty1
    on QueryBuilder<IsarSpecimen, IsarSpecimen, QProperty> {
  QueryBuilder<IsarSpecimen, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSpecimen, Map<String, dynamic>, QAfterProperty>
      specimenProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSpecimenQueryProperty2<R>
    on QueryBuilder<IsarSpecimen, R, QAfterProperty> {
  QueryBuilder<IsarSpecimen, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSpecimen, (R, Map<String, dynamic>), QAfterProperty>
      specimenProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSpecimenQueryProperty3<R1, R2>
    on QueryBuilder<IsarSpecimen, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSpecimen, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSpecimen, (R1, R2, Map<String, dynamic>), QOperations>
      specimenProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSpecimenDefinitionCollection on Isar {
  IsarCollection<int, IsarSpecimenDefinition> get isarSpecimenDefinitions =>
      this.collection();
}

const IsarSpecimenDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSpecimenDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'specimenDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarSpecimenDefinition>(
    serialize: serializeIsarSpecimenDefinition,
    deserialize: deserializeIsarSpecimenDefinition,
    deserializeProperty: deserializeIsarSpecimenDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSpecimenDefinition(
    IsarWriter writer, IsarSpecimenDefinition object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.specimenDefinition));
  return object.id;
}

@isarProtected
IsarSpecimenDefinition deserializeIsarSpecimenDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _specimenDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _specimenDefinition = json;
    } else {
      _specimenDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarSpecimenDefinition(
    id: _id,
    specimenDefinition: _specimenDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarSpecimenDefinitionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarSpecimenDefinitionQueryFilter on QueryBuilder<
    IsarSpecimenDefinition, IsarSpecimenDefinition, QFilterCondition> {
  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarSpecimenDefinitionQueryObject on QueryBuilder<
    IsarSpecimenDefinition, IsarSpecimenDefinition, QFilterCondition> {}

extension IsarSpecimenDefinitionQuerySortBy
    on QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QSortBy> {
  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      sortBySpecimenDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      sortBySpecimenDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSpecimenDefinitionQuerySortThenBy on QueryBuilder<
    IsarSpecimenDefinition, IsarSpecimenDefinition, QSortThenBy> {
  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      thenBySpecimenDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterSortBy>
      thenBySpecimenDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSpecimenDefinitionQueryWhereDistinct
    on QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QDistinct> {
  QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QAfterDistinct>
      distinctBySpecimenDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarSpecimenDefinitionQueryProperty1
    on QueryBuilder<IsarSpecimenDefinition, IsarSpecimenDefinition, QProperty> {
  QueryBuilder<IsarSpecimenDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, Map<String, dynamic>, QAfterProperty>
      specimenDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSpecimenDefinitionQueryProperty2<R>
    on QueryBuilder<IsarSpecimenDefinition, R, QAfterProperty> {
  QueryBuilder<IsarSpecimenDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, (R, Map<String, dynamic>),
      QAfterProperty> specimenDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSpecimenDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarSpecimenDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSpecimenDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSpecimenDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> specimenDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarStructureDefinitionCollection on Isar {
  IsarCollection<int, IsarStructureDefinition> get isarStructureDefinitions =>
      this.collection();
}

const IsarStructureDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarStructureDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'structureDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarStructureDefinition>(
    serialize: serializeIsarStructureDefinition,
    deserialize: deserializeIsarStructureDefinition,
    deserializeProperty: deserializeIsarStructureDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarStructureDefinition(
    IsarWriter writer, IsarStructureDefinition object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.structureDefinition));
  return object.id;
}

@isarProtected
IsarStructureDefinition deserializeIsarStructureDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _structureDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _structureDefinition = json;
    } else {
      _structureDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarStructureDefinition(
    id: _id,
    structureDefinition: _structureDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarStructureDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarStructureDefinitionQueryFilter on QueryBuilder<
    IsarStructureDefinition, IsarStructureDefinition, QFilterCondition> {
  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarStructureDefinitionQueryObject on QueryBuilder<
    IsarStructureDefinition, IsarStructureDefinition, QFilterCondition> {}

extension IsarStructureDefinitionQuerySortBy
    on QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QSortBy> {
  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      sortByStructureDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      sortByStructureDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarStructureDefinitionQuerySortThenBy on QueryBuilder<
    IsarStructureDefinition, IsarStructureDefinition, QSortThenBy> {
  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      thenByStructureDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterSortBy>
      thenByStructureDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarStructureDefinitionQueryWhereDistinct on QueryBuilder<
    IsarStructureDefinition, IsarStructureDefinition, QDistinct> {
  QueryBuilder<IsarStructureDefinition, IsarStructureDefinition, QAfterDistinct>
      distinctByStructureDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarStructureDefinitionQueryProperty1 on QueryBuilder<
    IsarStructureDefinition, IsarStructureDefinition, QProperty> {
  QueryBuilder<IsarStructureDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarStructureDefinition, Map<String, dynamic>, QAfterProperty>
      structureDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarStructureDefinitionQueryProperty2<R>
    on QueryBuilder<IsarStructureDefinition, R, QAfterProperty> {
  QueryBuilder<IsarStructureDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarStructureDefinition, (R, Map<String, dynamic>),
      QAfterProperty> structureDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarStructureDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarStructureDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarStructureDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarStructureDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> structureDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarStructureMapCollection on Isar {
  IsarCollection<int, IsarStructureMap> get isarStructureMaps =>
      this.collection();
}

const IsarStructureMapSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarStructureMap',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'structureMap',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarStructureMap>(
    serialize: serializeIsarStructureMap,
    deserialize: deserializeIsarStructureMap,
    deserializeProperty: deserializeIsarStructureMapProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarStructureMap(IsarWriter writer, IsarStructureMap object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.structureMap));
  return object.id;
}

@isarProtected
IsarStructureMap deserializeIsarStructureMap(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _structureMap;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _structureMap = json;
    } else {
      _structureMap = const <String, dynamic>{};
    }
  }
  final object = IsarStructureMap(
    id: _id,
    structureMap: _structureMap,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarStructureMapProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarStructureMapQueryFilter
    on QueryBuilder<IsarStructureMap, IsarStructureMap, QFilterCondition> {
  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarStructureMapQueryObject
    on QueryBuilder<IsarStructureMap, IsarStructureMap, QFilterCondition> {}

extension IsarStructureMapQuerySortBy
    on QueryBuilder<IsarStructureMap, IsarStructureMap, QSortBy> {
  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy>
      sortByStructureMap() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy>
      sortByStructureMapDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarStructureMapQuerySortThenBy
    on QueryBuilder<IsarStructureMap, IsarStructureMap, QSortThenBy> {
  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy>
      thenByStructureMap() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterSortBy>
      thenByStructureMapDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarStructureMapQueryWhereDistinct
    on QueryBuilder<IsarStructureMap, IsarStructureMap, QDistinct> {
  QueryBuilder<IsarStructureMap, IsarStructureMap, QAfterDistinct>
      distinctByStructureMap() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarStructureMapQueryProperty1
    on QueryBuilder<IsarStructureMap, IsarStructureMap, QProperty> {
  QueryBuilder<IsarStructureMap, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarStructureMap, Map<String, dynamic>, QAfterProperty>
      structureMapProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarStructureMapQueryProperty2<R>
    on QueryBuilder<IsarStructureMap, R, QAfterProperty> {
  QueryBuilder<IsarStructureMap, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarStructureMap, (R, Map<String, dynamic>), QAfterProperty>
      structureMapProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarStructureMapQueryProperty3<R1, R2>
    on QueryBuilder<IsarStructureMap, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarStructureMap, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarStructureMap, (R1, R2, Map<String, dynamic>), QOperations>
      structureMapProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSubscriptionCollection on Isar {
  IsarCollection<int, IsarSubscription> get isarSubscriptions =>
      this.collection();
}

const IsarSubscriptionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSubscription',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'subscription',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarSubscription>(
    serialize: serializeIsarSubscription,
    deserialize: deserializeIsarSubscription,
    deserializeProperty: deserializeIsarSubscriptionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSubscription(IsarWriter writer, IsarSubscription object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.subscription));
  return object.id;
}

@isarProtected
IsarSubscription deserializeIsarSubscription(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _subscription;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _subscription = json;
    } else {
      _subscription = const <String, dynamic>{};
    }
  }
  final object = IsarSubscription(
    id: _id,
    subscription: _subscription,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarSubscriptionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarSubscriptionQueryFilter
    on QueryBuilder<IsarSubscription, IsarSubscription, QFilterCondition> {
  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarSubscriptionQueryObject
    on QueryBuilder<IsarSubscription, IsarSubscription, QFilterCondition> {}

extension IsarSubscriptionQuerySortBy
    on QueryBuilder<IsarSubscription, IsarSubscription, QSortBy> {
  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy>
      sortBySubscription() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy>
      sortBySubscriptionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSubscriptionQuerySortThenBy
    on QueryBuilder<IsarSubscription, IsarSubscription, QSortThenBy> {
  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy>
      thenBySubscription() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSubscription, IsarSubscription, QAfterSortBy>
      thenBySubscriptionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSubscriptionQueryWhereDistinct
    on QueryBuilder<IsarSubscription, IsarSubscription, QDistinct> {
  QueryBuilder<IsarSubscription, IsarSubscription, QAfterDistinct>
      distinctBySubscription() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarSubscriptionQueryProperty1
    on QueryBuilder<IsarSubscription, IsarSubscription, QProperty> {
  QueryBuilder<IsarSubscription, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubscription, Map<String, dynamic>, QAfterProperty>
      subscriptionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSubscriptionQueryProperty2<R>
    on QueryBuilder<IsarSubscription, R, QAfterProperty> {
  QueryBuilder<IsarSubscription, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubscription, (R, Map<String, dynamic>), QAfterProperty>
      subscriptionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSubscriptionQueryProperty3<R1, R2>
    on QueryBuilder<IsarSubscription, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSubscription, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubscription, (R1, R2, Map<String, dynamic>), QOperations>
      subscriptionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSubscriptionStatusCollection on Isar {
  IsarCollection<int, IsarSubscriptionStatus> get isarSubscriptionStatus =>
      this.collection();
}

const IsarSubscriptionStatusSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSubscriptionStatus',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'subscriptionStatus',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarSubscriptionStatus>(
    serialize: serializeIsarSubscriptionStatus,
    deserialize: deserializeIsarSubscriptionStatus,
    deserializeProperty: deserializeIsarSubscriptionStatusProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSubscriptionStatus(
    IsarWriter writer, IsarSubscriptionStatus object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.subscriptionStatus));
  return object.id;
}

@isarProtected
IsarSubscriptionStatus deserializeIsarSubscriptionStatus(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _subscriptionStatus;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _subscriptionStatus = json;
    } else {
      _subscriptionStatus = const <String, dynamic>{};
    }
  }
  final object = IsarSubscriptionStatus(
    id: _id,
    subscriptionStatus: _subscriptionStatus,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarSubscriptionStatusProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarSubscriptionStatusQueryFilter on QueryBuilder<
    IsarSubscriptionStatus, IsarSubscriptionStatus, QFilterCondition> {
  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarSubscriptionStatusQueryObject on QueryBuilder<
    IsarSubscriptionStatus, IsarSubscriptionStatus, QFilterCondition> {}

extension IsarSubscriptionStatusQuerySortBy
    on QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QSortBy> {
  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      sortBySubscriptionStatus() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      sortBySubscriptionStatusDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSubscriptionStatusQuerySortThenBy on QueryBuilder<
    IsarSubscriptionStatus, IsarSubscriptionStatus, QSortThenBy> {
  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      thenBySubscriptionStatus() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterSortBy>
      thenBySubscriptionStatusDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSubscriptionStatusQueryWhereDistinct
    on QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QDistinct> {
  QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QAfterDistinct>
      distinctBySubscriptionStatus() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarSubscriptionStatusQueryProperty1
    on QueryBuilder<IsarSubscriptionStatus, IsarSubscriptionStatus, QProperty> {
  QueryBuilder<IsarSubscriptionStatus, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, Map<String, dynamic>, QAfterProperty>
      subscriptionStatusProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSubscriptionStatusQueryProperty2<R>
    on QueryBuilder<IsarSubscriptionStatus, R, QAfterProperty> {
  QueryBuilder<IsarSubscriptionStatus, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, (R, Map<String, dynamic>),
      QAfterProperty> subscriptionStatusProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSubscriptionStatusQueryProperty3<R1, R2>
    on QueryBuilder<IsarSubscriptionStatus, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSubscriptionStatus, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubscriptionStatus, (R1, R2, Map<String, dynamic>),
      QOperations> subscriptionStatusProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSubscriptionTopicCollection on Isar {
  IsarCollection<int, IsarSubscriptionTopic> get isarSubscriptionTopics =>
      this.collection();
}

const IsarSubscriptionTopicSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSubscriptionTopic',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'subscriptionTopic',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarSubscriptionTopic>(
    serialize: serializeIsarSubscriptionTopic,
    deserialize: deserializeIsarSubscriptionTopic,
    deserializeProperty: deserializeIsarSubscriptionTopicProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSubscriptionTopic(
    IsarWriter writer, IsarSubscriptionTopic object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.subscriptionTopic));
  return object.id;
}

@isarProtected
IsarSubscriptionTopic deserializeIsarSubscriptionTopic(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _subscriptionTopic;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _subscriptionTopic = json;
    } else {
      _subscriptionTopic = const <String, dynamic>{};
    }
  }
  final object = IsarSubscriptionTopic(
    id: _id,
    subscriptionTopic: _subscriptionTopic,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarSubscriptionTopicProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarSubscriptionTopicQueryFilter on QueryBuilder<
    IsarSubscriptionTopic, IsarSubscriptionTopic, QFilterCondition> {
  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarSubscriptionTopicQueryObject on QueryBuilder<
    IsarSubscriptionTopic, IsarSubscriptionTopic, QFilterCondition> {}

extension IsarSubscriptionTopicQuerySortBy
    on QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QSortBy> {
  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      sortBySubscriptionTopic() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      sortBySubscriptionTopicDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSubscriptionTopicQuerySortThenBy
    on QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QSortThenBy> {
  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      thenBySubscriptionTopic() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterSortBy>
      thenBySubscriptionTopicDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSubscriptionTopicQueryWhereDistinct
    on QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QDistinct> {
  QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QAfterDistinct>
      distinctBySubscriptionTopic() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarSubscriptionTopicQueryProperty1
    on QueryBuilder<IsarSubscriptionTopic, IsarSubscriptionTopic, QProperty> {
  QueryBuilder<IsarSubscriptionTopic, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, Map<String, dynamic>, QAfterProperty>
      subscriptionTopicProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSubscriptionTopicQueryProperty2<R>
    on QueryBuilder<IsarSubscriptionTopic, R, QAfterProperty> {
  QueryBuilder<IsarSubscriptionTopic, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, (R, Map<String, dynamic>), QAfterProperty>
      subscriptionTopicProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSubscriptionTopicQueryProperty3<R1, R2>
    on QueryBuilder<IsarSubscriptionTopic, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSubscriptionTopic, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubscriptionTopic, (R1, R2, Map<String, dynamic>),
      QOperations> subscriptionTopicProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSubstanceCollection on Isar {
  IsarCollection<int, IsarSubstance> get isarSubstances => this.collection();
}

const IsarSubstanceSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSubstance',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'substance',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarSubstance>(
    serialize: serializeIsarSubstance,
    deserialize: deserializeIsarSubstance,
    deserializeProperty: deserializeIsarSubstanceProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSubstance(IsarWriter writer, IsarSubstance object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.substance));
  return object.id;
}

@isarProtected
IsarSubstance deserializeIsarSubstance(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _substance;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _substance = json;
    } else {
      _substance = const <String, dynamic>{};
    }
  }
  final object = IsarSubstance(
    id: _id,
    substance: _substance,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarSubstanceProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarSubstanceQueryFilter
    on QueryBuilder<IsarSubstance, IsarSubstance, QFilterCondition> {
  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarSubstanceQueryObject
    on QueryBuilder<IsarSubstance, IsarSubstance, QFilterCondition> {}

extension IsarSubstanceQuerySortBy
    on QueryBuilder<IsarSubstance, IsarSubstance, QSortBy> {
  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy> sortBySubstance() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy>
      sortBySubstanceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSubstanceQuerySortThenBy
    on QueryBuilder<IsarSubstance, IsarSubstance, QSortThenBy> {
  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy> thenBySubstance() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSubstance, IsarSubstance, QAfterSortBy>
      thenBySubstanceDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSubstanceQueryWhereDistinct
    on QueryBuilder<IsarSubstance, IsarSubstance, QDistinct> {
  QueryBuilder<IsarSubstance, IsarSubstance, QAfterDistinct>
      distinctBySubstance() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarSubstanceQueryProperty1
    on QueryBuilder<IsarSubstance, IsarSubstance, QProperty> {
  QueryBuilder<IsarSubstance, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubstance, Map<String, dynamic>, QAfterProperty>
      substanceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSubstanceQueryProperty2<R>
    on QueryBuilder<IsarSubstance, R, QAfterProperty> {
  QueryBuilder<IsarSubstance, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubstance, (R, Map<String, dynamic>), QAfterProperty>
      substanceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSubstanceQueryProperty3<R1, R2>
    on QueryBuilder<IsarSubstance, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSubstance, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubstance, (R1, R2, Map<String, dynamic>), QOperations>
      substanceProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSubstanceDefinitionCollection on Isar {
  IsarCollection<int, IsarSubstanceDefinition> get isarSubstanceDefinitions =>
      this.collection();
}

const IsarSubstanceDefinitionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSubstanceDefinition',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'substanceDefinition',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarSubstanceDefinition>(
    serialize: serializeIsarSubstanceDefinition,
    deserialize: deserializeIsarSubstanceDefinition,
    deserializeProperty: deserializeIsarSubstanceDefinitionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSubstanceDefinition(
    IsarWriter writer, IsarSubstanceDefinition object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.substanceDefinition));
  return object.id;
}

@isarProtected
IsarSubstanceDefinition deserializeIsarSubstanceDefinition(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _substanceDefinition;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _substanceDefinition = json;
    } else {
      _substanceDefinition = const <String, dynamic>{};
    }
  }
  final object = IsarSubstanceDefinition(
    id: _id,
    substanceDefinition: _substanceDefinition,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarSubstanceDefinitionProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarSubstanceDefinitionQueryFilter on QueryBuilder<
    IsarSubstanceDefinition, IsarSubstanceDefinition, QFilterCondition> {
  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarSubstanceDefinitionQueryObject on QueryBuilder<
    IsarSubstanceDefinition, IsarSubstanceDefinition, QFilterCondition> {}

extension IsarSubstanceDefinitionQuerySortBy
    on QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QSortBy> {
  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      sortBySubstanceDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      sortBySubstanceDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSubstanceDefinitionQuerySortThenBy on QueryBuilder<
    IsarSubstanceDefinition, IsarSubstanceDefinition, QSortThenBy> {
  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      thenBySubstanceDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterSortBy>
      thenBySubstanceDefinitionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSubstanceDefinitionQueryWhereDistinct on QueryBuilder<
    IsarSubstanceDefinition, IsarSubstanceDefinition, QDistinct> {
  QueryBuilder<IsarSubstanceDefinition, IsarSubstanceDefinition, QAfterDistinct>
      distinctBySubstanceDefinition() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarSubstanceDefinitionQueryProperty1 on QueryBuilder<
    IsarSubstanceDefinition, IsarSubstanceDefinition, QProperty> {
  QueryBuilder<IsarSubstanceDefinition, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, Map<String, dynamic>, QAfterProperty>
      substanceDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSubstanceDefinitionQueryProperty2<R>
    on QueryBuilder<IsarSubstanceDefinition, R, QAfterProperty> {
  QueryBuilder<IsarSubstanceDefinition, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, (R, Map<String, dynamic>),
      QAfterProperty> substanceDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSubstanceDefinitionQueryProperty3<R1, R2>
    on QueryBuilder<IsarSubstanceDefinition, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSubstanceDefinition, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSubstanceDefinition, (R1, R2, Map<String, dynamic>),
      QOperations> substanceDefinitionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSupplyDeliveryCollection on Isar {
  IsarCollection<int, IsarSupplyDelivery> get isarSupplyDeliverys =>
      this.collection();
}

const IsarSupplyDeliverySchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSupplyDelivery',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'supplyDelivery',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarSupplyDelivery>(
    serialize: serializeIsarSupplyDelivery,
    deserialize: deserializeIsarSupplyDelivery,
    deserializeProperty: deserializeIsarSupplyDeliveryProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSupplyDelivery(IsarWriter writer, IsarSupplyDelivery object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.supplyDelivery));
  return object.id;
}

@isarProtected
IsarSupplyDelivery deserializeIsarSupplyDelivery(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _supplyDelivery;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _supplyDelivery = json;
    } else {
      _supplyDelivery = const <String, dynamic>{};
    }
  }
  final object = IsarSupplyDelivery(
    id: _id,
    supplyDelivery: _supplyDelivery,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarSupplyDeliveryProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarSupplyDeliveryQueryFilter
    on QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QFilterCondition> {
  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarSupplyDeliveryQueryObject
    on QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QFilterCondition> {}

extension IsarSupplyDeliveryQuerySortBy
    on QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QSortBy> {
  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      sortBySupplyDelivery() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      sortBySupplyDeliveryDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSupplyDeliveryQuerySortThenBy
    on QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QSortThenBy> {
  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      thenBySupplyDelivery() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterSortBy>
      thenBySupplyDeliveryDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSupplyDeliveryQueryWhereDistinct
    on QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QDistinct> {
  QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QAfterDistinct>
      distinctBySupplyDelivery() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarSupplyDeliveryQueryProperty1
    on QueryBuilder<IsarSupplyDelivery, IsarSupplyDelivery, QProperty> {
  QueryBuilder<IsarSupplyDelivery, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSupplyDelivery, Map<String, dynamic>, QAfterProperty>
      supplyDeliveryProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSupplyDeliveryQueryProperty2<R>
    on QueryBuilder<IsarSupplyDelivery, R, QAfterProperty> {
  QueryBuilder<IsarSupplyDelivery, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSupplyDelivery, (R, Map<String, dynamic>), QAfterProperty>
      supplyDeliveryProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSupplyDeliveryQueryProperty3<R1, R2>
    on QueryBuilder<IsarSupplyDelivery, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSupplyDelivery, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSupplyDelivery, (R1, R2, Map<String, dynamic>), QOperations>
      supplyDeliveryProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarSupplyRequestCollection on Isar {
  IsarCollection<int, IsarSupplyRequest> get isarSupplyRequests =>
      this.collection();
}

const IsarSupplyRequestSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarSupplyRequest',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'supplyRequest',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarSupplyRequest>(
    serialize: serializeIsarSupplyRequest,
    deserialize: deserializeIsarSupplyRequest,
    deserializeProperty: deserializeIsarSupplyRequestProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarSupplyRequest(IsarWriter writer, IsarSupplyRequest object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.supplyRequest));
  return object.id;
}

@isarProtected
IsarSupplyRequest deserializeIsarSupplyRequest(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _supplyRequest;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _supplyRequest = json;
    } else {
      _supplyRequest = const <String, dynamic>{};
    }
  }
  final object = IsarSupplyRequest(
    id: _id,
    supplyRequest: _supplyRequest,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarSupplyRequestProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarSupplyRequestQueryFilter
    on QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QFilterCondition> {
  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterFilterCondition>
      idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarSupplyRequestQueryObject
    on QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QFilterCondition> {}

extension IsarSupplyRequestQuerySortBy
    on QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QSortBy> {
  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy>
      sortBySupplyRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy>
      sortBySupplyRequestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSupplyRequestQuerySortThenBy
    on QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QSortThenBy> {
  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy>
      thenBySupplyRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterSortBy>
      thenBySupplyRequestDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarSupplyRequestQueryWhereDistinct
    on QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QDistinct> {
  QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QAfterDistinct>
      distinctBySupplyRequest() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarSupplyRequestQueryProperty1
    on QueryBuilder<IsarSupplyRequest, IsarSupplyRequest, QProperty> {
  QueryBuilder<IsarSupplyRequest, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSupplyRequest, Map<String, dynamic>, QAfterProperty>
      supplyRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSupplyRequestQueryProperty2<R>
    on QueryBuilder<IsarSupplyRequest, R, QAfterProperty> {
  QueryBuilder<IsarSupplyRequest, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSupplyRequest, (R, Map<String, dynamic>), QAfterProperty>
      supplyRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarSupplyRequestQueryProperty3<R1, R2>
    on QueryBuilder<IsarSupplyRequest, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarSupplyRequest, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarSupplyRequest, (R1, R2, Map<String, dynamic>), QOperations>
      supplyRequestProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarTaskCollection on Isar {
  IsarCollection<int, IsarTask> get isarTasks => this.collection();
}

const IsarTaskSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarTask',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'task',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarTask>(
    serialize: serializeIsarTask,
    deserialize: deserializeIsarTask,
    deserializeProperty: deserializeIsarTaskProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarTask(IsarWriter writer, IsarTask object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.task));
  return object.id;
}

@isarProtected
IsarTask deserializeIsarTask(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _task;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _task = json;
    } else {
      _task = const <String, dynamic>{};
    }
  }
  final object = IsarTask(
    id: _id,
    task: _task,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarTaskProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarTaskQueryFilter
    on QueryBuilder<IsarTask, IsarTask, QFilterCondition> {
  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarTaskQueryObject
    on QueryBuilder<IsarTask, IsarTask, QFilterCondition> {}

extension IsarTaskQuerySortBy on QueryBuilder<IsarTask, IsarTask, QSortBy> {
  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> sortByTask() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> sortByTaskDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarTaskQuerySortThenBy
    on QueryBuilder<IsarTask, IsarTask, QSortThenBy> {
  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> thenByTask() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarTask, IsarTask, QAfterSortBy> thenByTaskDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarTaskQueryWhereDistinct
    on QueryBuilder<IsarTask, IsarTask, QDistinct> {
  QueryBuilder<IsarTask, IsarTask, QAfterDistinct> distinctByTask() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarTaskQueryProperty1
    on QueryBuilder<IsarTask, IsarTask, QProperty> {
  QueryBuilder<IsarTask, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTask, Map<String, dynamic>, QAfterProperty> taskProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarTaskQueryProperty2<R>
    on QueryBuilder<IsarTask, R, QAfterProperty> {
  QueryBuilder<IsarTask, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTask, (R, Map<String, dynamic>), QAfterProperty>
      taskProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarTaskQueryProperty3<R1, R2>
    on QueryBuilder<IsarTask, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarTask, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTask, (R1, R2, Map<String, dynamic>), QOperations>
      taskProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarTerminologyCapabilitiesCollection on Isar {
  IsarCollection<int, IsarTerminologyCapabilities>
      get isarTerminologyCapabilities => this.collection();
}

const IsarTerminologyCapabilitiesSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarTerminologyCapabilities',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'terminologyCapabilities',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarTerminologyCapabilities>(
    serialize: serializeIsarTerminologyCapabilities,
    deserialize: deserializeIsarTerminologyCapabilities,
    deserializeProperty: deserializeIsarTerminologyCapabilitiesProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarTerminologyCapabilities(
    IsarWriter writer, IsarTerminologyCapabilities object) {
  IsarCore.writeString(
      writer, 1, isarJsonEncode(object.terminologyCapabilities));
  return object.id;
}

@isarProtected
IsarTerminologyCapabilities deserializeIsarTerminologyCapabilities(
    IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _terminologyCapabilities;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _terminologyCapabilities = json;
    } else {
      _terminologyCapabilities = const <String, dynamic>{};
    }
  }
  final object = IsarTerminologyCapabilities(
    id: _id,
    terminologyCapabilities: _terminologyCapabilities,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarTerminologyCapabilitiesProp(
    IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarTerminologyCapabilitiesQueryFilter on QueryBuilder<
    IsarTerminologyCapabilities,
    IsarTerminologyCapabilities,
    QFilterCondition> {
  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarTerminologyCapabilitiesQueryObject on QueryBuilder<
    IsarTerminologyCapabilities,
    IsarTerminologyCapabilities,
    QFilterCondition> {}

extension IsarTerminologyCapabilitiesQuerySortBy on QueryBuilder<
    IsarTerminologyCapabilities, IsarTerminologyCapabilities, QSortBy> {
  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> sortByTerminologyCapabilities() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> sortByTerminologyCapabilitiesDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarTerminologyCapabilitiesQuerySortThenBy on QueryBuilder<
    IsarTerminologyCapabilities, IsarTerminologyCapabilities, QSortThenBy> {
  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> thenByTerminologyCapabilities() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterSortBy> thenByTerminologyCapabilitiesDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarTerminologyCapabilitiesQueryWhereDistinct on QueryBuilder<
    IsarTerminologyCapabilities, IsarTerminologyCapabilities, QDistinct> {
  QueryBuilder<IsarTerminologyCapabilities, IsarTerminologyCapabilities,
      QAfterDistinct> distinctByTerminologyCapabilities() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarTerminologyCapabilitiesQueryProperty1 on QueryBuilder<
    IsarTerminologyCapabilities, IsarTerminologyCapabilities, QProperty> {
  QueryBuilder<IsarTerminologyCapabilities, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, Map<String, dynamic>,
      QAfterProperty> terminologyCapabilitiesProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarTerminologyCapabilitiesQueryProperty2<R>
    on QueryBuilder<IsarTerminologyCapabilities, R, QAfterProperty> {
  QueryBuilder<IsarTerminologyCapabilities, (R, int), QAfterProperty>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, (R, Map<String, dynamic>),
      QAfterProperty> terminologyCapabilitiesProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarTerminologyCapabilitiesQueryProperty3<R1, R2>
    on QueryBuilder<IsarTerminologyCapabilities, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarTerminologyCapabilities, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTerminologyCapabilities, (R1, R2, Map<String, dynamic>),
      QOperations> terminologyCapabilitiesProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarTestReportCollection on Isar {
  IsarCollection<int, IsarTestReport> get isarTestReports => this.collection();
}

const IsarTestReportSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarTestReport',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'testReport',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarTestReport>(
    serialize: serializeIsarTestReport,
    deserialize: deserializeIsarTestReport,
    deserializeProperty: deserializeIsarTestReportProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarTestReport(IsarWriter writer, IsarTestReport object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.testReport));
  return object.id;
}

@isarProtected
IsarTestReport deserializeIsarTestReport(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _testReport;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _testReport = json;
    } else {
      _testReport = const <String, dynamic>{};
    }
  }
  final object = IsarTestReport(
    id: _id,
    testReport: _testReport,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarTestReportProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarTestReportQueryFilter
    on QueryBuilder<IsarTestReport, IsarTestReport, QFilterCondition> {
  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarTestReportQueryObject
    on QueryBuilder<IsarTestReport, IsarTestReport, QFilterCondition> {}

extension IsarTestReportQuerySortBy
    on QueryBuilder<IsarTestReport, IsarTestReport, QSortBy> {
  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy>
      sortByTestReport() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy>
      sortByTestReportDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarTestReportQuerySortThenBy
    on QueryBuilder<IsarTestReport, IsarTestReport, QSortThenBy> {
  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy>
      thenByTestReport() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarTestReport, IsarTestReport, QAfterSortBy>
      thenByTestReportDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarTestReportQueryWhereDistinct
    on QueryBuilder<IsarTestReport, IsarTestReport, QDistinct> {
  QueryBuilder<IsarTestReport, IsarTestReport, QAfterDistinct>
      distinctByTestReport() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarTestReportQueryProperty1
    on QueryBuilder<IsarTestReport, IsarTestReport, QProperty> {
  QueryBuilder<IsarTestReport, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTestReport, Map<String, dynamic>, QAfterProperty>
      testReportProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarTestReportQueryProperty2<R>
    on QueryBuilder<IsarTestReport, R, QAfterProperty> {
  QueryBuilder<IsarTestReport, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTestReport, (R, Map<String, dynamic>), QAfterProperty>
      testReportProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarTestReportQueryProperty3<R1, R2>
    on QueryBuilder<IsarTestReport, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarTestReport, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTestReport, (R1, R2, Map<String, dynamic>), QOperations>
      testReportProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarTestScriptCollection on Isar {
  IsarCollection<int, IsarTestScript> get isarTestScripts => this.collection();
}

const IsarTestScriptSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarTestScript',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'testScript',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarTestScript>(
    serialize: serializeIsarTestScript,
    deserialize: deserializeIsarTestScript,
    deserializeProperty: deserializeIsarTestScriptProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarTestScript(IsarWriter writer, IsarTestScript object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.testScript));
  return object.id;
}

@isarProtected
IsarTestScript deserializeIsarTestScript(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _testScript;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _testScript = json;
    } else {
      _testScript = const <String, dynamic>{};
    }
  }
  final object = IsarTestScript(
    id: _id,
    testScript: _testScript,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarTestScriptProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarTestScriptQueryFilter
    on QueryBuilder<IsarTestScript, IsarTestScript, QFilterCondition> {
  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarTestScriptQueryObject
    on QueryBuilder<IsarTestScript, IsarTestScript, QFilterCondition> {}

extension IsarTestScriptQuerySortBy
    on QueryBuilder<IsarTestScript, IsarTestScript, QSortBy> {
  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy>
      sortByTestScript() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy>
      sortByTestScriptDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarTestScriptQuerySortThenBy
    on QueryBuilder<IsarTestScript, IsarTestScript, QSortThenBy> {
  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy>
      thenByTestScript() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarTestScript, IsarTestScript, QAfterSortBy>
      thenByTestScriptDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarTestScriptQueryWhereDistinct
    on QueryBuilder<IsarTestScript, IsarTestScript, QDistinct> {
  QueryBuilder<IsarTestScript, IsarTestScript, QAfterDistinct>
      distinctByTestScript() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarTestScriptQueryProperty1
    on QueryBuilder<IsarTestScript, IsarTestScript, QProperty> {
  QueryBuilder<IsarTestScript, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTestScript, Map<String, dynamic>, QAfterProperty>
      testScriptProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarTestScriptQueryProperty2<R>
    on QueryBuilder<IsarTestScript, R, QAfterProperty> {
  QueryBuilder<IsarTestScript, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTestScript, (R, Map<String, dynamic>), QAfterProperty>
      testScriptProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarTestScriptQueryProperty3<R1, R2>
    on QueryBuilder<IsarTestScript, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarTestScript, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarTestScript, (R1, R2, Map<String, dynamic>), QOperations>
      testScriptProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarValueSetCollection on Isar {
  IsarCollection<int, IsarValueSet> get isarValueSets => this.collection();
}

const IsarValueSetSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarValueSet',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'valueSet',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarValueSet>(
    serialize: serializeIsarValueSet,
    deserialize: deserializeIsarValueSet,
    deserializeProperty: deserializeIsarValueSetProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarValueSet(IsarWriter writer, IsarValueSet object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.valueSet));
  return object.id;
}

@isarProtected
IsarValueSet deserializeIsarValueSet(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _valueSet;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _valueSet = json;
    } else {
      _valueSet = const <String, dynamic>{};
    }
  }
  final object = IsarValueSet(
    id: _id,
    valueSet: _valueSet,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarValueSetProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarValueSetQueryFilter
    on QueryBuilder<IsarValueSet, IsarValueSet, QFilterCondition> {
  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition>
      idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition>
      idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarValueSetQueryObject
    on QueryBuilder<IsarValueSet, IsarValueSet, QFilterCondition> {}

extension IsarValueSetQuerySortBy
    on QueryBuilder<IsarValueSet, IsarValueSet, QSortBy> {
  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> sortByValueSet() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> sortByValueSetDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarValueSetQuerySortThenBy
    on QueryBuilder<IsarValueSet, IsarValueSet, QSortThenBy> {
  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> thenByValueSet() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarValueSet, IsarValueSet, QAfterSortBy> thenByValueSetDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarValueSetQueryWhereDistinct
    on QueryBuilder<IsarValueSet, IsarValueSet, QDistinct> {
  QueryBuilder<IsarValueSet, IsarValueSet, QAfterDistinct>
      distinctByValueSet() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarValueSetQueryProperty1
    on QueryBuilder<IsarValueSet, IsarValueSet, QProperty> {
  QueryBuilder<IsarValueSet, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarValueSet, Map<String, dynamic>, QAfterProperty>
      valueSetProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarValueSetQueryProperty2<R>
    on QueryBuilder<IsarValueSet, R, QAfterProperty> {
  QueryBuilder<IsarValueSet, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarValueSet, (R, Map<String, dynamic>), QAfterProperty>
      valueSetProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarValueSetQueryProperty3<R1, R2>
    on QueryBuilder<IsarValueSet, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarValueSet, (R1, R2, int), QOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarValueSet, (R1, R2, Map<String, dynamic>), QOperations>
      valueSetProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarVerificationResultCollection on Isar {
  IsarCollection<int, IsarVerificationResult> get isarVerificationResults =>
      this.collection();
}

const IsarVerificationResultSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarVerificationResult',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'verificationResult',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarVerificationResult>(
    serialize: serializeIsarVerificationResult,
    deserialize: deserializeIsarVerificationResult,
    deserializeProperty: deserializeIsarVerificationResultProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarVerificationResult(
    IsarWriter writer, IsarVerificationResult object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.verificationResult));
  return object.id;
}

@isarProtected
IsarVerificationResult deserializeIsarVerificationResult(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _verificationResult;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _verificationResult = json;
    } else {
      _verificationResult = const <String, dynamic>{};
    }
  }
  final object = IsarVerificationResult(
    id: _id,
    verificationResult: _verificationResult,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarVerificationResultProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarVerificationResultQueryFilter on QueryBuilder<
    IsarVerificationResult, IsarVerificationResult, QFilterCondition> {
  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarVerificationResultQueryObject on QueryBuilder<
    IsarVerificationResult, IsarVerificationResult, QFilterCondition> {}

extension IsarVerificationResultQuerySortBy
    on QueryBuilder<IsarVerificationResult, IsarVerificationResult, QSortBy> {
  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      sortByVerificationResult() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      sortByVerificationResultDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarVerificationResultQuerySortThenBy on QueryBuilder<
    IsarVerificationResult, IsarVerificationResult, QSortThenBy> {
  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      thenByVerificationResult() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterSortBy>
      thenByVerificationResultDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarVerificationResultQueryWhereDistinct
    on QueryBuilder<IsarVerificationResult, IsarVerificationResult, QDistinct> {
  QueryBuilder<IsarVerificationResult, IsarVerificationResult, QAfterDistinct>
      distinctByVerificationResult() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarVerificationResultQueryProperty1
    on QueryBuilder<IsarVerificationResult, IsarVerificationResult, QProperty> {
  QueryBuilder<IsarVerificationResult, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarVerificationResult, Map<String, dynamic>, QAfterProperty>
      verificationResultProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarVerificationResultQueryProperty2<R>
    on QueryBuilder<IsarVerificationResult, R, QAfterProperty> {
  QueryBuilder<IsarVerificationResult, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarVerificationResult, (R, Map<String, dynamic>),
      QAfterProperty> verificationResultProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarVerificationResultQueryProperty3<R1, R2>
    on QueryBuilder<IsarVerificationResult, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarVerificationResult, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarVerificationResult, (R1, R2, Map<String, dynamic>),
      QOperations> verificationResultProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, invalid_use_of_protected_member, lines_longer_than_80_chars, constant_identifier_names, avoid_js_rounded_ints, no_leading_underscores_for_local_identifiers, require_trailing_commas, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_in_if_null_operators, library_private_types_in_public_api, prefer_const_constructors
// ignore_for_file: type=lint

extension GetIsarVisionPrescriptionCollection on Isar {
  IsarCollection<int, IsarVisionPrescription> get isarVisionPrescriptions =>
      this.collection();
}

const IsarVisionPrescriptionSchema = IsarGeneratedSchema(
  schema: IsarSchema(
    name: 'IsarVisionPrescription',
    idName: 'id',
    embedded: false,
    properties: [
      IsarPropertySchema(
        name: 'visionPrescription',
        type: IsarType.json,
      ),
    ],
    indexes: [],
  ),
  converter: IsarObjectConverter<int, IsarVisionPrescription>(
    serialize: serializeIsarVisionPrescription,
    deserialize: deserializeIsarVisionPrescription,
    deserializeProperty: deserializeIsarVisionPrescriptionProp,
  ),
  embeddedSchemas: [],
);

@isarProtected
int serializeIsarVisionPrescription(
    IsarWriter writer, IsarVisionPrescription object) {
  IsarCore.writeString(writer, 1, isarJsonEncode(object.visionPrescription));
  return object.id;
}

@isarProtected
IsarVisionPrescription deserializeIsarVisionPrescription(IsarReader reader) {
  final int _id;
  _id = IsarCore.readId(reader);
  final Map<String, dynamic> _visionPrescription;
  {
    final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
    if (json is Map<String, dynamic>) {
      _visionPrescription = json;
    } else {
      _visionPrescription = const <String, dynamic>{};
    }
  }
  final object = IsarVisionPrescription(
    id: _id,
    visionPrescription: _visionPrescription,
  );
  return object;
}

@isarProtected
dynamic deserializeIsarVisionPrescriptionProp(IsarReader reader, int property) {
  switch (property) {
    case 0:
      return IsarCore.readId(reader);
    case 1:
      {
        final json = isarJsonDecode(IsarCore.readString(reader, 1) ?? 'null');
        if (json is Map<String, dynamic>) {
          return json;
        } else {
          return const <String, dynamic>{};
        }
      }
    default:
      throw ArgumentError('Unknown property: $property');
  }
}

extension IsarVisionPrescriptionQueryFilter on QueryBuilder<
    IsarVisionPrescription, IsarVisionPrescription, QFilterCondition> {
  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> idEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        EqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> idGreaterThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> idGreaterThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        GreaterOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> idLessThan(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> idLessThanOrEqualTo(
    int value,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        LessOrEqualCondition(
          property: 0,
          value: value,
        ),
      );
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription,
      QAfterFilterCondition> idBetween(
    int lower,
    int upper,
  ) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(
        BetweenCondition(
          property: 0,
          lower: lower,
          upper: upper,
        ),
      );
    });
  }
}

extension IsarVisionPrescriptionQueryObject on QueryBuilder<
    IsarVisionPrescription, IsarVisionPrescription, QFilterCondition> {}

extension IsarVisionPrescriptionQuerySortBy
    on QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QSortBy> {
  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      sortById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      sortByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      sortByVisionPrescription() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      sortByVisionPrescriptionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarVisionPrescriptionQuerySortThenBy on QueryBuilder<
    IsarVisionPrescription, IsarVisionPrescription, QSortThenBy> {
  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0);
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(0, sort: Sort.desc);
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      thenByVisionPrescription() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1);
    });
  }

  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterSortBy>
      thenByVisionPrescriptionDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(1, sort: Sort.desc);
    });
  }
}

extension IsarVisionPrescriptionQueryWhereDistinct
    on QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QDistinct> {
  QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QAfterDistinct>
      distinctByVisionPrescription() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(1);
    });
  }
}

extension IsarVisionPrescriptionQueryProperty1
    on QueryBuilder<IsarVisionPrescription, IsarVisionPrescription, QProperty> {
  QueryBuilder<IsarVisionPrescription, int, QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarVisionPrescription, Map<String, dynamic>, QAfterProperty>
      visionPrescriptionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarVisionPrescriptionQueryProperty2<R>
    on QueryBuilder<IsarVisionPrescription, R, QAfterProperty> {
  QueryBuilder<IsarVisionPrescription, (R, int), QAfterProperty> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarVisionPrescription, (R, Map<String, dynamic>),
      QAfterProperty> visionPrescriptionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}

extension IsarVisionPrescriptionQueryProperty3<R1, R2>
    on QueryBuilder<IsarVisionPrescription, (R1, R2), QAfterProperty> {
  QueryBuilder<IsarVisionPrescription, (R1, R2, int), QOperations>
      idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(0);
    });
  }

  QueryBuilder<IsarVisionPrescription, (R1, R2, Map<String, dynamic>),
      QOperations> visionPrescriptionProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addProperty(1);
    });
  }
}
